<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020-10-15 OC</title>
    <url>/2020/10/16/2020-10-15-OC/</url>
    <content><![CDATA[<h1 id="一-define和const常量的区别"><a href="#一-define和const常量的区别" class="headerlink" title="一.define和const常量的区别"></a>一.define和const常量的区别</h1><blockquote>
<p>define 是定义宏的指令，程序在预处理阶段进行替换，在程序运行时并没有用 define 定义的宏，系统不会为其分配内存并在编译时也不会进行数据类型检查，大量使用宏会导致二进制文件变大。</p>
<p>const 定义的常量是在程序运行时存放在常量表中，系统为其分配内存并在编译时进行数据类型检查。</p>
<p>define 不能调试，const可以调试；</p>
<p>define 可以定义简单函数，const只能定义常量</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 宏</span><br><span class="line">#define HSCoder @&quot;你好“</span><br><span class="line">// 变量</span><br><span class="line">NSString *coder = @&quot;你好&quot;;</span><br><span class="line">// 全局变量</span><br><span class="line">extern NSString *coder;</span><br><span class="line">// 全局常量</span><br><span class="line">extern NSString *const coder;</span><br><span class="line">// 全局指针变量</span><br><span class="line">extern const NSString *coder;</span><br><span class="line">extern NSString const *coder;</span><br><span class="line">// 局部常量</span><br><span class="line">static NSString *const coder = @&quot;你好&quot;;</span><br><span class="line">// 常量</span><br><span class="line">const NSString *coder;// *corder不能被修改 corder可以被修改</span><br><span class="line">NSString const *coder;// *corder不能被修改 corder可以被修改</span><br><span class="line">NSString *const coder;// *corder可以被修改 corder不能被修改</span><br><span class="line">// const右边的不能被修改</span><br><span class="line">// 当我们定义一个常量且不想被修改应该使用 NSString *const coder;</span><br></pre></td></tr></table></figure>

<h1 id="二-结构体-struct-和类-class-的区别"><a href="#二-结构体-struct-和类-class-的区别" class="headerlink" title="二.结构体( struct )和类( class )的区别"></a>二.结构体( struct )和类( class )的区别</h1><p>struct 和 class都可以将多个数据封装为一个整体</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 结构体(struct)</span><br><span class="line">struct People &#123;</span><br><span class="line">     NSString *name;</span><br><span class="line">     int age;</span><br><span class="line">     CGFloat height;</span><br><span class="line">&#125;;</span><br><span class="line">// 类(class)</span><br><span class="line">@interface People : NSObject &#123;</span><br><span class="line">    NSString *name;</span><br><span class="line">    int age;</span><br><span class="line">    CGFloat height;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<ul>
<li>struct 只能封装数据，class可以封装行为</li>
<li>struct 变量分配在栈空间（如果是一个局部变量的情况下），class对象分配在堆空间。</li>
<li>赋值 ：结构体是（拷贝），对象之间是（地址）</li>
<li>如果待封装的数据有属性也有方法，只能使用class</li>
<li>如果属性较少，使用struct（分配在栈，提高运行效率）；属性较多时使用class</li>
</ul>
<h1 id="三-synthesize和-dynamic的区别"><a href="#三-synthesize和-dynamic的区别" class="headerlink" title="三.@synthesize和@dynamic的区别"></a>三.@synthesize和@dynamic的区别</h1><p>@dynamic 需要自己实现 setter getter方法</p>
<p>@synthesize 系统会自动生成 setter getter方法，默认定义一个属性时，系统会自动生成，不需要自己手动写，自己手动添加 setter  或 getter方法后会覆盖系统默认的 setter 和 getter 方法。</p>
<h1 id="四-property的本质"><a href="#四-property的本质" class="headerlink" title="四.@property的本质"></a>四.@property的本质</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@property = ivar(实例变量) + setter + getter</span><br></pre></td></tr></table></figure>
<p>property（属性）的主要作用是封装对象的属性，对象通常会把需要的数据保存为各种ivar（实例变量），实例变量一般通过存取方法来访问ivar。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface PZMan : NSObject</span><br><span class="line"></span><br><span class="line">@property (strong, nonatomic) NSString *subName;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">#import &quot;PZMan.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation PZMan</span><br><span class="line">@synthesize subName = _subName;</span><br><span class="line"></span><br><span class="line">/// setter方法</span><br><span class="line">- (void)setSubName:(NSString *)subName &#123;</span><br><span class="line">    _subName = subName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// getter方法</span><br><span class="line">- (NSString *)subName &#123;</span><br><span class="line">    if (_subName.length &gt; 0) &#123;</span><br><span class="line">        return @&quot;PZ&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return _subName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<h1 id="五-Mac下终端升级（iTem2-oh-my-zsh-powerlevel10k）"><a href="#五-Mac下终端升级（iTem2-oh-my-zsh-powerlevel10k）" class="headerlink" title="五.Mac下终端升级（iTem2 + oh-my-zsh + powerlevel10k）"></a>五.Mac下终端升级（iTem2 + oh-my-zsh + powerlevel10k）</h1><p><a href="https://blog.csdn.net/weixin_43269020/article/details/105853693">https://blog.csdn.net/weixin_43269020/article/details/105853693</a></p>
<h1 id="六-iOS14-适配"><a href="#六-iOS14-适配" class="headerlink" title="六.iOS14 适配"></a>六.iOS14 适配</h1><ol>
<li><p><strong>UIDatePicker</strong></p>
<p>Xcode12 UIDatePicker 需要在设置frame之前添加preferredDatePickerStyle</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, UIDatePickerStyle) &#123;</span><br><span class="line">    /// Automatically pick the best style available for the current platform &amp; mode.</span><br><span class="line">    UIDatePickerStyleAutomatic,</span><br><span class="line">    /// Use the wheels (UIPickerView) style. Editing occurs inline.</span><br><span class="line">    UIDatePickerStyleWheels,</span><br><span class="line">    /// Use a compact style for the date picker. Editing occurs in an overlay.</span><br><span class="line">    UIDatePickerStyleCompact,</span><br><span class="line">    /// Use a style for the date picker that allows editing in place.</span><br><span class="line">    UIDatePickerStyleInline API_AVAILABLE(ios(14.0)) API_UNAVAILABLE(tvos, watchos),</span><br><span class="line">&#125; API_AVAILABLE(ios(13.4)) API_UNAVAILABLE(tvos, watchos);</span><br><span class="line"></span><br><span class="line">/// Request a style for the date picker. If the style changed, then the date picker may need to be resized and will generate a layout pass to display correctly.</span><br><span class="line">@property (nonatomic, readwrite, assign) UIDatePickerStyle preferredDatePickerStyle API_AVAILABLE(ios(13.4)) API_UNAVAILABLE(tvos, watchos);</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UIDatePicker *picker = [[UIDatePicker alloc] init];</span><br><span class="line">picker.datePickerMode = UIDatePickerModeDateAndTime;</span><br><span class="line">if (@available(iOS 13.4, *)) &#123;</span><br><span class="line">    picker.preferredDatePickerStyle = UIDatePickerStyleAutomatic;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // Fallback on earlier versions</span><br><span class="line">&#125;</span><br><span class="line">picker.frame = CGRectMake(0, 0, self.view.frame.size.width, 200);</span><br><span class="line">[self.view addSubview:picker];</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>复制黏贴</strong></p>
<p>弹出提示的原因是使用 UIPasteboard 访问用户数据，访问以下数据都会弹出 toast 提示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@property(nullable,nonatomic,copy) NSString *string API_UNAVAILABLE(tvos) API_UNAVAILABLE(watchos);</span><br><span class="line">@property(nullable,nonatomic,copy) NSArray&lt;NSString *&gt; *strings API_UNAVAILABLE(tvos) API_UNAVAILABLE(watchos);</span><br><span class="line"></span><br><span class="line">@property(nullable,nonatomic,copy) NSURL *URL API_UNAVAILABLE(tvos) API_UNAVAILABLE(watchos);</span><br><span class="line">@property(nullable,nonatomic,copy) NSArray&lt;NSURL *&gt; *URLs API_UNAVAILABLE(tvos) API_UNAVAILABLE(watchos);</span><br><span class="line"></span><br><span class="line">@property(nullable,nonatomic,copy) UIImage *image API_UNAVAILABLE(tvos) API_UNAVAILABLE(watchos);</span><br><span class="line">@property(nullable,nonatomic,copy) NSArray&lt;UIImage *&gt; *images API_UNAVAILABLE(tvos) API_UNAVAILABLE(watchos);</span><br><span class="line"></span><br><span class="line">@property(nullable,nonatomic,copy) UIColor *color API_UNAVAILABLE(tvos) API_UNAVAILABLE(watchos);</span><br><span class="line">@property(nullable,nonatomic,copy) NSArray&lt;UIColor *&gt; *colors API_UNAVAILABLE(tvos) API_UNAVAILABLE(watchos);</span><br></pre></td></tr></table></figure>

<p><strong>iOS14 新增了两个 API 可以用于规避该提示。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/// NSString value, suitable for implementing &quot;Paste and Go&quot;</span><br><span class="line">UIKIT_EXTERN UIPasteboardDetectionPattern const UIPasteboardDetectionPatternProbableWebURL API_AVAILABLE(ios(14.0));</span><br><span class="line"></span><br><span class="line">/// NSString value, suitable for implementing &quot;Paste and Search&quot;</span><br><span class="line">UIKIT_EXTERN UIPasteboardDetectionPattern const UIPasteboardDetectionPatternProbableWebSearch API_AVAILABLE(ios(14.0));</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 可用于规避提示，但只能用于判断剪切板中是否有 URL，并不是真正的访问剪贴板数据，也拿不到剪切板的真实数据。</span><br><span class="line">// Detection</span><br><span class="line"></span><br><span class="line">/// Detects patterns in the first pasteboard item.</span><br><span class="line">///</span><br><span class="line">/// @param patterns Detect only these patterns.</span><br><span class="line">/// @param completionHandler Receives which patterns were detected, or an error.</span><br><span class="line">- (void)detectPatternsForPatterns:(NSSet&lt;UIPasteboardDetectionPattern&gt; *)patterns</span><br><span class="line">                completionHandler:(void(^)(NSSet&lt;UIPasteboardDetectionPattern&gt; * _Nullable,</span><br><span class="line">                                           NSError * _Nullable))completionHandler NS_REFINED_FOR_SWIFT API_AVAILABLE(ios(14.0));</span><br><span class="line">                                           </span><br><span class="line">/// 可用于规避提示，但只能用于判断剪切板中是否有 URL，并不是真正的访问剪贴板数据，也拿不到剪切板的真实数据。</span><br><span class="line">/// Detects patterns in the specified pasteboard items.</span><br><span class="line">///</span><br><span class="line">/// @param patterns Detect only these patterns.</span><br><span class="line">/// @param itemSet Specifies which pasteboard items by their position. Nil means all items.</span><br><span class="line">/// @param completionHandler Receives which patterns were detected per item specified,</span><br><span class="line">///                          or an error.</span><br><span class="line">- (void)detectPatternsForPatterns:(NSSet&lt;UIPasteboardDetectionPattern&gt; *)patterns</span><br><span class="line">                        inItemSet:(NSIndexSet * _Nullable)itemSet</span><br><span class="line">                completionHandler:(void(^)(NSArray&lt;NSSet&lt;UIPasteboardDetectionPattern&gt; *&gt; * _Nullable,</span><br><span class="line">                                           NSError * _Nullable))completionHandler NS_REFINED_FOR_SWIFT API_AVAILABLE(ios(14.0));</span><br><span class="line">                                           </span><br><span class="line">                                           </span><br><span class="line">/// 可以获得具体的 URL 信息，但是会触发剪切板提示。并且实测当用户剪切板中包含多个 URL 时只会返回第一个。</span><br><span class="line">/// Detects patterns and corresponding values in the first pasteboard item.</span><br><span class="line">///</span><br><span class="line">/// @param patterns Detect only these patterns.</span><br><span class="line">/// @param completionHandler Receives which patterns and values were detected, or an error.</span><br><span class="line">- (void)detectValuesForPatterns:(NSSet&lt;UIPasteboardDetectionPattern&gt; *)patterns</span><br><span class="line">              completionHandler:(void(^)(NSDictionary&lt;UIPasteboardDetectionPattern, id&gt; * _Nullable,</span><br><span class="line">                                         NSError * _Nullable))completionHandler NS_REFINED_FOR_SWIFT API_AVAILABLE(ios(14.0));</span><br><span class="line">                                         </span><br><span class="line">/// 可以获得具体的 URL 信息，但是会触发剪切板提示。并且实测当用户剪切板中包含多个 URL 时只会返回第一个。</span><br><span class="line">/// Detects patterns and corresponding values in the specified pasteboard items.</span><br><span class="line">///</span><br><span class="line">/// @param patterns Detect only these patterns.</span><br><span class="line">/// @param itemSet Specifies which pasteboard items by their position. Nil means all items.</span><br><span class="line">/// @param completionHandler Receives which patterns and values were detected per item specified,</span><br><span class="line">///                          or an error.</span><br><span class="line">- (void)detectValuesForPatterns:(NSSet&lt;UIPasteboardDetectionPattern&gt; *)patterns</span><br><span class="line">                      inItemSet:(NSIndexSet * _Nullable)itemSet</span><br><span class="line">              completionHandler:(void(^)(NSArray&lt;NSDictionary&lt;UIPasteboardDetectionPattern, id&gt; *&gt; * _Nullable,</span><br><span class="line">                                         NSError * _Nullable))completionHandler NS_REFINED_FOR_SWIFT API_AVAILABLE(ios(14.0));</span><br></pre></td></tr></table></figure>

<p><strong>使用示例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 剪切板</span><br><span class="line">UIPasteboard *board = [UIPasteboard generalPasteboard];</span><br><span class="line">if (@available(iOS 14.0, *)) &#123;</span><br><span class="line">    NSSet *patterns = [NSSet setWithObjects:UIPasteboardDetectionPatternProbableWebURL, UIPasteboardDetectionPatternNumber, UIPasteboardDetectionPatternProbableWebSearch, nil];</span><br><span class="line">    [board detectPatternsForPatterns:patterns</span><br><span class="line">                   completionHandler:^(NSSet&lt;UIPasteboardDetectionPattern&gt; * _Nullable set, NSError * _Nullable error) &#123;</span><br><span class="line">        BOOL hasNumber = NO, hasURL = NO, hasSearch = NO;</span><br><span class="line">        for (NSString *type in set) &#123;</span><br><span class="line">            if ([type isEqualToString:UIPasteboardDetectionPatternProbableWebURL]) &#123;</span><br><span class="line">                hasURL = YES;</span><br><span class="line">            &#125; else if ([type isEqualToString:UIPasteboardDetectionPatternNumber]) &#123;</span><br><span class="line">                hasNumber = YES;</span><br><span class="line">            &#125; else if ([type isEqualToString:UIPasteboardDetectionPatternProbableWebSearch]) &#123;</span><br><span class="line">                hasSearch = YES;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (hasSearch) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        if (hasURL) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        if (hasNumber) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line">// 不能使用.string或.strings否则还是会弹出提示框</span><br><span class="line">NSString *pastString = board.string;</span><br><span class="line">NSLog(@&quot;pastString = %@&quot;, pastString);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>KVC（UIPageControl的pageimage）</strong></p>
<p>​        私有方法 KVC 不允许使用，日志报 <code>&#39;setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key _pageImage.&#39;</code><br>​         在iOS14下设置<code>UIPageControl</code>的<code>pageimage</code>，会导致奔溃，不能再用了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (@available(iOS 14.0,*)) &#123;</span><br><span class="line">   pageControl.preferredIndicatorImage = [self imageWithColor:[UIColor whiteColor]];</span><br><span class="line">   pageControl.currentPageIndicatorTintColor = [UIColor redColor];</span><br><span class="line">   pageControl.pageIndicatorTintColor = [UIColor blueColor];</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   [pageControl setValue:[UIImage imageNamed:@&quot;pageContrImg&quot;]forKeyPath:@&quot;pageImage&quot;];</span><br><span class="line">   [pageControl setValue:[UIImage imageNamed:@&quot;pageContrCurrentImg&quot;]forKeyPath:@&quot;currentPageImage&quot;];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>TableViewCell</strong></p>
<p>​        xcode12上cell添加button，不能<code>[self addSubview:self.cellBtn]</code> 需要<code>[self.contentView addSubview:self.cellBtn]</code>，<code>contentView</code>的层级被提上来了，<code>self addSubview</code>会导致<code>button</code>不响应点击事件.也可以在添加控件之前提前调用<code>contentView</code></p>
</li>
<li><p><strong>相机权限</strong></p>
<p>​        iOS14 新增了<code>Limited Photo Library Access</code> 模式，在授权弹窗中增加了 <code>Select Photo</code> 选项。用户可以在 App 请求调用相册时选择部分照片让 App 读取。从 App 的视⻆来看，你的相册里就只有这几张照片，App 无法得知其它照片的存在。</p>
<p>​        <code>PHAuthorizationStatusLimited</code> 时，如果未进行适配，有可能会在每次触发相册功能时都进行弹窗询问用户是否需要修改照片权限。</p>
<p>​        对于这种情况可通过在 <code>Info.plist</code> 中设置<code>PHPhotoLibraryPreventAutomaticLimitedAccessAlert</code>的值为<code>YES</code>来阻止该弹窗反复弹出，并且可通过下面这个 API 来主动控制何时弹出<code>PHPickerViewController</code>进行照片选择。</p>
<p>​        具体可以参考文章<a href="https://www.jianshu.com/p/1803bd950b90">iOS14 隐私适配及部分解决方案</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>App架构-编程语言、面向对象思想</title>
    <url>/2021/07/17/App%E6%9E%B6%E6%9E%84-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E3%80%81%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/</url>
    <content><![CDATA[<h2 id="App架构-编程语言、面向对象思想"><a href="#App架构-编程语言、面向对象思想" class="headerlink" title="App架构-编程语言、面向对象思想"></a>App架构-编程语言、面向对象思想</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsjxrmlihyj30yq0k0419.jpg" alt="Soul&amp;Sword"></p>
<p>如果只会一门编程语言，无论多么精通，仍然显得不够优秀。</p>
<p>在我们进行APP开发过程中要把握好以下几点：抓中心、看本质、重思想。</p>
<h2 id="2-1-编程语言"><a href="#2-1-编程语言" class="headerlink" title="2.1 编程语言"></a>2.1 编程语言</h2><h3 id="2-1-1-Swift"><a href="#2-1-1-Swift" class="headerlink" title="2.1.1 Swift"></a>2.1.1 Swift</h3><p>Swift是Apple 2014年编程的编程语言，已支持 Android NDK。</p>
<p>下图是java和swift对比。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsjxrs0h6kj310q0u0dkf.jpg" alt="img"></p>
<h3 id="2-1-2-Optional"><a href="#2-1-2-Optional" class="headerlink" title="2.1.2 Optional"></a>2.1.2 Optional</h3><p>Swift中引用了Optional，可以理解为一种新的类型，很好地解决了OC的“nil or not nil”问题，Java 8也用了Optional。Optional的核心思想是采用<strong>契约式</strong>编程思想（如断言），将问题显性的呈现出来。</p>
<p>我们可以通过查看源码，了解Swift Optional的定义（Swift/Stdlib/Public/Core/Optional.Swift），其本质是一个枚举，包含none和some（Wapped）两个case，分别代表可选类型“有值”和“无值”两种情况。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@frozen</span> <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Optional</span>  : <span class="title">ExpressibleByNilLiteral</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// The absence of a value.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// In code, the absence of a value is typically written using the `nil`</span></span><br><span class="line">    <span class="comment">/// literal rather than the explicit `.none` enumeration case.</span></span><br><span class="line">    <span class="keyword">case</span> none</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The presence of a value, stored as `Wrapped`.</span></span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">some</span>(<span class="type">Wrapped</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Creates an instance that stores the given value.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">some</span>: <span class="type">Wrapped</span>)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Evaluates the given closure when this `Optional` instance is not `nil`,</span></span><br><span class="line">    <span class="comment">/// passing the unwrapped value as a parameter.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// Use the `map` method with a closure that returns a non-optional value.</span></span><br><span class="line">    <span class="comment">/// This example performs an arithmetic operation on an</span></span><br><span class="line">    <span class="comment">/// optional integer.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">///     let possibleNumber: Int? = Int(&quot;42&quot;)</span></span><br><span class="line">    <span class="comment">///     let possibleSquare = possibleNumber.map &#123; $0 * $0 &#125;</span></span><br><span class="line">    <span class="comment">///     print(possibleSquare)</span></span><br><span class="line">    <span class="comment">///     // Prints &quot;Optional(1764)&quot;</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">///     let noNumber: Int? = nil</span></span><br><span class="line">    <span class="comment">///     let noSquare = noNumber.map &#123; $0 * $0 &#125;</span></span><br><span class="line">    <span class="comment">///     print(noSquare)</span></span><br><span class="line">    <span class="comment">///     // Prints &quot;nil&quot;</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameter transform: A closure that takes the unwrapped value</span></span><br><span class="line">    <span class="comment">///   of the instance.</span></span><br><span class="line">    <span class="comment">/// - Returns: The result of the given closure. If this instance is `nil`,</span></span><br><span class="line">    <span class="comment">///   returns `nil`.</span></span><br><span class="line">    <span class="keyword">@inlinable</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;<span class="type">U</span>&gt;(<span class="keyword">_</span> <span class="params">transform</span>: (<span class="type">Wrapped</span>) <span class="keyword">throws</span> -&gt; <span class="type">U</span>)</span> <span class="keyword">rethrows</span> -&gt; <span class="type">U</span>?</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Evaluates the given closure when this `Optional` instance is not `nil`,</span></span><br><span class="line">    <span class="comment">/// passing the unwrapped value as a parameter.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// Use the `flatMap` method with a closure that returns an optional value.</span></span><br><span class="line">    <span class="comment">/// This example performs an arithmetic operation with an optional result on</span></span><br><span class="line">    <span class="comment">/// an optional integer.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">///     let possibleNumber: Int? = Int(&quot;42&quot;)</span></span><br><span class="line">    <span class="comment">///     let nonOverflowingSquare = possibleNumber.flatMap &#123; x -&gt; Int? in</span></span><br><span class="line">    <span class="comment">///         let (result, overflowed) = x.multipliedReportingOverflow(by: x)</span></span><br><span class="line">    <span class="comment">///         return overflowed ? nil : result</span></span><br><span class="line">    <span class="comment">///     &#125;</span></span><br><span class="line">    <span class="comment">///     print(nonOverflowingSquare)</span></span><br><span class="line">    <span class="comment">///     // Prints &quot;Optional(1764)&quot;</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameter transform: A closure that takes the unwrapped value</span></span><br><span class="line">    <span class="comment">///   of the instance.  </span></span><br><span class="line">    <span class="comment">/// - Returns: The result of the given closure. If this instance is `nil`,</span></span><br><span class="line">    <span class="comment">///   returns `nil`.</span></span><br><span class="line">    <span class="keyword">@inlinable</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;<span class="type">U</span>&gt;(<span class="keyword">_</span> <span class="params">transform</span>: (<span class="type">Wrapped</span>) <span class="keyword">throws</span> -&gt; <span class="type">U</span>?)</span> <span class="keyword">rethrows</span> -&gt; <span class="type">U</span>?</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Creates an instance initialized with `nil`.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// Do not call this initializer directly. It is used by the compiler when you</span></span><br><span class="line">    <span class="comment">/// initialize an `Optional` instance with a `nil` literal. For example:</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">///     var i: Index? = nil</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// In this example, the assignment to the `i` variable calls this</span></span><br><span class="line">    <span class="comment">/// initializer behind the scenes.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">init</span>(<span class="params">nilLiteral</span>: ())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The wrapped value of this instance, unwrapped without checking whether</span></span><br><span class="line">    <span class="comment">/// the instance is `nil`.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// The `unsafelyUnwrapped` property provides the same value as the forced</span></span><br><span class="line">    <span class="comment">/// unwrap operator (postfix `!`). However, in optimized builds (`-O`), no</span></span><br><span class="line">    <span class="comment">/// check is performed to ensure that the current instance actually has a</span></span><br><span class="line">    <span class="comment">/// value. Accessing this property in the case of a `nil` value is a serious</span></span><br><span class="line">    <span class="comment">/// programming error and could lead to undefined behavior or a runtime</span></span><br><span class="line">    <span class="comment">/// error.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// In debug builds (`-Onone`), the `unsafelyUnwrapped` property has the same</span></span><br><span class="line">    <span class="comment">/// behavior as using the postfix `!` operator and triggers a runtime error</span></span><br><span class="line">    <span class="comment">/// if the instance is `nil`.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// The `unsafelyUnwrapped` property is recommended over calling the</span></span><br><span class="line">    <span class="comment">/// `unsafeBitCast(_:)` function because the property is more restrictive</span></span><br><span class="line">    <span class="comment">/// and because accessing the property still performs checking in debug</span></span><br><span class="line">    <span class="comment">/// builds.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Warning: This property trades safety for performance.  Use</span></span><br><span class="line">    <span class="comment">///   `unsafelyUnwrapped` only when you are confident that this instance</span></span><br><span class="line">    <span class="comment">///   will never be equal to `nil` and only after you&#x27;ve tried using the</span></span><br><span class="line">    <span class="comment">///   postfix `!` operator.</span></span><br><span class="line">    <span class="keyword">@inlinable</span> <span class="keyword">public</span> <span class="keyword">var</span> unsafelyUnwrapped: <span class="type">Wrapped</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Returns a Boolean value indicating whether an argument matches `nil`.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// You can use the pattern-matching operator (`~=`) to test whether an</span></span><br><span class="line">    <span class="comment">/// optional instance is `nil` even when the wrapped value&#x27;s type does not</span></span><br><span class="line">    <span class="comment">/// conform to the `Equatable` protocol. The pattern-matching operator is used</span></span><br><span class="line">    <span class="comment">/// internally in `case` statements for pattern matching.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// The following example declares the `stream` variable as an optional</span></span><br><span class="line">    <span class="comment">/// instance of a hypothetical `DataStream` type, and then uses a `switch`</span></span><br><span class="line">    <span class="comment">/// statement to determine whether the stream is `nil` or has a configured</span></span><br><span class="line">    <span class="comment">/// value. When evaluating the `nil` case of the `switch` statement, this</span></span><br><span class="line">    <span class="comment">/// operator is called behind the scenes.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">///     var stream: DataStream? = nil</span></span><br><span class="line">    <span class="comment">///     switch stream &#123;</span></span><br><span class="line">    <span class="comment">///     case nil:</span></span><br><span class="line">    <span class="comment">///         print(&quot;No data stream is configured.&quot;)</span></span><br><span class="line">    <span class="comment">///     case let x?:</span></span><br><span class="line">    <span class="comment">///         print(&quot;The data stream has \(x.availableBytes) bytes available.&quot;)</span></span><br><span class="line">    <span class="comment">///     &#125;</span></span><br><span class="line">    <span class="comment">///     // Prints &quot;No data stream is configured.&quot;</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Note: To test whether an instance is `nil` in an `if` statement, use the</span></span><br><span class="line">    <span class="comment">///   equal-to operator (`==`) instead of the pattern-matching operator. The</span></span><br><span class="line">    <span class="comment">///   pattern-matching operator is primarily intended to enable `case`</span></span><br><span class="line">    <span class="comment">///   statement pattern matching.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameters:</span></span><br><span class="line">    <span class="comment">///   - lhs: A `nil` literal.</span></span><br><span class="line">    <span class="comment">///   - rhs: A value to match against `nil`.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">~=</span> (<span class="params">lhs</span>: _OptionalNilComparisonType, <span class="params">rhs</span>: <span class="type">Wrapped</span>?)</span> -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Returns a Boolean value indicating whether the left-hand-side argument is</span></span><br><span class="line">    <span class="comment">/// `nil`.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// You can use this equal-to operator (`==`) to test whether an optional</span></span><br><span class="line">    <span class="comment">/// instance is `nil` even when the wrapped value&#x27;s type does not conform to</span></span><br><span class="line">    <span class="comment">/// the `Equatable` protocol.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// The following example declares the `stream` variable as an optional</span></span><br><span class="line">    <span class="comment">/// instance of a hypothetical `DataStream` type. Although `DataStream` is not</span></span><br><span class="line">    <span class="comment">/// an `Equatable` type, this operator allows checking whether `stream` is</span></span><br><span class="line">    <span class="comment">/// `nil`.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">///     var stream: DataStream? = nil</span></span><br><span class="line">    <span class="comment">///     if stream == nil &#123;</span></span><br><span class="line">    <span class="comment">///         print(&quot;No data stream is configured.&quot;)</span></span><br><span class="line">    <span class="comment">///     &#125;</span></span><br><span class="line">    <span class="comment">///     // Prints &quot;No data stream is configured.&quot;</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameters:</span></span><br><span class="line">    <span class="comment">///   - lhs: A value to compare to `nil`.</span></span><br><span class="line">    <span class="comment">///   - rhs: A `nil` literal.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">==</span> (<span class="params">lhs</span>: <span class="type">Wrapped</span>?, <span class="params">rhs</span>: _OptionalNilComparisonType)</span> -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Returns a Boolean value indicating whether the left-hand-side argument is</span></span><br><span class="line">    <span class="comment">/// not `nil`.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// You can use this not-equal-to operator (`!=`) to test whether an optional</span></span><br><span class="line">    <span class="comment">/// instance is not `nil` even when the wrapped value&#x27;s type does not conform</span></span><br><span class="line">    <span class="comment">/// to the `Equatable` protocol.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// The following example declares the `stream` variable as an optional</span></span><br><span class="line">    <span class="comment">/// instance of a hypothetical `DataStream` type. Although `DataStream` is not</span></span><br><span class="line">    <span class="comment">/// an `Equatable` type, this operator allows checking whether `stream` wraps</span></span><br><span class="line">    <span class="comment">/// a value and is therefore not `nil`.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">///     var stream: DataStream? = fetchDataStream()</span></span><br><span class="line">    <span class="comment">///     if stream != nil &#123;</span></span><br><span class="line">    <span class="comment">///         print(&quot;The data stream has been configured.&quot;)</span></span><br><span class="line">    <span class="comment">///     &#125;</span></span><br><span class="line">    <span class="comment">///     // Prints &quot;The data stream has been configured.&quot;</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameters:</span></span><br><span class="line">    <span class="comment">///   - lhs: A value to compare to `nil`.</span></span><br><span class="line">    <span class="comment">///   - rhs: A `nil` literal.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">!=</span> (<span class="params">lhs</span>: <span class="type">Wrapped</span>?, <span class="params">rhs</span>: _OptionalNilComparisonType)</span> -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Returns a Boolean value indicating whether the right-hand-side argument is</span></span><br><span class="line">    <span class="comment">/// `nil`.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// You can use this equal-to operator (`==`) to test whether an optional</span></span><br><span class="line">    <span class="comment">/// instance is `nil` even when the wrapped value&#x27;s type does not conform to</span></span><br><span class="line">    <span class="comment">/// the `Equatable` protocol.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// The following example declares the `stream` variable as an optional</span></span><br><span class="line">    <span class="comment">/// instance of a hypothetical `DataStream` type. Although `DataStream` is not</span></span><br><span class="line">    <span class="comment">/// an `Equatable` type, this operator allows checking whether `stream` is</span></span><br><span class="line">    <span class="comment">/// `nil`.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">///     var stream: DataStream? = nil</span></span><br><span class="line">    <span class="comment">///     if nil == stream &#123;</span></span><br><span class="line">    <span class="comment">///         print(&quot;No data stream is configured.&quot;)</span></span><br><span class="line">    <span class="comment">///     &#125;</span></span><br><span class="line">    <span class="comment">///     // Prints &quot;No data stream is configured.&quot;</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameters:</span></span><br><span class="line">    <span class="comment">///   - lhs: A `nil` literal.</span></span><br><span class="line">    <span class="comment">///   - rhs: A value to compare to `nil`.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">==</span> (<span class="params">lhs</span>: _OptionalNilComparisonType, <span class="params">rhs</span>: <span class="type">Wrapped</span>?)</span> -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Returns a Boolean value indicating whether the right-hand-side argument is</span></span><br><span class="line">    <span class="comment">/// not `nil`.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// You can use this not-equal-to operator (`!=`) to test whether an optional</span></span><br><span class="line">    <span class="comment">/// instance is not `nil` even when the wrapped value&#x27;s type does not conform</span></span><br><span class="line">    <span class="comment">/// to the `Equatable` protocol.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// The following example declares the `stream` variable as an optional</span></span><br><span class="line">    <span class="comment">/// instance of a hypothetical `DataStream` type. Although `DataStream` is not</span></span><br><span class="line">    <span class="comment">/// an `Equatable` type, this operator allows checking whether `stream` wraps</span></span><br><span class="line">    <span class="comment">/// a value and is therefore not `nil`.</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">///     var stream: DataStream? = fetchDataStream()</span></span><br><span class="line">    <span class="comment">///     if nil != stream &#123;</span></span><br><span class="line">    <span class="comment">///         print(&quot;The data stream has been configured.&quot;)</span></span><br><span class="line">    <span class="comment">///     &#125;</span></span><br><span class="line">    <span class="comment">///     // Prints &quot;The data stream has been configured.&quot;</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// - Parameters:</span></span><br><span class="line">    <span class="comment">///   - lhs: A `nil` literal.</span></span><br><span class="line">    <span class="comment">///   - rhs: A value to compare to `nil`.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">!=</span> (<span class="params">lhs</span>: _OptionalNilComparisonType, <span class="params">rhs</span>: <span class="type">Wrapped</span>?)</span> -&gt; <span class="type">Bool</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-1-3-Java-和-Swift核心语法对比"><a href="#2-1-3-Java-和-Swift核心语法对比" class="headerlink" title="2.1.3 Java 和 Swift核心语法对比"></a>2.1.3 Java 和 Swift核心语法对比</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsjxryu9ycj30zg0u045i.jpg" alt="img"></p>
<p>下面我们对比下Java/Guava和Swift中对Optional的使用，最终发现Java和Guava非常相似。</p>
<ul>
<li>初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional xx= Optional.empty(); <span class="comment">// java8</span></span><br><span class="line"></span><br><span class="line">Optional xx= Optional.absent(); <span class="comment">// guava </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xx: XX?; <span class="comment">// guava															</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java8</span></span><br><span class="line">Optional&lt;Integer&gt; xx = Optional.of (<span class="number">12</span>);Optional&lt;Integer&gt; xx = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// guava</span></span><br><span class="line">Optional&lt;Integer&gt; = Optional.of(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">Optional&lt;Integer&gt;  = Optional.fromNullable(<span class="keyword">null</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Swift</span></span><br><span class="line"><span class="keyword">var</span> xx: <span class="type">Int</span>? <span class="operator">=</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xx: <span class="type">Int</span>?</span><br></pre></td></tr></table></figure>

<ul>
<li>是否存在</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  java</span></span><br><span class="line"><span class="keyword">if</span> (xx.isPresent()) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// guava</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (xx.isPresent()) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// swift</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> xx<span class="operator">=</span> xx &#123;)								</span><br></pre></td></tr></table></figure>



<h2 id="2-2-面向对象思想"><a href="#2-2-面向对象思想" class="headerlink" title="2.2 面向对象思想"></a>2.2 面向对象思想</h2><h3 id="2-2-1-编程范式-Programming-Paradigm"><a href="#2-2-1-编程范式-Programming-Paradigm" class="headerlink" title="2.2.1 编程范式(Programming Paradigm)"></a>2.2.1 编程范式(Programming Paradigm)</h3><p>编程范式是编程语言的一种分类，并不是针对哪种具体编程语言，一种语言也可以适用多种编程范式。</p>
<p>编程范式/编程范型，是指从事软件工程的一种典型的编程风格（可以对照方法学），例如，函数式编程、面向对象编程等为不同的编程范式。</p>
<p>常见的编程范式有过程化（命令化）编程、事件驱动编程、面向对象编程及函数式编程等。</p>
<ul>
<li><p>过程化（命令式）编程。如将机器/汇编语言、BASIC、C、ForTRAN等支持过程化的编程范式的编程语言归纳为过程是编程语言，特别适合解决现行的算法问题，属于典型的程序流程思想。</p>
</li>
<li><p>事件驱动编程。结合图形用户界面（GUI）编程应用。</p>
</li>
<li><p>面向对象编程（OOP）。面向对象的基本概念–封装、继承、多态，通过类、方法、对象和消息传递，来支持面向对象的程序设计范式，Java和C++都是面向对象的编程语言。</p>
</li>
<li><p>函数编程。函数编程是一种结构化编程，其核心思想是把运算过程尽量携程一些列嵌套的函数调用，在代码建解读、代码管理、并发编程上更加便捷，这是继OO之后越来越火热的一种编程范式。</p>
</li>
<li><p>面向切向编程（AOP）。AOP可以认为是函数式编程的一种衍生范型，利用AOP可以对业务逻辑的各个部分进行隔离，使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，从而提高开发效率。</p>
</li>
</ul>
<h3 id="2-2-2-封装、继承和多态"><a href="#2-2-2-封装、继承和多态" class="headerlink" title="2.2.2 封装、继承和多态"></a>2.2.2 封装、继承和多态</h3><p>OO</p>
<hr>
<blockquote>
<p><strong>个人博客:</strong> 🏡 <a href="https://forgetsou.github.io/">ForgetSou</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>App架构</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter-创建底部导航栏</title>
    <url>/2020/12/25/Flutter-%E5%88%9B%E5%BB%BA%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>底部导航栏是我们日常开发中经常用到的导航工具，用于切换到不同的展示页，比如微信、支付宝、淘宝等大厂APP都是使用底部导航栏设计，此设计也符合用户的使用习惯，下面我们使用<code>flutter</code>创建一个简单的底部工具栏。</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm04gvhc81j30u01sxtb1.jpg" alt="效果图"></p>
<hr>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>在fluuter开发中，万物皆是<code>Wdiget</code>, <code>flutter</code>官方提供的一个底部导航组件<code>BottomNavigationBar</code>，我们就使用<code>BottomNavigationBar</code>创建。</p>
<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a><strong>方式一</strong></h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/foundation.dart&#x27;</span> <span class="keyword">show</span> SynchronousFuture;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_localizations/flutter_localizations.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZDLocalizations</span> </span>&#123;</span><br><span class="line">  ZDLocalizations(<span class="keyword">this</span>.locale);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Locale locale;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> ZDLocalizations of(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Localizations.of&lt;ZDLocalizations&gt;(context, ZDLocalizations);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;&gt; _localizedValues = &#123;</span><br><span class="line">    <span class="string">&#x27;en&#x27;</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;List View&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;zh&#x27;</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;列表视图&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> <span class="keyword">get</span> title &#123;</span><br><span class="line">    <span class="keyword">return</span> _localizedValues[locale.languageCode][<span class="string">&#x27;title&#x27;</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoLocalizationsDelegate</span> <span class="keyword">extends</span> <span class="title">LocalizationsDelegate</span>&lt;<span class="title">ZDLocalizations</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> DemoLocalizationsDelegate();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> isSupported(Locale locale) =&gt; [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;zh&#x27;</span>].contains(locale.languageCode);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Future&lt;ZDLocalizations&gt; load(Locale locale) &#123;</span><br><span class="line">    <span class="comment">// Returning a SynchronousFuture here because an async &quot;load&quot; operation</span></span><br><span class="line">    <span class="comment">// isn&#x27;t needed to produce an instance of DemoLocalizations.</span></span><br><span class="line">    <span class="keyword">return</span> SynchronousFuture&lt;ZDLocalizations&gt;(ZDLocalizations(locale));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldReload(DemoLocalizationsDelegate old) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// final wordPair = new WordPair.random();</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      home: <span class="keyword">new</span> CreateHome(),</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primaryColor: Colors.orange,</span><br><span class="line">      ),</span><br><span class="line">      <span class="comment">// 国际化</span></span><br><span class="line">      localizationsDelegates: [</span><br><span class="line">        <span class="keyword">const</span> DemoLocalizationsDelegate(),</span><br><span class="line">        GlobalMaterialLocalizations.delegate,</span><br><span class="line">        GlobalWidgetsLocalizations.delegate,</span><br><span class="line">      ],</span><br><span class="line">      supportedLocales: [<span class="keyword">const</span> Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;&#x27;</span>), <span class="keyword">const</span> Locale(<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;&#x27;</span>)],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateHome</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  CreateHomeState createState() =&gt; CreateHomeState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateHomeState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">CreateHome</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _currentIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">final</span> _bodyOptions = [</span><br><span class="line">    Text(<span class="string">&#x27;主页&#x27;</span>),</span><br><span class="line">    Text(<span class="string">&#x27;商城&#x27;</span>),</span><br><span class="line">    Text(<span class="string">&#x27;消息&#x27;</span>),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IBAction</span></span><br><span class="line">  <span class="keyword">void</span> backOnPressed() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> menuOnPressed() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> onTabBarItemTapped(<span class="built_in">int</span> idx) &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _currentIndex = idx;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: _createAppBar(),</span><br><span class="line">      body: Center(child: _bodyOptions.elementAt(_currentIndex)),</span><br><span class="line">      bottomNavigationBar: _createTabBar(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _createAppBar() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AppBar(</span><br><span class="line">      brightness: Brightness.dark,</span><br><span class="line">      elevation: <span class="number">0.5</span>,</span><br><span class="line">      iconTheme: IconThemeData(color: Colors.white),</span><br><span class="line">      title: Text(</span><br><span class="line">        ZDLocalizations.of(context).title,</span><br><span class="line">        style: TextStyle(color: Colors.white),</span><br><span class="line">      ),</span><br><span class="line">      actions: [</span><br><span class="line">        IconButton(</span><br><span class="line">          icon: Icon(Icons.menu),</span><br><span class="line">          onPressed: menuOnPressed,</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">      leading: IconButton(</span><br><span class="line">        icon: Icon(</span><br><span class="line">          Icons.arrow_back_ios,</span><br><span class="line">        ),</span><br><span class="line">        onPressed: backOnPressed,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _createTabBar() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BottomNavigationBar(</span><br><span class="line">      fixedColor: Colors.blue,</span><br><span class="line">      backgroundColor: Colors.orange,</span><br><span class="line">      currentIndex: _currentIndex,</span><br><span class="line">      onTap: onTabBarItemTapped,</span><br><span class="line">      items: [</span><br><span class="line">        BottomNavigationBarItem(icon: Icon(Icons.home), label: <span class="string">&#x27;主页&#x27;</span>),</span><br><span class="line">        BottomNavigationBarItem(icon: Icon(Icons.shop), label: <span class="string">&#x27;商城&#x27;</span>),</span><br><span class="line">        BottomNavigationBarItem(icon: Icon(Icons.message), label: <span class="string">&#x27;消息&#x27;</span>)</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>说明：</strong></p>
<p><strong><em>以上代码有国际化示例部分，本博主比较懒，国际化的内容没删除，直接从工程里Copy出来的。</em></strong></p>
<h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a><strong>方式二</strong></h2><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm13sxt56lj306n035aa4.jpg" alt="模块划分"></p>
<blockquote>
<p>home_page           首页<br>dialogue_page       对话<br>record_page          录音<br>mine_page             我的</p>
</blockquote>
<p>在<code>home_page.dart</code>内添加模块组件</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">        body: Container(</span><br><span class="line">      margin: EdgeInsets.only(top: <span class="number">0</span>, left: <span class="number">0</span>, bottom: <span class="number">0</span>, right: <span class="number">0</span>),</span><br><span class="line">      color: Colors.white,</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他模块同上，具体模块的<code>Scaffold</code>内容根据具体业务来实现，本文直接复制<code>home_page.dart</code>的内容，略微修改<code>Container</code>的颜色以区分模块。</p>
<h3 id="创建组件控制dart"><a href="#创建组件控制dart" class="headerlink" title="创建组件控制dart"></a>创建组件控制dart</h3><ol>
<li><p>导入模块dart</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;pages/home_page.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;pages/dialogue_page.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;pages/record_page.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;pages/mine_page.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加底部导航按钮及点击控制</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _IndexPageState createState() =&gt; _IndexPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_IndexPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">IndexPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 底部导航按钮数组</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;BottomNavigationBarItem&gt; bottomTabs = [</span><br><span class="line">    BottomNavigationBarItem(</span><br><span class="line">      	<span class="comment">// 使用asset图片，也可以使用系统提供的图片，如Icons.home等</span></span><br><span class="line">        icon: Image.asset(</span><br><span class="line">          <span class="string">&#x27;images/home_unselected.png&#x27;</span>,</span><br><span class="line">          width: <span class="number">18</span>,</span><br><span class="line">          height: <span class="number">18</span>,</span><br><span class="line">        ),</span><br><span class="line">        activeIcon: Image.asset(</span><br><span class="line">          <span class="string">&#x27;images/home_selected.png&#x27;</span>,</span><br><span class="line">          width: <span class="number">18</span>,</span><br><span class="line">          height: <span class="number">18</span>,</span><br><span class="line">        ),</span><br><span class="line">        label: <span class="string">&#x27;首页&#x27;</span>),</span><br><span class="line">    BottomNavigationBarItem(</span><br><span class="line">        icon: Image.asset(</span><br><span class="line">          <span class="string">&#x27;images/dialogue_unselected.png&#x27;</span>,</span><br><span class="line">          width: <span class="number">18</span>,</span><br><span class="line">          height: <span class="number">18</span>,</span><br><span class="line">        ),</span><br><span class="line">        activeIcon: Image.asset(</span><br><span class="line">          <span class="string">&#x27;images/dialogue_selected.png&#x27;</span>,</span><br><span class="line">          width: <span class="number">18</span>,</span><br><span class="line">          height: <span class="number">18</span>,</span><br><span class="line">        ),</span><br><span class="line">        label: <span class="string">&#x27;对话翻译&#x27;</span>),</span><br><span class="line">    BottomNavigationBarItem(</span><br><span class="line">        icon: Image.asset(</span><br><span class="line">          <span class="string">&#x27;images/record_unselected.png&#x27;</span>,</span><br><span class="line">          width: <span class="number">18</span>,</span><br><span class="line">          height: <span class="number">18</span>,</span><br><span class="line">        ),</span><br><span class="line">        activeIcon: Image.asset(</span><br><span class="line">          <span class="string">&#x27;images/record_selected.png&#x27;</span>,</span><br><span class="line">          width: <span class="number">18</span>,</span><br><span class="line">          height: <span class="number">18</span>,</span><br><span class="line">        ),</span><br><span class="line">        label: <span class="string">&#x27;录音翻译&#x27;</span>),</span><br><span class="line">    BottomNavigationBarItem(</span><br><span class="line">        icon: Image.asset(</span><br><span class="line">          <span class="string">&#x27;images/mine_unselected.png&#x27;</span>,</span><br><span class="line">          width: <span class="number">18</span>,</span><br><span class="line">          height: <span class="number">18</span>,</span><br><span class="line">        ),</span><br><span class="line">        activeIcon: Image.asset(</span><br><span class="line">          <span class="string">&#x27;images/mine_selected.png&#x27;</span>,</span><br><span class="line">          width: <span class="number">18</span>,</span><br><span class="line">          height: <span class="number">18</span>,</span><br><span class="line">        ),</span><br><span class="line">        label: <span class="string">&#x27;我的&#x27;</span>)</span><br><span class="line">  ];</span><br><span class="line">  <span class="comment">// 模块容器数组</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span> tabPages = [HomePage(), DialoguePage(), RecordPage(), MinePage()];</span><br><span class="line">  <span class="comment">// 当前选择index</span></span><br><span class="line">  <span class="built_in">int</span> currentIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 当前页</span></span><br><span class="line">  <span class="keyword">var</span> currentPage;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    currentPage = tabPages[currentIndex];</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">        currentIndex: currentIndex,</span><br><span class="line">        backgroundColor: Colors.lightGreen,</span><br><span class="line">        type: BottomNavigationBarType.fixed,</span><br><span class="line">        <span class="comment">// elevation: 0,</span></span><br><span class="line">        items: bottomTabs,</span><br><span class="line">        onTap: (idx) &#123;</span><br><span class="line">          <span class="comment">// 必须实现setState方法</span></span><br><span class="line">          setState(() &#123;</span><br><span class="line">            currentIndex = idx;</span><br><span class="line">            currentPage = tabPages[idx];</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        backgroundColor: Colors.lightGreen,</span><br><span class="line">        title: Text(</span><br><span class="line">          bottomTabs[currentIndex].label,</span><br><span class="line">          style: TextStyle(color: Colors.orange),</span><br><span class="line">        ),</span><br><span class="line">        elevation: <span class="number">.5</span>,</span><br><span class="line">      ),</span><br><span class="line">      body: currentPage,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="实现main-dart"><a href="#实现main-dart" class="headerlink" title="实现main.dart"></a>实现main.dart</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="comment">// 1.导入index_page.dart</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index_page.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 调用runApp</span></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(<span class="keyword">new</span> MyApp());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 实现静态组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MaterialApp(</span><br><span class="line">      debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">      <span class="comment">// 4. 调用IndexPage()方法，填充组件</span></span><br><span class="line">      home: IndexPage(),</span><br><span class="line">      theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">        primaryColor: Colors.orange,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="特殊效果"><a href="#特殊效果" class="headerlink" title="特殊效果"></a>特殊效果</h1><ol>
<li><strong>凸出效果</strong></li>
</ol>
<p>在我们平时开发过程中不一定都是这种规则的底部导航，有时需要我们做出一些特殊处理，比如中间的item单元凸出显示。</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm17uins7yj30km06eaao.jpg" alt="底部导航Item单元凸出显示"></p>
<p>在这里我们可以通过<code>Scaffold</code>中的<code>floatingActionButton</code>属性来实现这个效果</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Scaffold(</span><br><span class="line">    bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">      currentIndex: currentIndex,</span><br><span class="line">      backgroundColor: Colors.white,</span><br><span class="line">      type: BottomNavigationBarType.fixed,</span><br><span class="line">      <span class="comment">// elevation: 0,</span></span><br><span class="line">      items: bottomTabs,</span><br><span class="line">      onTap: (idx) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          currentIndex = idx;</span><br><span class="line">          currentPage = tabPages[idx];</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    ),</span><br><span class="line">    floatingActionButton: FloatingActionButton(</span><br><span class="line">      child: Icon(</span><br><span class="line">        Icons.add,</span><br><span class="line">        size: <span class="number">30</span>,</span><br><span class="line">      ),</span><br><span class="line">      onPressed: () &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          currentIndex = <span class="number">2</span>;</span><br><span class="line">          currentPage = tabPages[<span class="number">2</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      backgroundColor: Colors.orange,</span><br><span class="line">      foregroundColor: Colors.black,</span><br><span class="line">      elevation: <span class="number">5</span>,</span><br><span class="line">    ),</span><br><span class="line">    floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,</span><br><span class="line">    appBar: AppBar(</span><br><span class="line">      backgroundColor: Colors.lightGreen,</span><br><span class="line">      title: Text(</span><br><span class="line">        bottomTabs[currentIndex].label,</span><br><span class="line">        style: TextStyle(color: Colors.orange),</span><br><span class="line">      ),</span><br><span class="line">      elevation: <span class="number">0.5</span>,</span><br><span class="line">    ),</span><br><span class="line">    body: currentPage,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>外弧效果</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gm1esov26sj30kg06iwez.jpg" alt="底部导航外弧显示"></p>
</li>
</ol>
<p>在凸出效果代码基础上做修改，打开<code>index_page.dart</code>，修改为以下代码，</p>
<p><strong>注释掉凸出效果的State代码</strong></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_OuterArcState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">IndexPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="comment">///<span class="markdown">初始化，这个函数在生命周期中只调用一次</span></span></span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">//构建页面</span></span><br><span class="line">    <span class="keyword">return</span> buildBottomTabScaffold();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//当前显示页面的</span></span><br><span class="line">  <span class="built_in">int</span> currentIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//点击导航项是要显示的页面</span></span><br><span class="line">  <span class="keyword">final</span> pages = [HomePage(), DialoguePage(), RecordPage(), MinePage()];</span><br><span class="line"></span><br><span class="line">  Widget buildBottomTabScaffold() &#123;</span><br><span class="line">    <span class="keyword">return</span> SizedBox(</span><br><span class="line">        height: <span class="number">100</span>,</span><br><span class="line">        child: Scaffold(</span><br><span class="line">          <span class="comment">//对应的页面</span></span><br><span class="line">          body: pages[currentIndex],</span><br><span class="line">          <span class="comment">//appBar: AppBar(title: const Text(&#x27;Bottom App Bar&#x27;)),</span></span><br><span class="line">          <span class="comment">//悬浮按钮的位置</span></span><br><span class="line">          floatingActionButtonLocation:</span><br><span class="line">              FloatingActionButtonLocation.centerDocked,</span><br><span class="line">          <span class="comment">//悬浮按钮</span></span><br><span class="line">          floatingActionButton: FloatingActionButton(</span><br><span class="line">            child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">            onPressed: () &#123;&#125;,</span><br><span class="line">          ),</span><br><span class="line">          <span class="comment">//其他菜单栏</span></span><br><span class="line">          bottomNavigationBar: BottomAppBar(</span><br><span class="line">            shape: CircularNotchedRectangle(),</span><br><span class="line">            notchMargin: <span class="number">6.0</span>,</span><br><span class="line">            color: Colors.white,</span><br><span class="line">            child: Row(</span><br><span class="line">              mainAxisSize: MainAxisSize.max,</span><br><span class="line">              mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                buildBotomItem(currentIndex, <span class="number">0</span>, Icons.home, <span class="string">&quot;首页&quot;</span>),</span><br><span class="line">                buildBotomItem(currentIndex, <span class="number">1</span>, Icons.chat, <span class="string">&quot;对话&quot;</span>),</span><br><span class="line">                buildBotomItem(currentIndex, <span class="number">-1</span>, <span class="keyword">null</span>, <span class="string">&quot;商城&quot;</span>),</span><br><span class="line">                buildBotomItem(currentIndex, <span class="number">2</span>, Icons.mic, <span class="string">&quot;录音&quot;</span>),</span><br><span class="line">                buildBotomItem(currentIndex, <span class="number">3</span>, Icons.person, <span class="string">&quot;我的&quot;</span>),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  buildBotomItem(<span class="built_in">int</span> selectIndex, <span class="built_in">int</span> index, IconData iconData, <span class="built_in">String</span> title) &#123;</span><br><span class="line">    <span class="comment">//未选中状态的样式</span></span><br><span class="line">    TextStyle textStyle = TextStyle(fontSize: <span class="number">12.0</span>, color: Colors.grey);</span><br><span class="line">    MaterialColor iconColor = Colors.grey;</span><br><span class="line">    <span class="built_in">double</span> iconSize = <span class="number">20</span>;</span><br><span class="line">    EdgeInsetsGeometry padding = EdgeInsets.only(top: <span class="number">8.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (selectIndex == index) &#123;</span><br><span class="line">      <span class="comment">//选中状态的文字样式</span></span><br><span class="line">      textStyle = TextStyle(fontSize: <span class="number">13.0</span>, color: Colors.blue);</span><br><span class="line">      <span class="comment">//选中状态的按钮样式</span></span><br><span class="line">      iconColor = Colors.blue;</span><br><span class="line">      iconSize = <span class="number">25</span>;</span><br><span class="line">      padding = EdgeInsets.only(top: <span class="number">6.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Widget padItem = SizedBox();</span><br><span class="line">    <span class="keyword">if</span> (iconData != <span class="keyword">null</span>) &#123;</span><br><span class="line">      padItem = Padding(</span><br><span class="line">        padding: padding,</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.white,</span><br><span class="line">          child: Center(</span><br><span class="line">            child: Column(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                Icon(</span><br><span class="line">                  iconData,</span><br><span class="line">                  color: iconColor,</span><br><span class="line">                  size: iconSize,</span><br><span class="line">                ),</span><br><span class="line">                Text(</span><br><span class="line">                  title,</span><br><span class="line">                  style: textStyle,</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    Widget item = Expanded(</span><br><span class="line">      flex: <span class="number">1</span>,</span><br><span class="line">      child: <span class="keyword">new</span> GestureDetector(</span><br><span class="line">        onTap: () &#123;</span><br><span class="line">          <span class="keyword">if</span> (index != currentIndex) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              currentIndex = index;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        child: SizedBox(</span><br><span class="line">          height: <span class="number">52</span>,</span><br><span class="line">          child: padItem,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>#Demo</p>
<p><a href="https://github.com/ForgetSou/FSFlutterDemo.git">GitHub ~ FSFlutterDemo</a></p>
<hr>
<blockquote>
<p><strong>个人博客:</strong> 🏡 <a href="https://forgetsou.github.io/">ForgetSou</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>Flutters</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2020/10/20/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="一-开始工作区"><a href="#一-开始工作区" class="headerlink" title="一. 开始工作区"></a>一. 开始工作区</h2><h3 id="1-clone-克隆远程仓库到本地"><a href="#1-clone-克隆远程仓库到本地" class="headerlink" title="1. clone 克隆远程仓库到本地"></a>1. clone 克隆远程仓库到本地</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/ForgetSou/myBlog.git</span></span><br><span class="line"></span><br><span class="line">git clone -b branch_1<span class="number">.0</span><span class="number">.0</span> https:<span class="comment">//github.com/ForgetSou/myBlog.git</span></span><br></pre></td></tr></table></figure>

<h3 id="2-init-初始化仓库"><a href="#2-init-初始化仓库" class="headerlink" title="2. init 初始化仓库"></a>2. init 初始化仓库</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<h2 id="二-处理变化"><a href="#二-处理变化" class="headerlink" title="二.处理变化"></a>二.处理变化</h2><h3 id="1-git-add"><a href="#1-git-add" class="headerlink" title="1. git add"></a>1. git add</h3><p>添加文件到暂存区</p>
<h4 id="1-1-添加一个或多个文件"><a href="#1-1-添加一个或多个文件" class="headerlink" title="1.1 添加一个或多个文件"></a>1.1 添加一个或多个文件</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git add [file1] [file2] ...</span><br></pre></td></tr></table></figure>

<h4 id="1-2-添加指定目录（包括子目录）到暂存区"><a href="#1-2-添加指定目录（包括子目录）到暂存区" class="headerlink" title="1.2 添加指定目录（包括子目录）到暂存区"></a>1.2 添加指定目录（包括子目录）到暂存区</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git add [dir]</span><br></pre></td></tr></table></figure>

<h4 id="1-3-添加当前所在目录所有文件到暂存区"><a href="#1-3-添加当前所在目录所有文件到暂存区" class="headerlink" title="1.3 添加当前所在目录所有文件到暂存区"></a>1.3 添加当前所在目录所有文件到暂存区</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<h3 id="2-git-status"><a href="#2-git-status" class="headerlink" title="2. git status"></a>2. git status</h3><p>查看仓库状态，显示有变更的文件</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git status -s <span class="comment">// 获取间断的输出结果</span></span><br><span class="line">git status On branch master <span class="comment">// 查看branch状态</span></span><br></pre></td></tr></table></figure>

<h3 id="3-git-diff"><a href="#3-git-diff" class="headerlink" title="3. git diff"></a>3. git diff</h3><p>git diff 比较文件的不同，即暂存区和工作区的差异</p>
<p>git diff 命令显示已写入暂存区和已经被修改但尚未写入暂存区文件对区别。</p>
<p>git diff 有两个主要的应用场景。</p>
<ul>
<li>尚未缓存的改动：<strong>git diff</strong></li>
<li>查看已缓存的改动： <strong>git diff –cached</strong></li>
<li>查看已缓存的与未缓存的所有改动：<strong>git diff HEAD</strong></li>
<li>显示摘要而非整个 diff：<strong>git diff –stat</strong></li>
</ul>
<p>显示暂存区和工作区的差异:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git diff [file]</span><br></pre></td></tr></table></figure>

<p>显示暂存区和上一次提交(commit)的差异:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git diff --cached [file]</span><br><span class="line">或</span><br><span class="line">$ git diff --staged [file]</span><br></pre></td></tr></table></figure>

<p>显示两次提交之间的差异:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure>

<h3 id="4-commit"><a href="#4-commit" class="headerlink" title="4. commit"></a>4. commit</h3><p>提交暂存区到本地仓库中:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git commit -m [message]</span><br></pre></td></tr></table></figure>

<p>[message] 可以是一些备注信息。</p>
<p>提交暂存区的指定文件到仓库区：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br></pre></td></tr></table></figure>

<p><strong>-a</strong> 参数设置修改文件后不需要执行 git add 命令，直接来提交</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git commit -a</span><br></pre></td></tr></table></figure>

<h4 id="设置提交代码时的用户信息"><a href="#设置提交代码时的用户信息" class="headerlink" title="设置提交代码时的用户信息"></a>设置提交代码时的用户信息</h4><p>开始前我们需要先设置提交的用户信息，包括用户名和邮箱：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&#x27;runoob&#x27;</span></span><br><span class="line">$ git config --global user.email test@runoob.com</span><br></pre></td></tr></table></figure>

<p>如果去掉 –global 参数只对当前仓库有效。</p>
<h4 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h4><p>接下来我们就可以对 hello.php 的所有改动从暂存区内容添加到本地仓库中。</p>
<p>以下实例，我们使用 -m 选项以在命令行中提供提交注释。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git add hello.php</span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br><span class="line">$ git commit -m <span class="string">&#x27;第一次版本提交&#x27;</span></span><br><span class="line">[master (root-commit) d32cf1f] 第一次版本提交</span><br><span class="line"> <span class="number">2</span> files changed, <span class="number">4</span> insertions(+)</span><br><span class="line"> create mode <span class="number">100644</span> README</span><br><span class="line"> create mode <span class="number">100644</span> hello.php</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>现在我们已经记录了快照。如果我们再执行 git status:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"># On branch master</span><br><span class="line">nothing to commit (working directory clean)</span><br></pre></td></tr></table></figure>

<p>以上输出说明我们在最近一次提交之后，没有做任何改动，是一个 “working directory clean”，翻译过来就是干净的工作目录。</p>
<p>如果你没有设置 -m 选项，Git 会尝试为你打开一个编辑器以填写提交信息。 如果 Git 在你对它的配置中找不到相关信息，默认会打开 vim。屏幕会像这样：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"># Please enter the commit message <span class="keyword">for</span> your changes. Lines starting</span><br><span class="line"><span class="meta"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"># On branch master</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#   (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">#</span><br><span class="line"><span class="meta"># modified:   hello.php</span></span><br><span class="line">#</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line"><span class="string">&quot;.git/COMMIT_EDITMSG&quot;</span> <span class="number">9</span>L, <span class="number">257</span>C</span><br></pre></td></tr></table></figure>

<p>如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git commit -a</span><br></pre></td></tr></table></figure>

<p>我们先修改 hello.php 文件为以下内容：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo <span class="string">&#x27;菜鸟教程：www.runoob.com&#x27;</span>;</span><br><span class="line">echo <span class="string">&#x27;菜鸟教程：www.runoob.com&#x27;</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>再执行以下命令：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git commit -am <span class="string">&#x27;修改 hello.php 文件&#x27;</span></span><br><span class="line">[master <span class="number">71</span>ee2cb] 修改 hello.php 文件</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br></pre></td></tr></table></figure>

<h3 id="5-git-reset"><a href="#5-git-reset" class="headerlink" title="5. git reset"></a>5. git reset</h3><p>git reset 命令用于回退版本，可以指定退回某一次提交的版本。</p>
<p>git reset 命令语法格式如下：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git reset [--soft | --mixed | --hard] [HEAD]</span><br></pre></td></tr></table></figure>

<p><strong>–mixed</strong> 为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git reset  [HEAD] </span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD^            # 回退所有内容到上一个版本  </span><br><span class="line">$ git reset HEAD^ hello.php  # 回退 hello.php 文件的版本到上一个版本  </span><br><span class="line">$ git  reset  <span class="number">052</span>e           # 回退到指定版本</span><br></pre></td></tr></table></figure>

<p><strong>–soft</strong> 参数用于回退到某个版本：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<p>$ git reset –soft HEAD~3 # 回退上上上一个版本</p>
<p><strong>–hard</strong> 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git reset –hard HEAD~<span class="number">3</span>  # 回退上上上一个版本  </span><br><span class="line">$ git reset –hard bae128  # 回退到某个版本回退点之前的所有信息。 </span><br><span class="line">$ git reset --hard origin/master    # 将本地的状态回退到和远程的一样 </span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>谨慎使用 –hard 参数，它会删除回退点之前的所有信息。</p>
<p><strong>HEAD 说明：</strong></p>
<ul>
<li><p>HEAD 表示当前版本</p>
</li>
<li><p>HEAD^ 上一个版本</p>
</li>
<li><p>HEAD^^ 上上一个版本</p>
</li>
<li><p>HEAD^^^ 上上上一个版本</p>
</li>
</ul>
<ul>
<li>以此类推…</li>
</ul>
<p>可以使用 ～数字表示</p>
<ul>
<li><p>HEAD~0 表示当前版本</p>
</li>
<li><p>HEAD~1 上一个版本</p>
</li>
<li><p>HEAD^2 上上一个版本</p>
</li>
<li><p>HEAD^3 上上上一个版本</p>
</li>
<li><p>以此类推…</p>
</li>
</ul>
<p><strong>git reset HEAD</strong></p>
<p>git reset HEAD 命令用于取消已缓存的内容。</p>
<p>我们先改动文件 README 文件，内容如下：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">Git 测试</span><br></pre></td></tr></table></figure>

<p>hello.php 文件修改为：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo <span class="string">&#x27;百度：www.baidu.com&#x27;</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>现在两个文件修改后，都提交到了缓存区，我们现在要取消其中一个的缓存，操作如下：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">    M README</span><br><span class="line">    M hello.php</span><br><span class="line">$ git add .</span><br><span class="line">$ git status -s</span><br><span class="line">M  README</span><br><span class="line">M  hello.php</span><br><span class="line">$ git reset HEAD hello.php </span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M    hello.php</span><br><span class="line">$ git status -s</span><br><span class="line">M  README</span><br><span class="line">    M hello.php</span><br></pre></td></tr></table></figure>

<p>现在你执行 git commit，只会将 README 文件的改动提交，而 hello.php 是没有的。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">&#x27;修改&#x27;</span></span><br><span class="line">[master f50cfda] 修改</span><br><span class="line">    <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br><span class="line">$ git status -s</span><br><span class="line">    M hello.php</span><br></pre></td></tr></table></figure>

<p>可以看到 hello.php 文件的修改并未提交。</p>
<p>这时我们可以使用以下命令将 hello.php 的修改提交：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git commit -am <span class="string">&#x27;修改 hello.php 文件&#x27;</span></span><br><span class="line">[master <span class="number">760</span>f74d] 修改 hello.php 文件</span><br><span class="line">    <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>

<p>简而言之，执行 git reset HEAD 以取消之前 git add 添加，但不希望包含在下一提交快照中的缓存。</p>
<h3 id="6-git-rm"><a href="#6-git-rm" class="headerlink" title="6. git rm"></a>6. git rm</h3><p>git rm 命令用于删除文件。</p>
<p>如果只是简单地从工作目录中手工删除文件，运行 <strong>git status</strong> 时就会在 <strong>Changes not staged for commit</strong> 的提示。</p>
<p>git rm 删除文件有以下几种形式：</p>
<p>1、将文件从暂存区和工作区中删除：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git rm &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>以下实例从暂存区和工作区中删除 runoob.txt 文件：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git rm runoob.txt </span><br></pre></td></tr></table></figure>

<p>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 <strong>-f</strong>。</p>
<p>强行从暂存区和工作区中删除修改后的 runoob.txt 文件：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git rm -f runoob.txt </span><br></pre></td></tr></table></figure>

<p>如果想把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 <strong>–cached</strong> 选项即可：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>以下实例从暂存区中删除 runoob.txt 文件：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git rm --cached runoob.txt</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong></p>
<p>删除 hello.php 文件：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git rm hello.php </span><br><span class="line">rm <span class="string">&#x27;hello.php&#x27;</span></span><br><span class="line">$ ls</span><br><span class="line">README</span><br></pre></td></tr></table></figure>

<p>文件从暂存区域移除，但工作区保留：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git rm --cached README </span><br><span class="line">rm <span class="string">&#x27;README&#x27;</span></span><br><span class="line">$ ls</span><br><span class="line">README</span><br></pre></td></tr></table></figure>

<p>可以递归删除，即如果后面跟的是一个目录做为参数，则会递归删除整个目录中的所有子目录和文件：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git rm –r * </span><br></pre></td></tr></table></figure>

<p>进入某个目录中，执行此语句，会删除该目录下的所有文件和子目录。</p>
<h3 id="7-git-mv"><a href="#7-git-mv" class="headerlink" title="7. git mv"></a>7. git mv</h3><p>git mv 命令用于移动或重命名一个文件、目录或软连接。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git mv [file] [newfile]</span><br></pre></td></tr></table></figure>

<p>如果新但文件名已经存在，但还是要重命名它，可以使用 <strong>-f</strong> 参数：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git mv -f [file] [newfile]</span><br></pre></td></tr></table></figure>

<p>我们可以添加一个 README 文件（如果没有但话）：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git add README </span><br></pre></td></tr></table></figure>

<p>然后对其重命名:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">$ git mv README  README.md</span><br><span class="line">$ ls</span><br><span class="line">README.md</span><br></pre></td></tr></table></figure>

<h2 id="三-提交日志"><a href="#三-提交日志" class="headerlink" title="三. 提交日志"></a>三. 提交日志</h2><p>Git 提交历史一般常用两个命令：</p>
<ul>
<li><strong>git log</strong> - 查看历史提交记录。</li>
<li><strong>git blame <file></strong> - 以列表形式查看指定文件的历史修改记录。</li>
</ul>
<h3 id="1-git-log"><a href="#1-git-log" class="headerlink" title="1. git log"></a>1. git log</h3><p>在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 <strong>git log</strong> 命令查看。</p>
<p>我们可以用 –oneline 选项来查看历史记录的简洁的版本。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git log --oneline</span><br></pre></td></tr></table></figure>

<p>我们还可以用 –graph 选项，查看历史中什么时候出现了分支、合并。</p>
<p>你也可以用 <strong>–reverse</strong> 参数来逆向显示所有日志。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git log --reverse --oneline</span><br></pre></td></tr></table></figure>

<p>如果只想查找指定用户的提交日志可以使用命令：git log –author </p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git log --author=Linus --oneline</span><br></pre></td></tr></table></figure>

<p>如果你要指定日期，可以执行几个选项：–since 和 –before，但是你也可以用 –until 和 –after。–no-merges 选项以隐藏合并提交。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git log --oneline --before=&#123;<span class="number">3.</span>weeks.ago&#125; --after=&#123;<span class="number">2010</span><span class="number">-04</span><span class="number">-18</span>&#125; --no-merges</span><br></pre></td></tr></table></figure>

<h3 id="2-git-blame"><a href="#2-git-blame" class="headerlink" title="2. git blame"></a>2. git blame</h3><p>如果要查看指定文件的修改记录可以使用 git blame 命令，格式如下：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git blame &lt;file&gt;</span><br></pre></td></tr></table></figure>

<p>git blame 命令是以列表形式显示修改记录</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">git blame README</span><br></pre></td></tr></table></figure>



<h2 id="四-远程操作"><a href="#四-远程操作" class="headerlink" title="四. 远程操作"></a>四. 远程操作</h2><h3 id="1-git-remote"><a href="#1-git-remote" class="headerlink" title="1. git remote"></a>1. git remote</h3><h3 id="2-git-fetch"><a href="#2-git-fetch" class="headerlink" title="2. git fetch"></a>2. git fetch</h3><h3 id="3-git-pull"><a href="#3-git-pull" class="headerlink" title="3. git pull"></a>3. git pull</h3><h3 id="4-git-push"><a href="#4-git-push" class="headerlink" title="4. git push"></a>4. git push</h3>]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Other</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 本地推送 Local Push</title>
    <url>/2020/11/05/iOS-%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81-Local-Push/</url>
    <content><![CDATA[<h1 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h1><blockquote>
<p>推送是我们平时开发中常用的一种机制，无论iOS还是Android系统都有推送，推送可以让不在前台运行的app,告知用户app内部发生的事情，可以提高app的打开次数，增加日活。</p>
</blockquote>
<p>iOS中的推送分为</p>
<p>（1）本地推送通知(Local Notification)</p>
<p>（2）远程推送通知(Remote Notification)</p>
<blockquote>
<p>我们在平时的开发中，使用远程推送可能比较多，远程推送依赖于服务器，需要联网才能收到，本地推送无需联网，添加好定时器即可在指定时间发送推送，平时使用场景多是闹钟，提醒等。</p>
</blockquote>
<h1 id="2-本地推送（Local-Push）"><a href="#2-本地推送（Local-Push）" class="headerlink" title="2. 本地推送（Local Push）"></a>2. 本地推送（Local Push）</h1><ul>
<li><p>无需联网即可推送</p>
</li>
<li><p>不需要创建推送证书</p>
</li>
</ul>
<h1 id="3-push交互（示例基于iOS8-0及以上）"><a href="#3-push交互（示例基于iOS8-0及以上）" class="headerlink" title="3. push交互（示例基于iOS8.0及以上）"></a>3. push交互（示例基于iOS8.0及以上）</h1><h2 id="（1）注册通知，获取用户授权"><a href="#（1）注册通知，获取用户授权" class="headerlink" title="（1）注册通知，获取用户授权"></a>（1）注册通知，获取用户授权</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在AppDelegate.m中</span></span><br><span class="line"><span class="comment">// iOS10.0 需要导入</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;UserNotifications/UserNotifications.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    [<span class="keyword">self</span> registerAPN];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注册通知</span></span><br><span class="line">- (<span class="keyword">void</span>)registerAPN &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">10.0</span>, *)) &#123; <span class="comment">// iOS10 以上</span></span><br><span class="line">        UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">        [center requestAuthorizationWithOptions:(UNAuthorizationOptionAlert + UNAuthorizationOptionSound) completionHandler:^(<span class="built_in">BOOL</span> granted, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">// iOS8.0 以上</span></span><br><span class="line">        <span class="built_in">UIUserNotificationSettings</span> *setting = [<span class="built_in">UIUserNotificationSettings</span> settingsForTypes:<span class="built_in">UIUserNotificationTypeBadge</span> | <span class="built_in">UIUserNotificationTypeSound</span> | <span class="built_in">UIUserNotificationTypeAlert</span> categories:<span class="literal">nil</span>];</span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] registerUserNotificationSettings:setting];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（2）添加通知"><a href="#（2）添加通知" class="headerlink" title="（2）添加通知"></a>（2）添加通知</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)addLocalNotice &#123;</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">10.0</span>, *)) &#123;</span><br><span class="line">        UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">        UNMutableNotificationContent *content = [[UNMutableNotificationContent alloc] init];</span><br><span class="line">        <span class="comment">// 标题</span></span><br><span class="line">        content.title = <span class="string">@&quot;测试标题&quot;</span>;</span><br><span class="line">        content.subtitle = <span class="string">@&quot;测试通知副标题&quot;</span>;</span><br><span class="line">        <span class="comment">// 内容</span></span><br><span class="line">        content.body = <span class="string">@&quot;测试通知的具体内容&quot;</span>;</span><br><span class="line">        <span class="comment">// 声音</span></span><br><span class="line">       <span class="comment">// 默认声音</span></span><br><span class="line">     <span class="comment">//    content.sound = [UNNotificationSound defaultSound];</span></span><br><span class="line">     <span class="comment">// 添加自定义声音</span></span><br><span class="line">       content.sound = [UNNotificationSound soundNamed:<span class="string">@&quot;Alert_ActivityGoalAttained_Salient_Haptic.caf&quot;</span>];</span><br><span class="line">        <span class="comment">// 角标 （我这里测试的角标无效，暂时没找到原因）</span></span><br><span class="line">        content.badge = @<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 多少秒后发送,可以将固定的日期转化为时间</span></span><br><span class="line">        <span class="built_in">NSTimeInterval</span> time = [[<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">10</span>] timeIntervalSinceNow];</span><br><span class="line">	<span class="comment">//        NSTimeInterval time = 10;</span></span><br><span class="line">        <span class="comment">// repeats，是否重复，如果重复的话时间必须大于60s，要不会报错</span></span><br><span class="line">        UNTimeIntervalNotificationTrigger *trigger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:time repeats:<span class="literal">NO</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //如果想重复可以使用这个,按日期</span></span><br><span class="line"><span class="comment">        // 周一早上 8：00 上班</span></span><br><span class="line"><span class="comment">        NSDateComponents *components = [[NSDateComponents alloc] init];</span></span><br><span class="line"><span class="comment">        // 注意，weekday默认是从周日开始</span></span><br><span class="line"><span class="comment">        components.weekday = 2;</span></span><br><span class="line"><span class="comment">        components.hour = 8;</span></span><br><span class="line"><span class="comment">        UNCalendarNotificationTrigger *calendarTrigger = [UNCalendarNotificationTrigger triggerWithDateMatchingComponents:components repeats:YES];</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// 添加通知的标识符，可以用于移除，更新等操作</span></span><br><span class="line">        <span class="built_in">NSString</span> *identifier = <span class="string">@&quot;noticeId&quot;</span>;</span><br><span class="line">        UNNotificationRequest *request = [UNNotificationRequest requestWithIdentifier:identifier content:content trigger:trigger];</span><br><span class="line">        </span><br><span class="line">        [center addNotificationRequest:request withCompletionHandler:^(<span class="built_in">NSError</span> *_Nullable error) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;成功添加推送&quot;</span>);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">UILocalNotification</span> *notif = [[<span class="built_in">UILocalNotification</span> alloc] init];</span><br><span class="line">        <span class="comment">// 发出推送的日期</span></span><br><span class="line">        notif.fireDate = [<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">10</span>];</span><br><span class="line">        <span class="comment">// 推送的内容</span></span><br><span class="line">        notif.alertBody = <span class="string">@&quot;你已经10秒没出现了&quot;</span>;</span><br><span class="line">        <span class="comment">// 可以添加特定信息</span></span><br><span class="line">        notif.userInfo = @&#123;<span class="string">@&quot;noticeId&quot;</span>:<span class="string">@&quot;00001&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">// 角标</span></span><br><span class="line">        notif.applicationIconBadgeNumber = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 提示音</span></span><br><span class="line">        notif.soundName = <span class="built_in">UILocalNotificationDefaultSoundName</span>;</span><br><span class="line">        <span class="comment">// 每周循环提醒</span></span><br><span class="line">        notif.repeatInterval = <span class="built_in">NSCalendarUnitWeekOfYear</span>;</span><br><span class="line">        </span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] scheduleLocalNotification:notif];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（3）移除通知"><a href="#（3）移除通知" class="headerlink" title="（3）移除通知"></a>（3）移除通知</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 移除某一个指定的通知</span></span><br><span class="line">- (<span class="keyword">void</span>)removeOneNotificationWithID:(<span class="built_in">NSString</span> *)noticeId &#123;</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">10.0</span>, *)) &#123;</span><br><span class="line">        UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">        [center getPendingNotificationRequestsWithCompletionHandler:^(<span class="built_in">NSArray</span>&lt;UNNotificationRequest *&gt; * _Nonnull requests) &#123;</span><br><span class="line">            <span class="keyword">for</span> (UNNotificationRequest *req <span class="keyword">in</span> requests)&#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;存在的ID:%@\n&quot;</span>,req.identifier);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;移除currentID:%@&quot;</span>,noticeId);</span><br><span class="line">        &#125;];</span><br><span class="line">        </span><br><span class="line">        [center removePendingNotificationRequestsWithIdentifiers:@[noticeId]];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSArray</span> *array=[[<span class="built_in">UIApplication</span> sharedApplication] scheduledLocalNotifications];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">UILocalNotification</span> *localNotification <span class="keyword">in</span> array)&#123;</span><br><span class="line">            <span class="built_in">NSDictionary</span> *userInfo = localNotification.userInfo;</span><br><span class="line">            <span class="built_in">NSString</span> *obj = [userInfo objectForKey:<span class="string">@&quot;noticeId&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> ([obj isEqualToString:noticeId]) &#123;</span><br><span class="line">                [[<span class="built_in">UIApplication</span> sharedApplication] cancelLocalNotification:localNotification];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除所有通知</span></span><br><span class="line">- (<span class="keyword">void</span>)removeAllNotification &#123;</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">10.0</span>, *)) &#123;</span><br><span class="line">        UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">        [center removeAllPendingNotificationRequests];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] cancelAllLocalNotifications];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（4）检查授权情况"><a href="#（4）检查授权情况" class="headerlink" title="（4）检查授权情况"></a>（4）检查授权情况</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)checkUserNotificationEnable &#123; <span class="comment">// 判断用户是否允许接收通知</span></span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">10.0</span>, *)) &#123;</span><br><span class="line">        __block <span class="built_in">BOOL</span> isOn = <span class="literal">NO</span>;</span><br><span class="line">        UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">        [center getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) &#123;</span><br><span class="line">            <span class="keyword">if</span> (settings.notificationCenterSetting == UNNotificationSettingEnabled) &#123;</span><br><span class="line">                isOn = <span class="literal">YES</span>;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;打开了通知&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                isOn = <span class="literal">NO</span>;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@&quot;关闭了通知&quot;</span>);</span><br><span class="line">               [<span class="keyword">self</span> showAlertView];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ([[<span class="built_in">UIApplication</span> sharedApplication] currentUserNotificationSettings].types == <span class="built_in">UIUserNotificationTypeNone</span>)&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;关闭了通知&quot;</span>);</span><br><span class="line">            [<span class="keyword">self</span> showAlertView];</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;打开了通知&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)showAlertView &#123;</span><br><span class="line">    <span class="built_in">UIAlertController</span> *alert = [<span class="built_in">UIAlertController</span> alertControllerWithTitle:<span class="string">@&quot;通知&quot;</span> message:<span class="string">@&quot;未获得通知权限，请前去设置&quot;</span> preferredStyle:<span class="built_in">UIAlertControllerStyleAlert</span>];</span><br><span class="line">    [alert addAction:[<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@&quot;取消&quot;</span> style:<span class="built_in">UIAlertActionStyleCancel</span> handler:<span class="literal">nil</span>]];</span><br><span class="line">    [alert addAction:[<span class="built_in">UIAlertAction</span> actionWithTitle:<span class="string">@&quot;设置&quot;</span> style:<span class="built_in">UIAlertActionStyleDefault</span> handler:^(<span class="built_in">UIAlertAction</span> * _Nonnull action) &#123;</span><br><span class="line">         [<span class="keyword">self</span> goToAppSystemSetting];</span><br><span class="line">    &#125;]];</span><br><span class="line">    [<span class="keyword">self</span> presentViewController:alert animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果用户关闭了接收通知功能，该方法可以跳转到APP设置页面进行修改</span></span><br><span class="line">- (<span class="keyword">void</span>)goToAppSystemSetting &#123;</span><br><span class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">UIApplication</span> *application = [<span class="built_in">UIApplication</span> sharedApplication];</span><br><span class="line">        <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="built_in">UIApplicationOpenSettingsURLString</span>];</span><br><span class="line">        <span class="keyword">if</span> ([application canOpenURL:url]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (@available(iOS <span class="number">10.0</span>, *)) &#123;</span><br><span class="line">                <span class="keyword">if</span> ([application respondsToSelector:<span class="keyword">@selector</span>(openURL:options:completionHandler:)]) &#123;</span><br><span class="line">                    [application openURL:url options:@&#123;&#125; completionHandler:<span class="literal">nil</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                [application openURL:url];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-参考文章："><a href="#4-参考文章：" class="headerlink" title="4. 参考文章："></a>4. 参考文章：</h1><blockquote>
<p><a href="https://www.jianshu.com/p/9b1fa25a0712">https://www.jianshu.com/p/9b1fa25a0712</a><br><a href="https://www.jianshu.com/p/4a23bd5e1b00">https://www.jianshu.com/p/4a23bd5e1b00</a></p>
</blockquote>
]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS开发-MKMapView苹果原生地图上绘制箭头线-OC</title>
    <url>/2021/10/28/iOS%E5%BC%80%E5%8F%91-MKMapView%E8%8B%B9%E6%9E%9C%E5%8E%9F%E7%94%9F%E5%9C%B0%E5%9B%BE%E4%B8%8A%E7%BB%98%E5%88%B6%E7%AE%AD%E5%A4%B4%E7%BA%BF-OC/</url>
    <content><![CDATA[<h2 id="1-效果图"><a href="#1-效果图" class="headerlink" title="1. 效果图"></a>1. 效果图</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gvusasse2wj30vg0l6wgi.jpg" alt="image-20211028094858937"></p>
<h2 id="2-实现思路"><a href="#2-实现思路" class="headerlink" title="2. 实现思路"></a>2. 实现思路</h2><h3 id="2-1-最初想法"><a href="#2-1-最初想法" class="headerlink" title="2.1. 最初想法"></a>2.1. 最初想法</h3><p>​    起初思路是在<code>MKMapView</code>上点的下方添加一个箭头View或imageView，通过两点计算角度并控制箭头的旋转实现和线重合，一顿操作下来发现角度计算的并不是特别的准确，而且在MKMapview旋转时，箭头也跟着旋转，无法和线重合，最终也是放弃了这个思路。</p>
<h3 id="2-2-新思路"><a href="#2-2-新思路" class="headerlink" title="2.2. 新思路"></a>2.2. 新思路</h3><p>​    通过定义一个<code>MKPolylineRenderer</code>的子类 <code>PVMTPolylineRenderer</code>，重写父类的 <code>\- (void)drawMapRect:(MKMapRect)mapRect zoomScale:(MKZoomScale)zoomScale inContext:(CGContextRef)context</code> 方法进行箭头绘制。</p>
<h2 id="3-具体代码实现"><a href="#3-具体代码实现" class="headerlink" title="3. 具体代码实现"></a>3. 具体代码实现</h2><p>3.1 在iOS系统中，使用MKMapView进行地图定位并绘制；</p>
<p>3.2 在地图上根据多个点的经纬度绘制标注(点)，并根据这些标注控制地图画布大小和缩放比例；</p>
<p>3.3 使用MKPolyline创建线MyMKPolyline；</p>
<p>3.4 使用一个继承自MKPolylineRenderer的对象MyMKPolylineRenderer对线条进行样式更新。</p>
<p>其中，3.3步骤的具体实现方式如下：</p>
<ol>
<li><p>3.3.1 创建一个对象MyMKPolylineRenderer继承自MKPolylineRenderer；</p>
</li>
<li><p>3.3.2 在MyMKPolylineRenderer.h中添加地图缩放因子;</p>
</li>
<li><p>3.3.3 重写MKPolylineRenderer的drawMapRect方法；</p>
</li>
<li><p>3.3.4 在drawMapRect方法中计算出所需画箭头线的7个点P1-P7的坐标；</p>
</li>
<li><p>3.3.5 在MKMapView的代理regionDidChangeAnimated和mapViewDidChangeVisibleRegion方法中计算缩放因子并将缩放因子传值给MyMKPolylineRenderer。</p>
</li>
</ol>
<p><strong>说明</strong>：缩放因子 = mapView.bounds.size.width/mapView.visibleMapRect.size.width;</p>
<p>其中3.3.3步骤的计算方式为:</p>
<ol>
<li><ol>
<li>通过pointForMapPoint获取MyMKPolyline的所有标注；</li>
</ol>
</li>
<li><ol>
<li>通过两标注坐标计算角度；</li>
<li>分别计算P1-P7点坐标，计算方式如图2</li>
</ol>
</li>
</ol>
<p><strong>辅助说明图</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwvrxrdwtbj30fz0k875i.jpg" alt="流程图.png"></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwvs08vcx3j30ku0cgdgs.jpg" alt="箭头线坐标计算方式辅助图.png"></p>
<h3 id="3-1-创建PVMTPolylineRenderer"><a href="#3-1-创建PVMTPolylineRenderer" class="headerlink" title="3.1. 创建PVMTPolylineRenderer"></a>3.1. 创建<code>PVMTPolylineRenderer</code></h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;MapKit/MapKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PVMTPolylineRenderer</span> : <span class="title">MKPolylineRenderer</span></span></span><br><span class="line">  </span><br><span class="line"><span class="comment">/// 缩放因子</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">double</span> zoomScale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;PVMTPolylineRenderer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PVMTPolylineRenderer</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)drawMapRect:(<span class="built_in">MKMapRect</span>)mapRect zoomScale:(<span class="built_in">MKZoomScale</span>)zoomScale inContext:(<span class="built_in">CGContextRef</span>)context &#123;</span><br><span class="line">    [<span class="keyword">super</span> drawMapRect:mapRect zoomScale:zoomScale inContext:context];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> lineWidth = <span class="number">1.5</span>/<span class="keyword">self</span>.zoomScale;  <span class="comment">// 箭头线宽</span></span><br><span class="line">    <span class="keyword">double</span> pointWidth = <span class="number">27</span>/<span class="keyword">self</span>.zoomScale;  <span class="comment">// 点宽</span></span><br><span class="line">    <span class="keyword">double</span> arrowWidth = <span class="number">9.5</span>/<span class="keyword">self</span>.zoomScale; <span class="comment">// 箭头宽（宽高一样）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">self</span>.polyline.pointCount; i++) &#123;</span><br><span class="line">            <span class="built_in">CGPoint</span> currentPoint = [<span class="keyword">self</span> pointForMapPoint:<span class="keyword">self</span>.polyline.points[i]];</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">CGPoint</span> lastPoint = [<span class="keyword">self</span> pointForMapPoint:<span class="keyword">self</span>.polyline.points[i - <span class="number">1</span>]];</span><br><span class="line">                <span class="keyword">double</span> angle = [<span class="keyword">self</span> getPointAngleWithLastPoint:lastPoint currentPoint:currentPoint];</span><br><span class="line">                <span class="comment">// 计算箭头7个点坐标，以箭头尖角为起点</span></span><br><span class="line">                <span class="built_in">CGPoint</span> p1 = [<span class="keyword">self</span> calcCircleCoordinateWithCenter:currentPoint withAngle:angle withRadius:pointWidth/<span class="number">2.0</span>];</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">CGPoint</span> p2 = <span class="built_in">CGPointMake</span>(p1.x + arrowWidth * cos([<span class="keyword">self</span> getRadio:<span class="number">30</span> + angle]), p1.y - arrowWidth * sin([<span class="keyword">self</span> getRadio:<span class="number">30</span> + angle]));</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">CGPoint</span> p3 = <span class="built_in">CGPointMake</span>(p2.x + (arrowWidth/<span class="number">2</span> - lineWidth/<span class="number">2</span>)*sin([<span class="keyword">self</span> getRadio:angle]), p2.y + (arrowWidth/<span class="number">2</span> - lineWidth/<span class="number">2</span>)*cos([<span class="keyword">self</span> getRadio:angle]));</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">CGPoint</span> p4 = <span class="built_in">CGPointMake</span>(lastPoint.x - lineWidth/<span class="number">2</span> * sin([<span class="keyword">self</span> getRadio:angle]), lastPoint.y - lineWidth/<span class="number">2</span> * cos([<span class="keyword">self</span> getRadio:angle]));</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">CGPoint</span> p5 = <span class="built_in">CGPointMake</span>(lastPoint.x + lineWidth/<span class="number">2</span> * sin([<span class="keyword">self</span> getRadio:angle]), lastPoint.y + lineWidth/<span class="number">2</span> * cos([<span class="keyword">self</span> getRadio:angle]));</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">CGPoint</span> p7 = <span class="built_in">CGPointMake</span>(p1.x + arrowWidth * cos([<span class="keyword">self</span> getRadio:<span class="number">30</span> - angle]), p1.y + arrowWidth * sin([<span class="keyword">self</span> getRadio:<span class="number">30</span> - angle]));</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">CGPoint</span> p6 = <span class="built_in">CGPointMake</span>(p7.x - (arrowWidth/<span class="number">2</span> - lineWidth/<span class="number">2</span>)*sin([<span class="keyword">self</span> getRadio:angle]), p7.y - (arrowWidth/<span class="number">2</span> - lineWidth/<span class="number">2</span>)*cos([<span class="keyword">self</span> getRadio:angle]));</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 开始绘制</span></span><br><span class="line">                <span class="built_in">CGContextMoveToPoint</span>(context, p1.x, p1.y);</span><br><span class="line">                <span class="built_in">CGContextAddLineToPoint</span>(context, p2.x, p2.y);</span><br><span class="line">                <span class="built_in">CGContextAddLineToPoint</span>(context, p3.x, p3.y);</span><br><span class="line">                <span class="built_in">CGContextAddLineToPoint</span>(context, p4.x, p4.y);</span><br><span class="line">                <span class="built_in">CGContextAddLineToPoint</span>(context, p5.x, p5.y);</span><br><span class="line">                <span class="built_in">CGContextAddLineToPoint</span>(context, p6.x, p6.y);</span><br><span class="line">                <span class="built_in">CGContextAddLineToPoint</span>(context, p7.x, p7.y);</span><br><span class="line">                <span class="built_in">CGContextClosePath</span>(context);</span><br><span class="line">                <span class="comment">// 填充颜色</span></span><br><span class="line">                <span class="built_in">CGContextSetRGBFillColor</span>(context, <span class="number">53</span>/<span class="number">255.0</span>, <span class="number">70</span>/<span class="number">255.0</span>, <span class="number">222</span>/<span class="number">255.0</span>, <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">CGContextFillPath</span>(context);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 计算两个点之间的角度</span></span><br><span class="line"><span class="comment">/// @param lastPoint 上个点坐标</span></span><br><span class="line"><span class="comment">/// @param currentPoint 当前点坐标</span></span><br><span class="line">- (<span class="keyword">double</span>)getPointAngleWithLastPoint:(<span class="built_in">CGPoint</span>)lastPoint currentPoint:(<span class="built_in">CGPoint</span>)currentPoint &#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> bearing = M_PI - atan2(currentPoint.y - lastPoint.y, currentPoint.x - lastPoint.x);</span><br><span class="line">    <span class="built_in">CGFloat</span> angle = bearing/M_PI * <span class="number">180</span>;</span><br><span class="line">    <span class="keyword">return</span> angle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 计算圆边沿坐标</span></span><br><span class="line"><span class="comment">/// @param center 圆中心点</span></span><br><span class="line"><span class="comment">/// @param angle 角度</span></span><br><span class="line"><span class="comment">/// @param radius 半径</span></span><br><span class="line">- (<span class="built_in">CGPoint</span>)calcCircleCoordinateWithCenter:(<span class="built_in">CGPoint</span>)center withAngle:(<span class="keyword">double</span>)angle withRadius:(<span class="keyword">double</span>)radius &#123;</span><br><span class="line">    <span class="keyword">double</span> x2 = radius*cos([<span class="keyword">self</span> getRadio:angle]);</span><br><span class="line">    <span class="keyword">double</span> y2 = radius*sin([<span class="keyword">self</span> getRadio:angle]);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CGPointMake</span>(center.x+x2, center.y-y2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 角度转换</span></span><br><span class="line"><span class="comment">/// @param angle 角度</span></span><br><span class="line">- (<span class="keyword">double</span>)getRadio:(<span class="keyword">double</span>)angle &#123;</span><br><span class="line">    <span class="keyword">return</span> angle * M_PI / <span class="number">180</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-PVMTPolylineRenderer的使用"><a href="#3-2-PVMTPolylineRenderer的使用" class="headerlink" title="3.2. PVMTPolylineRenderer的使用"></a>3.2. <code>PVMTPolylineRenderer</code>的使用</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PVMKMapView.h</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) PVMTPolylineRenderer *polylineRenderer;</span><br><span class="line"><span class="comment">// PVMKMapView.m</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - MKMapViewDelegate</span></span><br><span class="line">- (<span class="built_in">MKOverlayRenderer</span> *)mapView:(<span class="built_in">MKMapView</span> *)mapView rendererForOverlay:(<span class="keyword">id</span>&lt;<span class="built_in">MKOverlay</span>&gt;)overlay &#123;</span><br><span class="line">	<span class="keyword">if</span> ([overlay isKindOfClass:[PVMTRouteMKPloyline <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        PVMTPolylineRenderer *polylineRenderer = [[PVMTPolylineRenderer alloc] initWithOverlay:overlay];</span><br><span class="line">        <span class="keyword">self</span>.polylineRenderer = polylineRenderer;</span><br><span class="line">        <span class="keyword">return</span> polylineRenderer;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> ([overlay isKindOfClass:[<span class="built_in">MKPolyline</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">    <span class="comment">// 其他线</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ([overlay isKindOfClass:[<span class="built_in">MKPolygon</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">    <span class="comment">// 不规则图形</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)mapView:(<span class="built_in">MKMapView</span> *)mapView regionDidChangeAnimated:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">11.0</span>, *))&#123;</span><br><span class="line">        <span class="comment">// mapViewDidChangeVisibleRegion处理</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.frame.size.width &gt; <span class="number">300</span>) &#123;</span><br><span class="line">            <span class="keyword">double</span> zoomScale = mapView.bounds.size.width/mapView.visibleMapRect.size.width;</span><br><span class="line">            <span class="keyword">self</span>.polylineRenderer.zoomScale = zoomScale;</span><br><span class="line">            [<span class="keyword">self</span>.polylineRenderer setNeedsDisplay];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)mapViewDidChangeVisibleRegion:(<span class="built_in">MKMapView</span> *)mapView &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.frame.size.width &gt; <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="keyword">double</span> zoomScale = mapView.bounds.size.width/mapView.visibleMapRect.size.width;</span><br><span class="line">        <span class="keyword">self</span>.polylineRenderer.zoomScale = zoomScale;</span><br><span class="line">        [<span class="keyword">self</span>.polylineRenderer setNeedsDisplay];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时画箭头线结束。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gw0kofkc52j30u00u0tb0.jpg" alt="DBE00389714A8821"></p>
<p>📢注意：</p>
<p><code>zoomScale</code>为手动计算的，通过 <code>mapView.bounds.size.width/mapView.visibleMapRect.size.width</code> 计算，不能使用<code>drawMapRect</code>方法的<code>zoomScale</code>。</p>
<p>如果使用<code>drawMapRect</code>的<code>zoomScale</code>会导致双指缩放地图时箭头坐标计算错误。</p>
<hr>
<blockquote>
<p><strong>个人博客:</strong> 🏡 <a href="https://forgetsou.github.io/">ForgetSou</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>MKMapView</tag>
        <tag>CGContext</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS开发-iOS14画中画(OC)</title>
    <url>/2020/11/11/iOS%E5%BC%80%E5%8F%91-iOS14%E7%94%BB%E4%B8%AD%E7%94%BB-OC/</url>
    <content><![CDATA[<h1 id="一-简述"><a href="#一-简述" class="headerlink" title="一 简述"></a>一 简述</h1><p>一种控制器，用于在浮动的可调整大小的窗口中响应用户启动的画中画视频播放。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">API_AVAILABLE(ios(<span class="number">9.0</span>), macos(<span class="number">10.15</span>), tvos(<span class="number">14.0</span>)) API_UNAVAILABLE(watchos)</span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AVPictureInPictureController</span> : <span class="title">NSObject</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong></p>
<p>画中画（PiP）是Apple希望始终在用户控制下的一项用户功能。仅在响应用户的明确请求时才调用PiP。如果某个应用以非用户直接指导的方式调用PiP，则App Store审核小组将拒绝它。</p>
</blockquote>
<p>要在iOS中使用画中画，要在Xcode中执行以下步骤：</p>
<ol>
<li>打开后台模式开启 Audio, AirPlay, and Picture in Picture</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gklbwh7jzpj30no07d3z7.jpg" alt="image-20201111164716519"></p>
<ol start="2">
<li>为音频会话配置合适的类别，如<code>AVAudioSessionCategoryPlayback</code> 、<code>AVAudioSessionCategoryPlayAndRecord</code>等</li>
</ol>
<blockquote>
<p>重要</p>
<p>不支持子类化和重写其方法，这会导致未定义的行为。</p>
</blockquote>
<h1 id="二-官方属性方法"><a href="#二-官方属性方法" class="headerlink" title="二 官方属性方法"></a>二 官方属性方法</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当前设备是否支持画中画</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)isPictureInPictureSupported;</span><br><span class="line"><span class="comment">// 创建画中画控制器</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithPlayerLayer:(<span class="built_in">AVPlayerLayer</span> *)playerLayer <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</span><br><span class="line"><span class="comment">// 要播放媒体的播放器层</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">AVPlayerLayer</span> *playerLayer;</span><br><span class="line"><span class="comment">// 是否允许用户跳过媒体内容</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> requiresLinearPlayback API_AVAILABLE(ios(<span class="number">14.0</span>), macos(<span class="number">11.0</span>), tvos(<span class="number">14.0</span>)) API_UNAVAILABLE(watchos);</span><br><span class="line"><span class="comment">// 委托对象</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>, <span class="keyword">nullable</span>) <span class="keyword">id</span> &lt;<span class="built_in">AVPictureInPictureControllerDelegate</span>&gt; delegate;</span><br><span class="line"><span class="comment">// 当前是否可以进行画中画回放</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">getter</span> = isPictureInPicturePossible) <span class="built_in">BOOL</span> pictureInPicturePossible;</span><br><span class="line"><span class="comment">// 控制器的画中画窗口是否在屏幕上</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">getter</span> = isPictureInPictureActive) <span class="built_in">BOOL</span> pictureInPictureActive;</span><br><span class="line"><span class="comment">// 系统是否挂起控制器的画中画窗口</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">getter</span> = isPictureInPictureSuspended) <span class="built_in">BOOL</span> pictureInPictureSuspended;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始播放</span></span><br><span class="line">- (<span class="keyword">void</span>)startPictureInPicture;</span><br><span class="line"><span class="comment">// 停止播放(如果当前处于活跃状态)</span></span><br><span class="line">- (<span class="keyword">void</span>)stopPictureInPicture;</span><br><span class="line"><span class="comment">// 是否处于活跃状态并且可以关闭</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> canStopPictureInPicture API_AVAILABLE(tvos(<span class="number">14.0</span>)) API_UNAVAILABLE(ios, macos, watchos);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统默认的“画中画”开始模板图像，用于应用程序的“画中画”按钮。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">class</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UIImage</span> *pictureInPictureButtonStartImage API_AVAILABLE(ios(<span class="number">13.0</span>), tvos(<span class="number">14.0</span>));</span><br><span class="line"><span class="comment">// 系统默认的画中画停止模板图像，用于应用程序的画中画按钮。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">class</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UIImage</span> *pictureInPictureButtonStopImage API_AVAILABLE(ios(<span class="number">13.0</span>), tvos(<span class="number">14.0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 告诉委托人画中画即将停止的时间，使您的应用有机会恢复其视频播放用户界面。</span></span><br><span class="line">- (<span class="keyword">void</span>)pictureInPictureController:(<span class="built_in">AVPictureInPictureController</span> *)pictureInPictureController restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">BOOL</span> restored))completionHandler;</span><br><span class="line"><span class="comment">// 当画中画即将开始时</span></span><br><span class="line">- (<span class="keyword">void</span>)pictureInPictureControllerWillStartPictureInPicture:(<span class="built_in">AVPictureInPictureController</span> *)pictureInPictureController;</span><br><span class="line"><span class="comment">// 该画中画回放已经开始</span></span><br><span class="line">- (<span class="keyword">void</span>)pictureInPictureControllerDidStartPictureInPicture:(<span class="built_in">AVPictureInPictureController</span> *)pictureInPictureController;</span><br><span class="line"><span class="comment">// 画中画无法启动</span></span><br><span class="line">- (<span class="keyword">void</span>)pictureInPictureController:(<span class="built_in">AVPictureInPictureController</span> *)pictureInPictureController failedToStartPictureInPictureWithError:(<span class="built_in">NSError</span> *)error;</span><br><span class="line"><span class="comment">// 画中画即将停止</span></span><br><span class="line">- (<span class="keyword">void</span>)pictureInPictureControllerWillStopPictureInPicture:(<span class="built_in">AVPictureInPictureController</span> *)pictureInPictureController;</span><br><span class="line"><span class="comment">// 画中画停止</span></span><br><span class="line">- (<span class="keyword">void</span>)pictureInPictureControllerDidStopPictureInPicture:(<span class="built_in">AVPictureInPictureController</span> *)pictureInPictureController;</span><br></pre></td></tr></table></figure>

<h1 id="三-简单示例"><a href="#三-简单示例" class="headerlink" title="三 简单示例"></a>三 简单示例</h1><h2 id="1-导入框架-import-lt-AVKit-AVKit-h-gt"><a href="#1-导入框架-import-lt-AVKit-AVKit-h-gt" class="headerlink" title="1. 导入框架`#import &lt;AVKit/AVKit.h&gt;`"></a>1. 导入框架`#import &lt;AVKit/AVKit.h&gt;`</h2><h2 id="2-创建画中画对象"><a href="#2-创建画中画对象" class="headerlink" title="2. 创建画中画对象"></a>2. 创建画中画对象</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.判断是否支持画中画功能</span></span><br><span class="line"><span class="keyword">if</span> ([<span class="built_in">AVPictureInPictureController</span> isPictureInPictureSupported]) &#123;</span><br><span class="line">    <span class="comment">//2.开启权限</span></span><br><span class="line">    <span class="keyword">@try</span> &#123;</span><br><span class="line">        <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">        [[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:&amp;error];</span><br><span class="line">        [[<span class="built_in">AVAudioSession</span> sharedInstance] setActive:<span class="literal">YES</span> error:&amp;error];</span><br><span class="line">    &#125; <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;AVAudioSession错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">self</span>.pip = [[<span class="built_in">AVPictureInPictureController</span> alloc] initWithPlayerLayer:<span class="keyword">self</span>.player];</span><br><span class="line">    <span class="keyword">self</span>.pip.delegate = <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>上述代码里的<code>self.player</code>必须是<code>AVPlayerLayer</code>类型。</p>
<h2 id="3-开启-关闭"><a href="#3-开启-关闭" class="headerlink" title="3. 开启/关闭"></a>3. 开启/关闭</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.pip.isPictureInPictureActive) &#123;</span><br><span class="line">    [<span class="keyword">self</span>.pip stopPictureInPicture];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    [<span class="keyword">self</span>.pip startPictureInPicture];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-实现AVPictureInPictureControllerDelegate代理"><a href="#4-实现AVPictureInPictureControllerDelegate代理" class="headerlink" title="4. 实现AVPictureInPictureControllerDelegate代理"></a>4. 实现<code>AVPictureInPictureControllerDelegate</code>代理</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 即将开启画中画</span></span><br><span class="line">- (<span class="keyword">void</span>)pictureInPictureControllerWillStartPictureInPicture:(<span class="built_in">AVPictureInPictureController</span> *)pictureInPictureController &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 已经开启画中画</span></span><br><span class="line">- (<span class="keyword">void</span>)pictureInPictureControllerDidStartPictureInPicture:(<span class="built_in">AVPictureInPictureController</span> *)pictureInPictureController &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 开启画中画失败</span></span><br><span class="line">- (<span class="keyword">void</span>)pictureInPictureController:(<span class="built_in">AVPictureInPictureController</span> *)pictureInPictureController failedToStartPictureInPictureWithError:(<span class="built_in">NSError</span> *)error &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 即将关闭画中画</span></span><br><span class="line">- (<span class="keyword">void</span>)pictureInPictureControllerWillStopPictureInPicture:(<span class="built_in">AVPictureInPictureController</span> *)pictureInPictureController &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 已经关闭画中画</span></span><br><span class="line">- (<span class="keyword">void</span>)pictureInPictureControllerDidStopPictureInPicture:(<span class="built_in">AVPictureInPictureController</span> *)pictureInPictureController &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭画中画且恢复播放界面</span></span><br><span class="line">- (<span class="keyword">void</span>)pictureInPictureController:(<span class="built_in">AVPictureInPictureController</span> *)pictureInPictureController restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">BOOL</span> restored))completionHandler &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS开发-判断平面上一个点是否在不规则的封闭区域内（OC）</title>
    <url>/2021/07/17/iOS%E5%BC%80%E5%8F%91-%E5%88%A4%E6%96%AD%E5%B9%B3%E9%9D%A2%E4%B8%8A%E4%B8%80%E4%B8%AA%E7%82%B9%E6%98%AF%E5%90%A6%E5%9C%A8%E4%B8%8D%E8%A7%84%E5%88%99%E7%9A%84%E5%B0%81%E9%97%AD%E5%8C%BA%E5%9F%9F%E5%86%85%EF%BC%88OC%EF%BC%89/</url>
    <content><![CDATA[<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsjy35qbfzj30d205zq32.jpg" alt="image.png" style="zoom:150%;" />

<h2 id="1-在二维空间创建不规则封闭区域"><a href="#1-在二维空间创建不规则封闭区域" class="headerlink" title="1. 在二维空间创建不规则封闭区域"></a>1. 在二维空间创建不规则封闭区域</h2><h3 id="1-1-路径绘图"><a href="#1-1-路径绘图" class="headerlink" title="1.1 路径绘图"></a>1.1 路径绘图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGMutablePathRef pathRef = CGPathCreateMutable();</span><br></pre></td></tr></table></figure>

<h3 id="1-2-路径连线"><a href="#1-2-路径连线" class="headerlink" title="1.2 路径连线"></a>1.2 路径连线</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGPathMoveToPoint(pathRef, NULL, 83.277656, -169.938307);</span><br><span class="line"></span><br><span class="line">CGPathAddLineToPoint(pathRef, NULL, 21.083895, -169.938307);</span><br><span class="line"></span><br><span class="line">CGPathAddLineToPoint(pathRef, NULL, 21.083895, -36.617291);</span><br><span class="line"></span><br><span class="line">CGPathAddLineToPoint(pathRef, NULL, 83.877837, -35.508388);</span><br><span class="line"></span><br><span class="line">CGPathAddLineToPoint(pathRef, NULL, 83.277656, -169.938307);</span><br></pre></td></tr></table></figure>

<h3 id="1-3-关闭绘图"><a href="#1-3-关闭绘图" class="headerlink" title="1.3 关闭绘图"></a>1.3 关闭绘图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGPathCloseSubpath(pathRef);</span><br></pre></td></tr></table></figure>

<h2 id="2-判断任意点是否在此区域内"><a href="#2-判断任意点是否在此区域内" class="headerlink" title="2. 判断任意点是否在此区域内"></a>2. 判断任意点是否在此区域内</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGPoint point= CGPointMake(aircraftLocation.latitude, aircraftLocation.longitude);</span><br><span class="line"></span><br><span class="line">BOOL containsPoint = (CGPathContainsPoint(pathRef, NULL, point, NO));</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p><strong>个人博客:</strong> 🏡 <a href="https://forgetsou.github.io/">ForgetSou</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS-BLE蓝牙4.0开发</title>
    <url>/2020/10/23/macOS-BLE%E8%93%9D%E7%89%994-0%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="macOS-BLE蓝牙4-0开发"><a href="#macOS-BLE蓝牙4-0开发" class="headerlink" title="macOS-BLE蓝牙4.0开发"></a>macOS-BLE蓝牙4.0开发</h1><p>！！！<strong>中心模式</strong> ！！！</p>
<p><code>macOS</code>的BLE程序代码和<code>iOS</code>差不多，只需要修改一些UI组件就可以把<code>iOS</code>的代码放在<code>macOS</code>上使用，下面列举移除不同之处。</p>
<h2 id="1-蓝牙状态一直CBManagerStateUnsupported的问题"><a href="#1-蓝牙状态一直CBManagerStateUnsupported的问题" class="headerlink" title="1 蓝牙状态一直CBManagerStateUnsupported的问题"></a>1 蓝牙状态一直CBManagerStateUnsupported的问题</h2><p>在<code>Xcode</code>中打开targets中的沙盒蓝牙设置，具体路径: TARGETS - Signing &amp; Capanilities - App Sandbox - Handware - Bluetooth</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gjzbejhkefj30rj08swfl.jpg" alt="TARGET-Bluetooth"></p>
<p>info.plist 里面添加<code>NSBluetoothPeripheralUsageDescription</code> Value 根据具体业务详细说明使用蓝牙的目的，以提示用户开启蓝牙权限，避免审核被拒。</p>
<h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h2><h3 id="2-1-导入蓝牙库"><a href="#2-1-导入蓝牙库" class="headerlink" title="2.1 导入蓝牙库"></a><strong>2.1 导入蓝牙库</strong></h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;CoreBluetooth/CoreBluetooth.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-添加代理头"><a href="#2-2-添加代理头" class="headerlink" title="2.2 添加代理头"></a><strong>2.2 添加代理头</strong></h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">&lt;</span><br><span class="line">CBCentralManagerDelegate,</span><br><span class="line">CBPeripheralDelegate</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-实例化对象"><a href="#2-3-实例化对象" class="headerlink" title="2.3 实例化对象"></a><strong>2.3 实例化对象</strong></h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) CBCentralManager *manager; <span class="comment">// 中心管理器</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) CBPeripheral *peripheral;	 <span class="comment">// 发现的设备</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-初始化管理器，启动蓝牙"><a href="#2-4-初始化管理器，启动蓝牙" class="headerlink" title="2.4 初始化管理器，启动蓝牙"></a><strong>2.4 初始化管理器，启动蓝牙</strong></h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.manager = [[CBCentralManager alloc] initWithDelegate:<span class="keyword">self</span> queue:dispatch_get_main_queue()];</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">self</span>.manager = [[CBCentralManager alloc] initWithDelegate:<span class="keyword">self</span> queue:dispatch_get_main_queue() options:@&#123;&#125;];</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">self</span>.manager = [[CBCentralManager alloc] init];</span><br><span class="line"><span class="keyword">self</span>.manager.delegate = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-查看蓝牙状态并开启扫描"><a href="#2-5-查看蓝牙状态并开启扫描" class="headerlink" title="2.5 查看蓝牙状态并开启扫描"></a><strong>2.5 查看蓝牙状态并开启扫描</strong></h3><p>不实现<strong>centralManagerDidUpdateState</strong>会崩溃</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)centralManagerDidUpdateState:(CBCentralManager *)central &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *tipMsg = <span class="string">@&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">switch</span> (central.state) &#123;</span><br><span class="line">        <span class="keyword">case</span> CBManagerStatePoweredOn:</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 蓝牙打开</span></span><br><span class="line">            [<span class="keyword">self</span>.manager scanForPeripheralsWithServices:<span class="literal">nil</span> options:<span class="literal">nil</span>];</span><br><span class="line">          <span class="comment">//[self.manager scanForPeripheralsWithServices:@[[CBUUID UUIDWithString:@&quot;&quot;]] options:@&#123;CBCentralManagerScanOptionAllowDuplicatesKey : @YES&#125;];</span></span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CBManagerStatePoweredOff:</span><br><span class="line">          <span class="comment">// 蓝牙关闭&lt;设置关闭，退出前台都会回调&gt;</span></span><br><span class="line">        		</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CBManagerStateUnknown:</span><br><span class="line">            tipMsg = <span class="string">@&quot;手机没有识别到蓝牙，请检查手机。&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CBManagerStateUnauthorized:</span><br><span class="line">            tipMsg = <span class="string">@&quot;手机蓝牙功能没有权限，请前往设置。&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CBManagerStateResetting:</span><br><span class="line">            tipMsg = <span class="string">@&quot;手机蓝牙已断开连接，重置中...&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> CBManagerStateUnsupported:</span><br><span class="line">            tipMsg = <span class="string">@&quot;手机不支持蓝牙功能，请更换手机。&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 添加alert提示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6-扫描并连接设备"><a href="#2-6-扫描并连接设备" class="headerlink" title="2.6 扫描并连接设备"></a><strong>2.6 扫描并连接设备</strong></h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - CBCentralManagerDelegate</span></span><br><span class="line">- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central didDiscoverPeripheral:(CBPeripheral *)peripheral advertisementData:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *,<span class="keyword">id</span>&gt; *)advertisementData RSSI:(<span class="built_in">NSNumber</span> *)RSSI &#123;</span><br><span class="line">    <span class="keyword">if</span> (peripheral == <span class="literal">nil</span> || peripheral.identifier == <span class="literal">nil</span> || kStringEmpty(peripheral.identifier.UUIDString)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([peripheral.name isEqualToString:<span class="string">@&quot;Smart voice&quot;</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.peripheral = peripheral;</span><br><span class="line">        <span class="keyword">self</span>.peripheral.delegate = <span class="keyword">self</span>;</span><br><span class="line">        [<span class="keyword">self</span>.manager stopScan];</span><br><span class="line">        [<span class="keyword">self</span>.manager connectPeripheral:peripheral options:<span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><code>CBConnectPeripheralOptionNotifyOnConnectionKey</code></li>
</ol>
<p>这是一个NSNumber(Boolean)，表示系统会为获得的外设显示一个提示，当成功连接后这个应用被挂起，这对于没有运行在中心后台模式并不显示他们自己的提示时是有用的。如果有更多的外设连接后都会发送通知，如果附近的外设运行在前台则会收到这个提示。</p>
<ol start="2">
<li><code>CBConnectPeripheralOptionNotifyOnDisconnectionKey</code> </li>
</ol>
<p>这是一个NSNumber(Boolean), 表示系统会为获得的外设显示一个关闭提示，如果这个时候关闭了连接，这个应用会挂起。</p>
<ol start="3">
<li><code>CBConnectPeripheralOptionNotifyOnNotificationKey</code></li>
</ol>
<p>这是一个NSNumber(Boolean)，表示系统会为获得的外设收到通知后显示一个提示，这个时候应用是被挂起的。</p>
<h3 id="2-7-连接后的回调"><a href="#2-7-连接后的回调" class="headerlink" title="2.7 连接后的回调"></a><strong>2.7 连接后的回调</strong></h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接成功</span></span><br><span class="line">- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central didConnectPeripheral:(CBPeripheral *)peripheral &#123;</span><br><span class="line">    <span class="comment">// 发现服务</span></span><br><span class="line">    [<span class="keyword">self</span>.peripheral discoverServices:<span class="literal">nil</span>];</span><br><span class="line">    <span class="comment">// [self.peripheral discoverServices:@[[CBUUID UUIDWithString:@&quot;特定的服务&quot;]]];</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 连接失败</span></span><br><span class="line">- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central didFailToConnectPeripheral:(CBPeripheral *)peripheral error:(<span class="built_in">NSError</span> *)error &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 断开连接</span></span><br><span class="line">- (<span class="keyword">void</span>)centralManager:(CBCentralManager *)central didDisconnectPeripheral:(CBPeripheral *)peripheral error:(<span class="built_in">NSError</span> *)error &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-8-搜索指定服务并查询指定特征-lt-也可以根据特征UUID读取特征值-gt"><a href="#2-8-搜索指定服务并查询指定特征-lt-也可以根据特征UUID读取特征值-gt" class="headerlink" title="2.8 搜索指定服务并查询指定特征&lt;也可以根据特征UUID读取特征值&gt;"></a><strong>2.8 搜索指定服务并查询指定特征&lt;也可以根据特征UUID读取特征值&gt;</strong></h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)peripheral:(CBPeripheral *)peripheral didDiscoverServices:(<span class="built_in">NSError</span> *)error &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *services = peripheral.services;</span><br><span class="line">    <span class="keyword">if</span> (kArrayEmpty(services)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (CBService *service <span class="keyword">in</span> services) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([service.UUID.UUIDString containsString:SERVICE_UUID]) &#123;</span><br><span class="line">            [<span class="keyword">self</span>.peripheral discoverCharacteristics:@[[CBUUID UUIDWithString:CHARACTERISTICS_UUID]] forService:service];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-9-找出指定的characteristics特征并读取"><a href="#2-9-找出指定的characteristics特征并读取" class="headerlink" title="2.9 找出指定的characteristics特征并读取"></a><strong>2.9 找出指定的characteristics特征并读取</strong></h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)peripheral:(CBPeripheral *)peripheral didDiscoverCharacteristicsForService:(CBService *)service error:(<span class="built_in">NSError</span> *)error &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *characteristics = service.characteristics;</span><br><span class="line">    <span class="keyword">for</span> (CBCharacteristic *charact <span class="keyword">in</span> characteristics) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([charact.UUID.UUIDString containsString:CHARACTERISTICS_UUID]) &#123;</span><br><span class="line">            [<span class="keyword">self</span>.peripheral setNotifyValue:<span class="literal">YES</span> forCharacteristic:charact];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-10-监控Characteristics新数据并提取"><a href="#2-10-监控Characteristics新数据并提取" class="headerlink" title="2.10 监控Characteristics新数据并提取"></a><strong>2.10 监控Characteristics新数据并提取</strong></h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)peripheral:(CBPeripheral *)peripheral didUpdateValueForCharacteristic:(<span class="keyword">nonnull</span> CBCharacteristic *)characteristic error:(<span class="keyword">nullable</span> <span class="built_in">NSError</span> *)error &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@   %@&quot;</span>, characteristic, characteristic.UUID.UUIDString);</span><br><span class="line">    <span class="keyword">if</span> (characteristic.value) &#123;</span><br><span class="line">        <span class="comment">// 解析特征Value</span></span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-11-写数据"><a href="#2-11-写数据" class="headerlink" title="2.11 写数据"></a><strong>2.11 写数据</strong></h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.peripheral writeValue:data forCharacteristic:characteristic type:CBCharacteristicWriteWithResponse];</span><br><span class="line"><span class="comment">// CBCharacteristicWriteWithoutResponse</span></span><br><span class="line"><span class="comment">// CBCharacteristicWriteWithResponse</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>macOS</tag>
        <tag>BLE</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS-NSAlert</title>
    <url>/2020/10/26/macOS-NSAlert/</url>
    <content><![CDATA[<h1 id="macOS桌面开发NSAlert的使用"><a href="#macOS桌面开发NSAlert的使用" class="headerlink" title="macOS桌面开发NSAlert的使用"></a>macOS桌面开发NSAlert的使用</h1><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1 简述"></a>1 简述</h2><p>附加到窗口的模式对话框或工作表，可以定义标题，描述详情，图标，按钮等。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSAlert</span> : <span class="title">NSObject</span></span></span><br></pre></td></tr></table></figure>

<p><code>NSAlert</code>总体分为两类：</p>
<ul>
<li><p>显示在应用程序中的提示框</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)beginSheetModalForWindow:(<span class="built_in">NSWindow</span> *)sheetWindow completionHandler:(<span class="keyword">void</span> (^ _Nullable)(<span class="built_in">NSModalResponse</span> returnCode))handler API_AVAILABLE(macos(<span class="number">10.9</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>单个警报，应用程序外的提示框</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[alert runModal];</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-常用属性"><a href="#2-常用属性" class="headerlink" title="2 常用属性"></a>2 常用属性</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *messageText; <span class="comment">// 主要提示信息</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *informativeText;<span class="comment">// 其他提示信息</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">null_resettable</span>, <span class="keyword">strong</span>) <span class="built_in">NSImage</span> *icon; <span class="comment">// 自定义图标，不设置会使用系统默认图标 NSApplicationIcon</span></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">typedef NS_ENUM(NSUInteger, NSAlertStyle) &#123;</span></span><br><span class="line"><span class="comment">    NSAlertStyleWarning = 0,</span></span><br><span class="line"><span class="comment">    NSAlertStyleInformational = 1,</span></span><br><span class="line"><span class="comment">    NSAlertStyleCritical = 2</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSAlertStyle</span> alertStyle; </span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> showsHelp; <span class="comment">// 是否显示帮助锚点</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSHelpAnchorName</span> helpAnchor; <span class="comment">// 锚点内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> showsSuppressionButton API_AVAILABLE(macos(<span class="number">10.5</span>)); <span class="comment">// 是否显示复选框</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">NSButton</span> *suppressionButton API_AVAILABLE(macos(<span class="number">10.5</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSView</span> *accessoryView API_AVAILABLE(macos(<span class="number">10.5</span>)); <span class="comment">// 附件信息</span></span><br></pre></td></tr></table></figure>

<h2 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3 初始化"></a>3 初始化</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSAlert</span> *alert = [[<span class="built_in">NSAlert</span> alloc] init];</span><br></pre></td></tr></table></figure>

<h2 id="4-示例"><a href="#4-示例" class="headerlink" title="4 示例"></a>4 示例</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSAlert</span> *alert = [[<span class="built_in">NSAlert</span> alloc] init];</span><br><span class="line"></span><br><span class="line">alert.icon = [<span class="built_in">NSImage</span> imageNamed:<span class="string">@&quot;apple-touch-icon-next&quot;</span>];</span><br><span class="line"></span><br><span class="line">alert.alertStyle = <span class="built_in">NSAlertStyleWarning</span>;</span><br><span class="line"></span><br><span class="line">[alert addButtonWithTitle:<span class="string">@&quot;确定&quot;</span>];</span><br><span class="line"></span><br><span class="line">[alert addButtonWithTitle:<span class="string">@&quot;取消&quot;</span>];</span><br><span class="line"></span><br><span class="line">alert.messageText = <span class="string">@&quot;title&quot;</span>;</span><br><span class="line"></span><br><span class="line">alert.informativeText = <span class="string">@&quot;msg&quot;</span>;</span><br><span class="line"></span><br><span class="line">alert.showsSuppressionButton = <span class="literal">YES</span>;</span><br><span class="line"><span class="comment">// 方式1</span></span><br><span class="line">[alert beginSheetModalForWindow:<span class="keyword">self</span>.view.window completionHandler:^(<span class="built_in">NSModalResponse</span> returnCode) &#123;</span><br><span class="line">    <span class="keyword">if</span> (returnCode == <span class="built_in">NSAlertFirstButtonReturn</span>) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;确定&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (returnCode == <span class="built_in">NSAlertSecondButtonReturn</span>) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;取消&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;else&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">/*! 方式2</span></span><br><span class="line"><span class="comment">NSModalResponse response = [alert runModal];</span></span><br><span class="line"><span class="comment">if (response == NSModalResponseStop) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if (response == NSModalResponseAbort) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if (response == NSModalResponseContinue) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="5-！！！提醒！！！"><a href="#5-！！！提醒！！！" class="headerlink" title="5 ！！！提醒！！！"></a>5 ！！！提醒！！！</h2><p>使用方式1的时候需要注意的是window不能为nil，不要讲<code>NSAlert</code>添加在HomeVC的ViewDidLoad中，此时Window还没创建成功。</p>
]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>macOS</tag>
        <tag>AppKit</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS-NSMenu</title>
    <url>/2020/10/27/macOS-NSMenu/</url>
    <content><![CDATA[<h1 id="macOS-NSMenu"><a href="#macOS-NSMenu" class="headerlink" title="macOS-NSMenu"></a>macOS-NSMenu</h1><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1 简述"></a>1 简述</h2><p>管理应用菜单的对象，通常会在程序的主菜单栏，视图右键菜单，Dock菜单使用。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSMenu</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>, <span class="title">NSCoding</span>, <span class="title">NSUserInterfaceItemIdentification</span>, <span class="title">NSAccessibilityElement</span>, <span class="title">NSAccessibility</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-NSMenu源码注解"><a href="#2-NSMenu源码注解" class="headerlink" title="2 NSMenu源码注解"></a>2 <code>NSMenu</code>源码注解</h2><h3 id="2-1-创建"><a href="#2-1-创建" class="headerlink" title="2.1 创建"></a>2.1 创建</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)initWithTitle:(<span class="built_in">NSString</span> *)title <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)coder <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-常用属性"><a href="#2-2-常用属性" class="headerlink" title="2.2 常用属性"></a>2.2 常用属性</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 菜单标题</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *title;</span><br><span class="line"><span class="comment">// 父菜单</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">assign</span>) <span class="built_in">NSMenu</span> *supermenu;</span><br><span class="line"><span class="comment">// 当前菜单下的子菜单数组</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSMenuItem</span> *&gt; *itemArray;</span><br><span class="line"><span class="comment">// item数量</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSInteger</span> numberOfItems;</span><br><span class="line"><span class="comment">// 是否自动启用项目</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> autoenablesItems;</span><br><span class="line"><span class="comment">// 菜单高度</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">CGFloat</span> menuBarHeight;</span><br><span class="line"><span class="comment">// 高亮的item</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">NSMenuItem</span> *highlightedItem API_AVAILABLE(macos(<span class="number">10.5</span>));</span><br><span class="line"><span class="comment">// 最小宽度</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">CGFloat</span> minimumWidth API_AVAILABLE(macos(<span class="number">10.6</span>));</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSSize</span> size API_AVAILABLE(macos(<span class="number">10.6</span>));</span><br><span class="line"><span class="comment">// 确定上下文菜单插件是否可以附加到菜单（如果用作上下文菜单）。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">null_resettable</span>, <span class="keyword">strong</span>) <span class="built_in">NSFont</span> *font API_AVAILABLE(macos(<span class="number">10.6</span>));</span><br><span class="line"><span class="comment">// 确定菜单是否包含状态图像的列</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> showsStateColumn API_AVAILABLE(macos(<span class="number">10.5</span>));</span><br></pre></td></tr></table></figure>

<h3 id="2-3-常用函数"><a href="#2-3-常用函数" class="headerlink" title="2.3 常用函数"></a>2.3 常用函数</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 菜单栏是否可见，visible = NO 隐藏</span></span><br><span class="line">+ (<span class="keyword">void</span>)setMenuBarVisible:(<span class="built_in">BOOL</span>)visible;</span><br><span class="line">+ (<span class="built_in">BOOL</span>)menuBarVisible;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加和删除菜单项</span></span><br><span class="line">- (<span class="keyword">void</span>)insertItem:(<span class="built_in">NSMenuItem</span> *)newItem atIndex:(<span class="built_in">NSInteger</span>)index;</span><br><span class="line">- (<span class="built_in">NSMenuItem</span> *)insertItemWithTitle:(<span class="built_in">NSString</span> *)string action:(<span class="keyword">nullable</span> SEL)selector keyEquivalent:(<span class="built_in">NSString</span> *)charCode atIndex:(<span class="built_in">NSInteger</span>)index;</span><br><span class="line">- (<span class="keyword">void</span>)addItem:(<span class="built_in">NSMenuItem</span> *)newItem;</span><br><span class="line">- (<span class="built_in">NSMenuItem</span> *)addItemWithTitle:(<span class="built_in">NSString</span> *)string action:(<span class="keyword">nullable</span> SEL)selector keyEquivalent:(<span class="built_in">NSString</span> *)charCode;</span><br><span class="line">- (<span class="keyword">void</span>)removeItemAtIndex:(<span class="built_in">NSInteger</span>)index;</span><br><span class="line">- (<span class="keyword">void</span>)removeItem:(<span class="built_in">NSMenuItem</span> *)item;</span><br><span class="line">- (<span class="keyword">void</span>)removeAllItems API_AVAILABLE(macos(<span class="number">10.6</span>));</span><br><span class="line">- (<span class="keyword">void</span>)itemChanged:(<span class="built_in">NSMenuItem</span> *)item; <span class="comment">// 在视觉上修改菜单项（例如，其标题更改）时调用。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找菜单项</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSMenuItem</span> *)itemAtIndex:(<span class="built_in">NSInteger</span>)index;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSMenuItem</span> *)itemWithTitle:(<span class="built_in">NSString</span> *)title;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSMenuItem</span> *)itemWithTag:(<span class="built_in">NSInteger</span>)tag;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找菜单项的索引</span></span><br><span class="line">- (<span class="built_in">NSInteger</span>)indexOfItem:(<span class="built_in">NSMenuItem</span> *)item;</span><br><span class="line">- (<span class="built_in">NSInteger</span>)indexOfItemWithTitle:(<span class="built_in">NSString</span> *)title;</span><br><span class="line">- (<span class="built_in">NSInteger</span>)indexOfItemWithTag:(<span class="built_in">NSInteger</span>)tag;</span><br><span class="line">- (<span class="built_in">NSInteger</span>)indexOfItemWithRepresentedObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object; <span class="comment">// 返回具有给定表示对象的菜单中第一个菜单项的索引。</span></span><br><span class="line">- (<span class="built_in">NSInteger</span>)indexOfItemWithSubmenu:(<span class="keyword">nullable</span> <span class="built_in">NSMenu</span> *)submenu; <span class="comment">// 使用给定的子菜单返回菜单中菜单项的索引。</span></span><br><span class="line">- (<span class="built_in">NSInteger</span>)indexOfItemWithTarget:(<span class="keyword">nullable</span> <span class="keyword">id</span>)target andAction:(<span class="keyword">nullable</span> SEL)actionSelector; <span class="comment">// 返回菜单中具有指定操作和目标的第一个菜单项的索引。</span></span><br></pre></td></tr></table></figure>

<h2 id="3-NSMenuItem源码注解"><a href="#3-NSMenuItem源码注解" class="headerlink" title="3 NSMenuItem源码注解"></a>3 <code>NSMenuItem</code>源码注解</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSMenuItem</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>, <span class="title">NSCoding</span>, <span class="title">NSValidatedUserInterfaceItem</span>, <span class="title">NSUserInterfaceItemIdentification</span>, <span class="title">NSAccessibilityElement</span>, <span class="title">NSAccessibility</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化创建</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithTitle:(<span class="built_in">NSString</span> *)string action:(<span class="keyword">nullable</span> SEL)selector keyEquivalent:(<span class="built_in">NSString</span> *)charCode <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)coder <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动项</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isEnabled) <span class="built_in">BOOL</span> enabled;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐藏状态</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isHidden) <span class="built_in">BOOL</span> hidden API_AVAILABLE(macos(<span class="number">10.5</span>)); <span class="comment">// 菜单项是否隐藏</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isHiddenOrHasHiddenAncestor, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> hiddenOrHasHiddenAncestor API_AVAILABLE(macos(<span class="number">10.5</span>)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// Action &amp; Target</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> target;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>) SEL action;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标题</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *title;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSAttributedString</span> *attributedTitle;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标签 </span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSInteger</span> tag;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSControlStateValue</span> state;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSControlStateValue</span> <span class="built_in">NSControlStateValueMixed</span> = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSControlStateValue</span> <span class="built_in">NSControlStateValueOff</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSControlStateValue</span> <span class="built_in">NSControlStateValueOn</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSImage</span> *image;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">null_resettable</span>, <span class="keyword">strong</span>) <span class="built_in">NSImage</span> *onStateImage; <span class="comment">// checkmark by default</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSImage</span> *offStateImage; <span class="comment">// none by default</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">null_resettable</span>, <span class="keyword">strong</span>) <span class="built_in">NSImage</span> *mixedStateImage; <span class="comment">// horizontal line by default</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子菜单</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">BOOL</span> hasSubmenu;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSMenu</span> *submenu;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readonly</span>, <span class="keyword">assign</span>) <span class="built_in">NSMenuItem</span> *parentItem API_AVAILABLE(macos(<span class="number">10.6</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按键</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *keyEquivalent;</span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSEventModifierFlags</span> keyEquivalentModifierMask;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其它</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *userKeyEquivalent;</span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> allowsKeyEquivalentWhenHidden API_AVAILABLE(macos(<span class="number">10.13</span>)); </span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *toolTip; </span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isHighlighted, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> highlighted API_AVAILABLE(macos(<span class="number">10.5</span>)); <span class="comment">// 是否应突出显示菜单项</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSView</span> *view API_AVAILABLE(macos(<span class="number">10.5</span>)); <span class="comment">// 菜单项的内容视图</span></span><br></pre></td></tr></table></figure>

<h2 id="4-实际应用"><a href="#4-实际应用" class="headerlink" title="4 实际应用"></a>4 实际应用</h2><ul>
<li><p>Main Menu</p>
<p>  使用<code>StoryBoard</code>添加Menu比较方便添加和删除</p>
<p>  <img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk3ohztiusj30fe037dfy.jpg" alt="Main Menu"></p>
</li>
<li><p>右键Menu</p>
<p>在<code>NSView</code>上添加Menu</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">NSMenu</span> *menu = [[<span class="built_in">NSMenu</span> alloc] initWithTitle:<span class="string">@&quot;view menu&quot;</span>];</span><br><span class="line">    <span class="built_in">NSMenuItem</span> *item1 = [[<span class="built_in">NSMenuItem</span> alloc] initWithTitle:<span class="string">@&quot;item 1&quot;</span> action:<span class="keyword">@selector</span>(menuClick) keyEquivalent:<span class="string">@&quot;&quot;</span>];</span><br><span class="line">    item1.target = <span class="keyword">self</span>;</span><br><span class="line">    <span class="built_in">NSMenuItem</span> *item2 = [[<span class="built_in">NSMenuItem</span> alloc] initWithTitle:<span class="string">@&quot;item 2&quot;</span> action:<span class="keyword">@selector</span>(menuClick) keyEquivalent:<span class="string">@&quot;&quot;</span>];</span><br><span class="line">    item2.target = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    [menu addItem:item1];</span><br><span class="line">    [menu addItem:item2];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加二级菜单</span></span><br><span class="line">    <span class="built_in">NSMenu</span> *menu2 = [[<span class="built_in">NSMenu</span> alloc] initWithTitle:<span class="string">@&quot;sub menu&quot;</span>];</span><br><span class="line">    <span class="built_in">NSMenuItem</span> *itemA = [[<span class="built_in">NSMenuItem</span> alloc] initWithTitle:<span class="string">@&quot;itemA&quot;</span> action:<span class="keyword">@selector</span>(menuClick) keyEquivalent:<span class="string">@&quot;&quot;</span>];</span><br><span class="line">    itemA.target = <span class="keyword">self</span>;</span><br><span class="line">    <span class="built_in">NSMenuItem</span> *itemB = [[<span class="built_in">NSMenuItem</span> alloc] initWithTitle:<span class="string">@&quot;itemB&quot;</span> action:<span class="keyword">@selector</span>(menuClick) keyEquivalent:<span class="string">@&quot;&quot;</span>];</span><br><span class="line">    itemB.target = <span class="keyword">self</span>;</span><br><span class="line">    [menu2 addItem:itemA];</span><br><span class="line">    [menu2 addItem:itemB];</span><br><span class="line">    <span class="comment">// 二级菜单放在指定item上</span></span><br><span class="line">    [menu setSubmenu:menu2 forItem:item2];</span><br><span class="line">    <span class="keyword">self</span>.view.menu = menu;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)menuClick &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Dock菜单</p>
<p>在AppDelegate中重写<code>applicationDockMenu</code>方法</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSMenu</span> *)applicationDockMenu:(<span class="built_in">NSApplication</span> *)sender &#123;</span><br><span class="line">    <span class="built_in">NSMenu</span> *menu = [[<span class="built_in">NSMenu</span> alloc] initWithTitle:<span class="string">@&quot;dock menu&quot;</span>];</span><br><span class="line">    <span class="built_in">NSMenuItem</span> *item1 = [[<span class="built_in">NSMenuItem</span> alloc] initWithTitle:<span class="string">@&quot;item 1&quot;</span> action:<span class="keyword">@selector</span>(menuClick) keyEquivalent:<span class="string">@&quot;&quot;</span>];</span><br><span class="line">    item1.target = <span class="keyword">self</span>;</span><br><span class="line">    <span class="built_in">NSMenuItem</span> *item2 = [[<span class="built_in">NSMenuItem</span> alloc] initWithTitle:<span class="string">@&quot;item 2&quot;</span> action:<span class="keyword">@selector</span>(menuClick) keyEquivalent:<span class="string">@&quot;&quot;</span>];</span><br><span class="line">    item2.target = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    [menu addItem:item1];</span><br><span class="line">    [menu addItem:item2];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加二级菜单</span></span><br><span class="line">    <span class="built_in">NSMenu</span> *menu2 = [[<span class="built_in">NSMenu</span> alloc] initWithTitle:<span class="string">@&quot;sub menu&quot;</span>];</span><br><span class="line">    <span class="built_in">NSMenuItem</span> *itemA = [[<span class="built_in">NSMenuItem</span> alloc] initWithTitle:<span class="string">@&quot;itemA&quot;</span> action:<span class="keyword">@selector</span>(menuClick) keyEquivalent:<span class="string">@&quot;&quot;</span>];</span><br><span class="line">    itemA.target = <span class="keyword">self</span>;</span><br><span class="line">    <span class="built_in">NSMenuItem</span> *itemB = [[<span class="built_in">NSMenuItem</span> alloc] initWithTitle:<span class="string">@&quot;itemB&quot;</span> action:<span class="keyword">@selector</span>(menuClick) keyEquivalent:<span class="string">@&quot;&quot;</span>];</span><br><span class="line">    itemB.target = <span class="keyword">self</span>;</span><br><span class="line">    [menu2 addItem:itemA];</span><br><span class="line">    [menu2 addItem:itemB];</span><br><span class="line">    <span class="comment">// 二级菜单放在指定item上</span></span><br><span class="line">    [menu setSubmenu:menu2 forItem:item2];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> menu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>macOS</tag>
        <tag>AppKit</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS开发-AppKit架构</title>
    <url>/2020/10/21/macOS%E5%BC%80%E5%8F%91-AppKit%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<blockquote>
<p>参考: <a href="https://developer.apple.com/documentation/appkit">https://developer.apple.com/documentation/appkit</a></p>
</blockquote>
<h1 id="AppKit-架构"><a href="#AppKit-架构" class="headerlink" title="AppKit 架构"></a><a href="https://www.processon.com/view/link/5f9644dd1e085307a0a44ba9">AppKit 架构</a></h1><blockquote>
<p>可用性</p>
<ul>
<li>macOS 10.0以上</li>
<li>Mac Catalyst 13.0以上</li>
</ul>
</blockquote>
<p>具体说明请点击链接进入processon查看 <a href="https://www.processon.com/view/link/5f9644dd1e085307a0a44ba9">https://www.processon.com/view/link/5f9644dd1e085307a0a44ba9</a></p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk2laqztw2j30u02csqen.jpg" alt="AppKit框架"></p>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>AppKit</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS-NSToolBar</title>
    <url>/2020/10/27/macOS-NSToolBar/</url>
    <content><![CDATA[<h1 id="NSToolBar"><a href="#NSToolBar" class="headerlink" title="NSToolBar"></a>NSToolBar</h1><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1 简述"></a>1 简述</h2><p>工具栏，用于管理窗口标题栏下方和应用程序的自定义内容上方的空间，以快速访问应用程序功能。</p>
<h2 id="2-源码注解"><a href="#2-源码注解" class="headerlink" title="2 源码注解"></a>2 源码注解</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSToolbar</span> : <span class="title">NSObject</span></span></span><br></pre></td></tr></table></figure>

<h3 id="2-1-初始化创建"><a href="#2-1-初始化创建" class="headerlink" title="2.1 初始化创建"></a>2.1 <strong>初始化创建</strong></h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)initWithIdentifier:(<span class="built_in">NSToolbarIdentifier</span>)identifier <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</span><br><span class="line">- (<span class="keyword">instancetype</span>)init API_AVAILABLE(macos(<span class="number">10.13</span>));</span><br></pre></td></tr></table></figure>

<h3 id="2-2-代理"><a href="#2-2-代理" class="headerlink" title="2.2 代理"></a>2.2 <strong>代理</strong></h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;<span class="built_in">NSToolbarDelegate</span>&gt; delegate;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">NSToolbarDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSToolbarItem</span> *)toolbar:(<span class="built_in">NSToolbar</span> *)toolbar itemForItemIdentifier:(<span class="built_in">NSToolbarItemIdentifier</span>)itemIdentifier willBeInsertedIntoToolbar:(<span class="built_in">BOOL</span>)flag;</span><br><span class="line"><span class="comment">// 返回默认情况下在工具栏中显示的项目的有序列表。</span></span><br><span class="line">- (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSToolbarItemIdentifier</span>&gt; *)toolbarDefaultItemIdentifiers:(<span class="built_in">NSToolbar</span> *)toolbar;</span><br><span class="line"><span class="comment">// 按标识符返回所有允许项的列表。</span></span><br><span class="line">- (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSToolbarItemIdentifier</span>&gt; *)toolbarAllowedItemIdentifiers:(<span class="built_in">NSToolbar</span> *)toolbar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSToolbarItemIdentifier</span>&gt; *)toolbarSelectableItemIdentifiers:(<span class="built_in">NSToolbar</span> *)toolbar;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)toolbarWillAddItem:(<span class="built_in">NSNotification</span> *)notification;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)toolbarDidRemoveItem:(<span class="built_in">NSNotification</span> *)notification;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-属性"><a href="#2-3-属性" class="headerlink" title="2.3 属性"></a>2.3 <strong>属性</strong></h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收者的标识符</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSToolbarIdentifier</span> identifier;</span><br><span class="line"><span class="comment">// 工具类显示模式</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSToolbarDisplayMode</span> displayMode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">NSToolbarDisplayMode</span>) &#123;</span><br><span class="line">    <span class="built_in">NSToolbarDisplayModeDefault</span>,</span><br><span class="line">    <span class="built_in">NSToolbarDisplayModeIconAndLabel</span>,</span><br><span class="line">    <span class="built_in">NSToolbarDisplayModeIconOnly</span>,</span><br><span class="line">    <span class="built_in">NSToolbarDisplayModeLabelOnly</span></span><br><span class="line">&#125; API_AVAILABLE(ios(<span class="number">13.0</span>));</span><br><span class="line"><span class="comment">// 是否显示工具栏和主窗口内容之间的分割线</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> showsBaselineSeparator;</span><br><span class="line"><span class="comment">// 是否允许用户修改工具栏</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> allowsUserCustomization;</span><br><span class="line"><span class="comment">// 是否为拓展添加item</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> allowsExtensionItems API_AVAILABLE(macos(<span class="number">10.10</span>)) API_UNAVAILABLE(ios);</span><br><span class="line"><span class="comment">// item数组</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;__kindof <span class="built_in">NSToolbarItem</span> *&gt; *items;</span><br><span class="line"><span class="comment">// 可见的item数组</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;__kindof <span class="built_in">NSToolbarItem</span> *&gt; *visibleItems;</span><br><span class="line"><span class="comment">// 尺寸模式</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSToolbarSizeMode</span> sizeMode API_UNAVAILABLE(ios);</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">NSToolbarSizeMode</span>) &#123;</span><br><span class="line">    <span class="built_in">NSToolbarSizeModeDefault</span>,</span><br><span class="line">    <span class="built_in">NSToolbarSizeModeRegular</span>,</span><br><span class="line">    <span class="built_in">NSToolbarSizeModeSmall</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-管理item"><a href="#2-4-管理item" class="headerlink" title="2.4 管理item"></a>2.4 <strong>管理item</strong></h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加指定的item到索引处</span></span><br><span class="line">- (<span class="keyword">void</span>)insertItemWithItemIdentifier:(<span class="built_in">NSToolbarItemIdentifier</span>)itemIdentifier atIndex:(<span class="built_in">NSInteger</span>)index;</span><br><span class="line"><span class="comment">// 删除item</span></span><br><span class="line">- (<span class="keyword">void</span>)removeItemAtIndex:(<span class="built_in">NSInteger</span>)index;</span><br></pre></td></tr></table></figure>

<h2 id="3-重点解析"><a href="#3-重点解析" class="headerlink" title="3 重点解析"></a>3 重点解析</h2><h3 id="3-1-sizeMode"><a href="#3-1-sizeMode" class="headerlink" title="3.1 sizeMode"></a>3.1 <strong>sizeMode</strong></h3><p>设置工具栏图标大小</p>
<ul>
<li>NSToolbarSizeModeDefault // 默认大小</li>
<li>NSToolbarSizeModeRegular // 常规尺寸 32*32像素</li>
<li>NSToolbarSizeModeSmall // 小尺寸24*24像素</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[toolBar setSizeMode:<span class="built_in">NSToolbarSizeModeSmall</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSToolbar</span> *toolBar = [[<span class="built_in">NSToolbar</span> alloc] initWithIdentifier:<span class="string">@&quot;toolBar&quot;</span>];</span><br><span class="line">    [<span class="keyword">self</span>.view.window setToolbar:toolBar];</span><br><span class="line">    <span class="keyword">switch</span> (toolBar.sizeMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSToolbarSizeModeDefault</span>:</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSToolbarSizeModeRegular</span>:</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSToolbarSizeModeSmall</span>:</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-displayMode"><a href="#3-2-displayMode" class="headerlink" title="3.2 displayMode"></a>3.2 <strong>displayMode</strong></h3><p>设置工具栏显示模式</p>
<ul>
<li>NSToolbarDisplayModeDefault // 默认</li>
<li>NSToolbarDisplayModeIconAndLabel // 显示图标和标签</li>
<li>NSToolbarDisplayModeIconOnly // 只显示图标</li>
<li>NSToolbarDisplayModeLabelOnly // 只显示标签</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[toolBar setDisplayMode:<span class="built_in">NSToolbarDisplayModeIconOnly</span>];</span><br></pre></td></tr></table></figure>

<h2 id="4-示例"><a href="#4-示例" class="headerlink" title="4 示例"></a>4 示例</h2><h3 id="4-1-代码"><a href="#4-1-代码" class="headerlink" title="4.1 代码"></a>4.1 代码</h3><ol>
<li><p>创建继承<code>NSWindowController</code>的窗口控制器FSWindowCtl，并在Main.storyboard中修改为FSWindowCtl，如下图</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk62qi6od1j30t10gn0uj.jpg" alt="image-20201029120715448"></p>
</li>
<li><p>在<code>FSWindowCtl</code>添加<code>item</code>标识符</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSToolbarItemIdentifier</span> leftIdentifier = <span class="string">@&quot;left&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSToolbarItemIdentifier</span> rightIdentifier = <span class="string">@&quot;right&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>windowDidLoad</code>中添加并设置<code>NSToolBar</code></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)windowDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> windowDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSToolbar</span> *toolbar = [[<span class="built_in">NSToolbar</span> alloc] initWithIdentifier:<span class="string">@&quot;toolbar&quot;</span>];</span><br><span class="line">    [toolbar setSizeMode:<span class="built_in">NSToolbarSizeModeDefault</span>];</span><br><span class="line">    toolbar.allowsUserCustomization = <span class="literal">YES</span>;</span><br><span class="line">    toolbar.autosavesConfiguration = <span class="literal">YES</span>;</span><br><span class="line">    toolbar.displayMode = <span class="built_in">NSToolbarDisplayModeIconAndLabel</span>;</span><br><span class="line">    toolbar.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [<span class="keyword">self</span>.window setToolbar:toolbar];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现toolbar的代理方法</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">	<span class="meta">#<span class="meta-keyword">pragma</span> mark - NSToolbarDelegate</span></span><br><span class="line">- (<span class="built_in">NSToolbarItem</span> *)toolbar:(<span class="built_in">NSToolbar</span> *)toolbar itemForItemIdentifier:(<span class="built_in">NSToolbarItemIdentifier</span>)itemIdentifier willBeInsertedIntoToolbar:(<span class="built_in">BOOL</span>)flag &#123;</span><br><span class="line">    <span class="built_in">NSToolbarItem</span> *toolbarItem = [[<span class="built_in">NSToolbarItem</span> alloc] init];</span><br><span class="line">    <span class="keyword">if</span> ([itemIdentifier isEqualToString:leftIdentifier]) &#123;</span><br><span class="line">        toolbarItem = [<span class="keyword">self</span> setToolbarItem:<span class="string">@&quot;left&quot;</span></span><br><span class="line">                                     label:<span class="string">@&quot;left&quot;</span></span><br><span class="line">                              paletteLable:<span class="string">@&quot;left&quot;</span></span><br><span class="line">                                   toolTip:<span class="string">@&quot;left tip&quot;</span></span><br><span class="line">                                     image:<span class="string">@&quot;left&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([itemIdentifier isEqualToString:rightIdentifier]) &#123;</span><br><span class="line">        toolbarItem = [<span class="keyword">self</span> setToolbarItem:<span class="string">@&quot;right&quot;</span></span><br><span class="line">                                     label:<span class="string">@&quot;right&quot;</span></span><br><span class="line">                              paletteLable:<span class="string">@&quot;right&quot;</span></span><br><span class="line">                                   toolTip:<span class="string">@&quot;right tip&quot;</span></span><br><span class="line">                                     image:<span class="string">@&quot;right&quot;</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> toolbarItem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSToolbarItem</span> *)setToolbarItem:(<span class="built_in">NSString</span> *)identifier</span><br><span class="line">                            label:(<span class="built_in">NSString</span> *)label</span><br><span class="line">                     paletteLable:(<span class="built_in">NSString</span> *)paletteLable</span><br><span class="line">                          toolTip:(<span class="built_in">NSString</span> *)toolTip</span><br><span class="line">                            image:(<span class="built_in">NSString</span> *)image &#123;</span><br><span class="line">    <span class="built_in">NSToolbarItem</span> *toolbarItem = [[<span class="built_in">NSToolbarItem</span> alloc] initWithItemIdentifier:identifier];</span><br><span class="line">    toolbarItem.label = label;</span><br><span class="line">    toolbarItem.paletteLabel = paletteLable;</span><br><span class="line">    toolbarItem.toolTip = toolTip;</span><br><span class="line">    toolbarItem.target = <span class="keyword">self</span>;</span><br><span class="line">    [toolbarItem setAction:<span class="keyword">@selector</span>(itemClick:)];</span><br><span class="line">    toolbarItem.image = [<span class="built_in">NSImage</span> imageNamed:image];</span><br><span class="line">    <span class="keyword">return</span> toolbarItem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSToolbarItemIdentifier</span>&gt; *)toolbarDefaultItemIdentifiers:(<span class="built_in">NSToolbar</span> *)toolbar &#123;</span><br><span class="line">    <span class="keyword">return</span> @[<span class="built_in">NSToolbarSpaceItemIdentifier</span>,</span><br><span class="line">             leftIdentifier,</span><br><span class="line">             rightIdentifier,</span><br><span class="line">             <span class="built_in">NSToolbarSpaceItemIdentifier</span>,</span><br><span class="line">             <span class="built_in">NSToolbarShowColorsItemIdentifier</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSToolbarItemIdentifier</span>&gt; *)toolbarAllowedItemIdentifiers:(<span class="built_in">NSToolbar</span> *)toolbar &#123;</span><br><span class="line">    <span class="keyword">return</span> @[leftIdentifier,</span><br><span class="line">             rightIdentifier,</span><br><span class="line">             <span class="built_in">NSToolbarShowColorsItemIdentifier</span>,</span><br><span class="line">             <span class="built_in">NSToolbarSpaceItemIdentifier</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - Action</span></span><br><span class="line">- (<span class="keyword">void</span>)itemClick:(<span class="built_in">NSToolbarItem</span> *)item &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="4-2-storyboard"><a href="#4-2-storyboard" class="headerlink" title="4.2 storyboard"></a>4.2 storyboard</h3><p>直接在storyboard拖拽NSToolbarItem，并添加即可，不再详述。</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gk630gzcbqj30f40bddgj.jpg" alt="image-20201029121653274"></p>
<h2 id="5-自定义NSToolbarItem"><a href="#5-自定义NSToolbarItem" class="headerlink" title="5 自定义NSToolbarItem"></a>5 自定义NSToolbarItem</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">toolbarItem.view = 自定义的View </span><br><span class="line"><span class="comment">// 使用setView：如果您希望工具栏项使用标准以外的内容。请注意，默认情况下，许多set/get方法将通过转发到您设置的视图的调用来实现，如果视图响应它。另外，您的视图必须是可归档的（为了让工具栏复制您的项目并将其交给配置调色板）。</span></span><br></pre></td></tr></table></figure>

<hr>
<p><a href="https://github.com/ForgetSou/FSToolBarDemo">FSToolbarDemo</a></p>
]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>macOS</tag>
        <tag>AppKit</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS开发-NSImageView</title>
    <url>/2020/10/19/macOS%E5%BC%80%E5%8F%91-NSImageView/</url>
    <content><![CDATA[<h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h1><p><code>NSImageView</code>和iOS的<code>UIImageView</code>类似，只有添加手势时有些不一样。macOS中<code>NSImageView</code>没有<code>userInteractionEnabled</code>,不能添加gesture。</p>
<h1 id="二-示例"><a href="#二-示例" class="headerlink" title="二.示例"></a>二.示例</h1><p>要想给<code>NSImageView</code>添加手势有2种方式</p>
<ul>
<li><p>需要创建一个子类集成<code>NSImageView</code>，重写mouseDown、mouseUp等方法。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  FSImageView.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Cocoa/Cocoa.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FSImageView</span> : <span class="title">NSImageView</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="keyword">void</span>(^mouseDownBlock)(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="keyword">void</span>(^mouseUpBlock)(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  FSImageView.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;FSImageView.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FSImageView</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">NSRect</span>)dirtyRect &#123;</span><br><span class="line">    [<span class="keyword">super</span> drawRect:dirtyRect];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Drawing code here.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)mouseDown:(<span class="built_in">NSEvent</span> *)event &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.mouseDownBlock) &#123;</span><br><span class="line">        <span class="keyword">self</span>.mouseDownBlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)mouseUp:(<span class="built_in">NSEvent</span> *)event &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.mouseUpBlock) &#123;</span><br><span class="line">        <span class="keyword">self</span>.mouseUpBlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line">FSImageView *imgView = [[FSImageView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">200</span>, <span class="number">200</span>)];</span><br><span class="line">imgView.image = [<span class="built_in">NSImage</span> imageNamed:<span class="string">@&quot;avator&quot;</span>];</span><br><span class="line"><span class="comment">// 设置背景色</span></span><br><span class="line">imgView.wantsLayer = <span class="literal">YES</span>;</span><br><span class="line">imgView.layer.backgroundColor = <span class="built_in">NSColor</span>.redColor.CGColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置圆角</span></span><br><span class="line">imgView.layer.cornerRadius = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 设置边框</span></span><br><span class="line">imgView.layer.borderColor = <span class="built_in">NSColor</span>.redColor.CGColor;</span><br><span class="line">imgView.layer.borderWidth = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加手势</span></span><br><span class="line">imgView.mouseDownBlock = ^&#123;</span><br><span class="line">	<span class="comment">// 按下</span></span><br><span class="line">&#125;;</span><br><span class="line">imgView.mouseUpBlock = ^&#123;</span><br><span class="line">	<span class="comment">// 抬起</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[<span class="keyword">self</span>.view addSubview:imgView];</span><br></pre></td></tr></table></figure>
</li>
<li><p>为<code>NSImageView</code>添加手势NSGestureRecognizer</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NSGestureRecognizer的子类来确定使用哪种手势</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">NSClickGestureRecognizer 					单点</span></span><br><span class="line"><span class="comment">NSPanGestureRecognizer						拖动</span></span><br><span class="line"><span class="comment">NSMagnificationGestureRecognizer	放大</span></span><br><span class="line"><span class="comment">NSPressGestureRecognizer					按压</span></span><br><span class="line"><span class="comment">NSRotationGestureRecognizer				旋转</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">FSImageView *imgView = [[FSImageView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">200</span>, <span class="number">200</span>)];</span><br><span class="line">imgView.image = [<span class="built_in">NSImage</span> imageNamed:<span class="string">@&quot;avator&quot;</span>];</span><br><span class="line"><span class="comment">// 设置背景色</span></span><br><span class="line">imgView.wantsLayer = <span class="literal">YES</span>;</span><br><span class="line">imgView.layer.backgroundColor = <span class="built_in">NSColor</span>.redColor.CGColor;</span><br><span class="line"><span class="comment">// 设置圆角</span></span><br><span class="line">imgView.layer.cornerRadius = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 设置边框</span></span><br><span class="line">imgView.layer.borderColor = <span class="built_in">NSColor</span>.redColor.CGColor;</span><br><span class="line">imgView.layer.borderWidth = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 添加手势</span></span><br><span class="line"><span class="built_in">NSClickGestureRecognizer</span> *gesture = [[<span class="built_in">NSClickGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(imageViewClick:)];</span><br><span class="line">[view addGestureRecognizer:gesture];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:imgView];</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)imageViewClick:(<span class="built_in">NSGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;touch view&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>macOS</tag>
        <tag>AppKit</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS开发-NSOpenPanel</title>
    <url>/2020/11/05/macOS%E5%BC%80%E5%8F%91-NSOpenPanel/</url>
    <content><![CDATA[<h1 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h1><p><strong>打开面板</strong>，提示用户选择要打开的文件。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSOpenPanel</span> : <span class="title">NSSavePanel</span></span></span><br></pre></td></tr></table></figure>

<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gke553cxmxj318e0owjyl.jpg" alt="image-20201105113305295" style="zoom:50%;" />

<blockquote>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a><a href="https://developer.apple.com/documentation/appkit/nsopenpanel?language=objc">Overview</a></h2><p>Apps use the Open panel as a convenient way to query the user for the name of a file to open. In macOS 10.15 and later, the system always draws Open panels in a separate process, regardless of whether the app is sandboxed. When the user chooses a file to open, macOS adds that file to the app’s sandbox. Prior to macOS 10.15, the system drew the panels in a separate process only for sandboxed apps.</p>
<p>应用程序使用“打开”面板作为方便的方法来查询用户要打开的文件的名称。在macOS 10.15及更高版本中，系统始终在单独的过程中绘制“打开”面板，而不管该应用程序是否被沙箱化。当用户选择要打开的文件时，macOS将该文件添加到应用的沙箱中。在macOS 10.15之前，系统仅在沙盒应用程序的单独过程中绘制面板。</p>
</blockquote>
<h1 id="二-官方属性方法"><a href="#二-官方属性方法" class="headerlink" title="二. 官方属性方法"></a>二. 官方属性方法</h1><h2 id="1-创建打开面板"><a href="#1-创建打开面板" class="headerlink" title="1. 创建打开面板"></a>1. 创建打开面板</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSOpenPanel</span> *)openPanel; <span class="comment">// 创建NSOpenPanel实例对象，但是这个类不是单例。</span></span><br></pre></td></tr></table></figure>

<h2 id="2-配置打开面板"><a href="#2-配置打开面板" class="headerlink" title="2. 配置打开面板"></a>2. 配置打开面板</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否解析别名</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> resolvesAliases;</span><br><span class="line"><span class="comment">// 是否可以选择目录</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> canChooseDirectories;</span><br><span class="line"><span class="comment">// 是否可以选择多个文件或目录</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> allowsMultipleSelection;</span><br><span class="line"><span class="comment">// 是否选择文件</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> canChooseFiles;</span><br><span class="line"><span class="comment">// 附件视图是否可见</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isAccessoryViewDisclosed) <span class="built_in">BOOL</span> accessoryViewDisclosed API_AVAILABLE(macos(<span class="number">10.11</span>)); </span><br></pre></td></tr></table></figure>

<h2 id="3-iCloud"><a href="#3-iCloud" class="headerlink" title="3. iCloud"></a>3. iCloud</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指示面板如何响应具有冲突版本的iCloud文档</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> canResolveUbiquitousConflicts API_AVAILABLE(macos(<span class="number">10.10</span>));</span><br><span class="line"><span class="comment">// 指示面板如何响应未完全本地下载的iCloud文档</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> canDownloadUbiquitousContents API_AVAILABLE(macos(<span class="number">10.10</span>));</span><br></pre></td></tr></table></figure>

<h2 id="4-访问用户选择"><a href="#4-访问用户选择" class="headerlink" title="4. 访问用户选择"></a>4. 访问用户选择</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// URL数组，每个URL包含所选文件或目录的完整指定位置。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSURL</span> *&gt; *URLs;</span><br></pre></td></tr></table></figure>

<h1 id="三-父类NSSavePanel保存面板"><a href="#三-父类NSSavePanel保存面板" class="headerlink" title="三. 父类NSSavePanel保存面板"></a>三. 父类NSSavePanel保存面板</h1><h2 id="1-创建保存面板"><a href="#1-创建保存面板" class="headerlink" title="1. 创建保存面板"></a>1. 创建保存面板</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSSavePanel</span> *)savePanel; <span class="comment">// 创建NSSavePanel实例对象，但是这个类不是单例。</span></span><br></pre></td></tr></table></figure>

<h2 id="2-响应交互"><a href="#2-响应交互" class="headerlink" title="2. 响应交互"></a>2. 响应交互</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;<span class="built_in">NSOpenSavePanelDelegate</span>&gt; delegate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否应在“打开”面板中启用指定的URL</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)panel:(<span class="keyword">id</span>)sender shouldEnableURL:(<span class="built_in">NSURL</span> *)url API_AVAILABLE(macos(<span class="number">10.6</span>));</span><br><span class="line"><span class="comment">// 用于保存和打开文件的URL验证。</span></span><br><span class="line"><span class="comment">//    NSSavePanel：当用户选择“保存”按钮时，保存面板会调用该方法一次。用户打算将文件保存在“ url”处。如果&#x27;url&#x27;是要保存的有效位置，则返回YES。请注意，除非用户决定覆盖现有项目，否则“ url”中的项目可能实际上还不存在。返回“否”，并在“ outError”中填写用户可显示的错误消息，以说明“ URL”无效的原因。如果错误提供了恢复选项，并且恢复成功，则面板将尝试再次关闭。</span></span><br><span class="line"><span class="comment">//    NSOpenPanel：当用户选择“打开”按钮时，将为每个选定的文件名（或目录）调用一次该方法。如果可以打开“ URL”，则返回YES。返回NO并在用户显示的消息中填写“ outError”，以说明为什么“ url”对于打开无效。如果对选定项目的处理需要很长时间，则可以在panel：shouldEnableURL：上使用此方法。如果错误提供了恢复选项，并且恢复成功，则面板将尝试再次关闭。</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)panel:(<span class="keyword">id</span>)sender validateURL:(<span class="built_in">NSURL</span> *)url error:(<span class="built_in">NSError</span> **)outError API_AVAILABLE(macos(<span class="number">10.6</span>));</span><br><span class="line"><span class="comment">// 用户将所选目录更改为位于指定URL的目录。</span></span><br><span class="line">- (<span class="keyword">void</span>)panel:(<span class="keyword">id</span>)sender didChangeToDirectoryURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)url API_AVAILABLE(macos(<span class="number">10.6</span>));</span><br><span class="line"><span class="comment">// 通过在“保存”面板中单击“保存”，告知代表用户用户已确认文件名选择。</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)panel:(<span class="keyword">id</span>)sender userEnteredFilename:(<span class="built_in">NSString</span> *)filename confirmed:(<span class="built_in">BOOL</span>)okFlag;</span><br><span class="line"><span class="comment">// “保存”面板即将展开或折叠，因为用户单击了显示或隐藏文件浏览器的显示三角形。</span></span><br><span class="line">- (<span class="keyword">void</span>)panel:(<span class="keyword">id</span>)sender willExpand:(<span class="built_in">BOOL</span>)expanding;</span><br><span class="line"><span class="comment">// 用户在指定的“保存”面板中更改了选择。</span></span><br><span class="line">- (<span class="keyword">void</span>)panelSelectionDidChange:(<span class="keyword">nullable</span> <span class="keyword">id</span>)sender;</span><br></pre></td></tr></table></figure>

<h2 id="3-显示面板"><a href="#3-显示面板" class="headerlink" title="3. 显示面板"></a>3. 显示面板</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将面板显示为指定窗口的模态面板</span></span><br><span class="line">- (<span class="keyword">void</span>)beginSheetModalForWindow:(<span class="built_in">NSWindow</span> *)window completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSModalResponse</span> result))handler API_AVAILABLE(macos(<span class="number">10.6</span>));</span><br><span class="line"><span class="comment">// 将面板显示为无模式窗口。</span></span><br><span class="line">- (<span class="keyword">void</span>)beginWithCompletionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSModalResponse</span> result))handler API_AVAILABLE(macos(<span class="number">10.6</span>));</span><br><span class="line"><span class="comment">// 显示面板并以当前工作（或上次选择的）目录作为默认起点开始其事件循环。</span></span><br><span class="line">- (<span class="built_in">NSModalResponse</span>)runModal;</span><br><span class="line"><span class="comment">// 验证并重新加载面板中可见的浏览器列。</span></span><br></pre></td></tr></table></figure>

<h2 id="4-获取所选URL"><a href="#4-获取所选URL" class="headerlink" title="4. 获取所选URL"></a>4. 获取所选URL</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 完整指定位置</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSURL</span> *URL;</span><br></pre></td></tr></table></figure>

<h2 id="5-配置外观"><a href="#5-配置外观" class="headerlink" title="5. 配置外观"></a>5. 配置外观</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 面板标题</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">null_resettable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *title;</span><br><span class="line"><span class="comment">// 默认按钮中的文本</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">null_resettable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *prompt;</span><br><span class="line"><span class="comment">// 消息文本</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">null_resettable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *message;</span><br><span class="line"><span class="comment">// 标签文本显示在文件名文本字段的前面。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">null_resettable</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *nameFieldLabel;</span><br><span class="line"><span class="comment">// 当前显示在名称字段中的用户可编辑文件名。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *nameFieldStringValue API_AVAILABLE(macos(<span class="number">10.6</span>));</span><br><span class="line"><span class="comment">// 面板显示的当前目录</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSURL</span> *directoryURL API_AVAILABLE(macos(<span class="number">10.6</span>));</span><br><span class="line"><span class="comment">// 自定义附件视图</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSView</span> *accessoryView;</span><br><span class="line"><span class="comment">// 是否显示标签字段</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> showsTagField API_AVAILABLE(macos(<span class="number">10.9</span>));</span><br><span class="line"><span class="comment">// 标签名称</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *tagNames API_AVAILABLE(macos(<span class="number">10.9</span>));</span><br></pre></td></tr></table></figure>

<h2 id="6-面板行为"><a href="#6-面板行为" class="headerlink" title="6. 面板行为"></a>6. 面板行为</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否显示创建目录的UI</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> canCreateDirectories;</span><br><span class="line"><span class="comment">// 是否显示文件拓展名的UI</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> canSelectHiddenExtension;</span><br><span class="line"><span class="comment">// 是否显示隐藏文件</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> showsHiddenFiles;</span><br><span class="line"><span class="comment">// 是否隐藏指示和拓展复选框</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isExtensionHidden) <span class="built_in">BOOL</span> extensionHidden;</span><br><span class="line"><span class="comment">// 是否拓展面板</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isExpanded, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> expanded;</span><br><span class="line"><span class="comment">// 是否允许用户保存文件名扩展名不在允许的类型列表中的文件。</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> allowsOtherFileTypes;</span><br><span class="line"><span class="comment">// 是否将文件包显示为目录。</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> treatsFilePackagesAsDirectories;</span><br></pre></td></tr></table></figure>

<h2 id="7-Action"><a href="#7-Action" class="headerlink" title="7. Action"></a>7. Action</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)ok:(<span class="keyword">nullable</span> <span class="keyword">id</span>)sender; <span class="comment">// 点击确定</span></span><br><span class="line">- (<span class="keyword">IBAction</span>)cancel:(<span class="keyword">nullable</span> <span class="keyword">id</span>)sender; <span class="comment">// 点击取消</span></span><br></pre></td></tr></table></figure>

<h1 id="四-简单示例"><a href="#四-简单示例" class="headerlink" title="四. 简单示例"></a>四. 简单示例</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">IBAction</span>)openPanelClick:(<span class="built_in">NSButton</span> *)sender &#123;</span><br><span class="line">    <span class="built_in">NSOpenPanel</span> *openPanel = [<span class="built_in">NSOpenPanel</span> openPanel];</span><br><span class="line">    openPanel.prompt = <span class="string">@&quot;选择&quot;</span>;</span><br><span class="line">    openPanel.title = <span class="string">@&quot;NSSplitView Demo&quot;</span>;</span><br><span class="line">    openPanel.message = <span class="string">@&quot;你是谁的谁&quot;</span>;</span><br><span class="line">    openPanel.canChooseFiles = <span class="literal">YES</span>;</span><br><span class="line">    openPanel.canChooseDirectories = <span class="literal">YES</span>;</span><br><span class="line">    [openPanel beginSheetModalForWindow:<span class="keyword">self</span>.view.window completionHandler:^(<span class="built_in">NSModalResponse</span> result) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="built_in">NSModalResponseOK</span>) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, openPanel.URL.path);</span><br><span class="line">        &#125;</span><br><span class="line">        sender.state = <span class="built_in">NSControlStateValueOff</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>macOS</tag>
        <tag>AppKit</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS开发-NSSplitView</title>
    <url>/2020/11/03/macOS%E5%BC%80%E5%8F%91-NSSplitView/</url>
    <content><![CDATA[<h1 id="一-简述"><a href="#一-简述" class="headerlink" title="一. 简述"></a>一. 简述</h1><p><strong>拆分视图</strong>，在水平或垂直运行的线性堆栈中排列两个或多个视图的视图。</p>
<p>默认为水平方向</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSSplitView</span> : <span class="title">NSView</span></span></span><br></pre></td></tr></table></figure>

<h1 id="二-官方属性方法"><a href="#二-官方属性方法" class="headerlink" title="二. 官方属性方法"></a>二. 官方属性方法</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代理</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;<span class="built_in">NSSplitViewDelegate</span>&gt; delegate;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)splitView:(<span class="built_in">NSSplitView</span> *)splitView canCollapseSubview:(<span class="built_in">NSView</span> *)subview; <span class="comment">// 是否允许用户可以折叠和展开指定子视图</span></span><br><span class="line">- (<span class="keyword">void</span>)splitView:(<span class="built_in">NSSplitView</span> *)splitView resizeSubviewsWithOldSize:(<span class="built_in">NSSize</span>)oldSize; <span class="comment">// 子视图按自定义大小</span></span><br><span class="line">- (<span class="keyword">void</span>)splitViewWillResizeSubviews:(<span class="built_in">NSNotification</span> *)notification;<span class="comment">// 即将调整子视图大小时的通知委托</span></span><br><span class="line">- (<span class="keyword">void</span>)splitViewDidResizeSubviews:(<span class="built_in">NSNotification</span> *)notification;<span class="comment">// 调整子视图大小时的通知委托</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)splitView:(<span class="built_in">NSSplitView</span> *)splitView canCollapseSubview:(<span class="built_in">NSView</span> *)subview;<span class="comment">// 是否调整子视图的大小</span></span><br><span class="line"> </span><br><span class="line">- (<span class="built_in">CGFloat</span>)splitView:(<span class="built_in">NSSplitView</span> *)splitView constrainMinCoordinate:(<span class="built_in">CGFloat</span>)proposedMinimumPosition ofSubviewAt:(<span class="built_in">NSInteger</span>)dividerIndex; <span class="comment">// 允许委托人在用户拖动分隔线时限制其最小坐标限制。</span></span><br><span class="line">- (<span class="built_in">CGFloat</span>)splitView:(<span class="built_in">NSSplitView</span> *)splitView constrainMaxCoordinate:(<span class="built_in">CGFloat</span>)proposedMaximumPosition ofSubviewAt:(<span class="built_in">NSInteger</span>)dividerIndex; <span class="comment">// 允许委托人在用户拖动分隔线时限制其最小坐标限制。</span></span><br><span class="line">- (<span class="built_in">CGFloat</span>)splitView:(<span class="built_in">NSSplitView</span> *)splitView constrainSplitPosition:(<span class="built_in">CGFloat</span>)proposedPosition ofSubviewAt:(<span class="built_in">NSInteger</span>)dividerIndex; <span class="comment">// 允许代表将分隔线限制在某些位置。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子视图</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> arrangesAllSubviews API_AVAILABLE(macos(<span class="number">10.11</span>)); <span class="comment">// 是否将所有子视图排列为拆分窗格</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;__kindof <span class="built_in">NSView</span> *&gt; *arrangedSubviews API_AVAILABLE(macos(<span class="number">10.11</span>)); <span class="comment">// 拆分视图作为拆分窗格排列的视图数组</span></span><br><span class="line">- (<span class="keyword">void</span>)addArrangedSubview:(<span class="built_in">NSView</span> *)view API_AVAILABLE(macos(<span class="number">10.11</span>));<span class="comment">// 添加拆分窗格</span></span><br><span class="line">- (<span class="keyword">void</span>)insertArrangedSubview:(<span class="built_in">NSView</span> *)view atIndex:(<span class="built_in">NSInteger</span>)index API_AVAILABLE(macos(<span class="number">10.11</span>)); <span class="comment">// 将拆分窗格插入到指定的索引处</span></span><br><span class="line">- (<span class="keyword">void</span>)removeArrangedSubview:(<span class="built_in">NSView</span> *)view API_AVAILABLE(macos(<span class="number">10.11</span>));<span class="comment">// 删除已排列的拆分窗格</span></span><br><span class="line">- (<span class="keyword">void</span>)adjustSubviews; <span class="comment">// 调整子视图大小</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isSubviewCollapsed:(<span class="built_in">NSView</span> *)subview;<span class="comment">// 返回是否处于折叠状态</span></span><br><span class="line">- (<span class="built_in">NSLayoutPriority</span>)holdingPriorityForSubviewAtIndex:(<span class="built_in">NSInteger</span>)subviewIndex API_AVAILABLE(macos(<span class="number">10.8</span>)); <span class="comment">// 调整子视图大小时，返回宽度或高度的优先级</span></span><br><span class="line">- (<span class="keyword">void</span>)setHoldingPriority:(<span class="built_in">NSLayoutPriority</span>)priority forSubviewAtIndex:(<span class="built_in">NSInteger</span>)subviewIndex API_AVAILABLE(macos(<span class="number">10.8</span>)); <span class="comment">// 设置子视图优先级</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSSplitViewAutosaveName</span> autosaveName API_AVAILABLE(macos(<span class="number">10.5</span>)); <span class="comment">// 系统自动保存拆分视图的分隔器配置时使用的名称。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拆分视图方向</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isVertical) <span class="built_in">BOOL</span> vertical; <span class="comment">// 确定拆分视图分割线方向</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSSplitViewDividerStyle</span> dividerStyle API_AVAILABLE(macos(<span class="number">10.5</span>)); <span class="comment">// 分割线样式,如下</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">NSSplitViewDividerStyle</span>) &#123;</span><br><span class="line">    <span class="built_in">NSSplitViewDividerStyleThick</span> = <span class="number">1</span>,</span><br><span class="line">    <span class="built_in">NSSplitViewDividerStyleThin</span> = <span class="number">2</span>,</span><br><span class="line">    <span class="built_in">NSSplitViewDividerStylePaneSplitter</span> API_AVAILABLE(macos(<span class="number">10.6</span>)) = <span class="number">3</span>,</span><br><span class="line">&#125; API_AVAILABLE(macos(<span class="number">10.5</span>));</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSColor</span> *dividerColor API_AVAILABLE(macos(<span class="number">10.5</span>)); <span class="comment">// 分割线颜色</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">CGFloat</span> dividerThickness; <span class="comment">// 分割线厚度</span></span><br><span class="line">- (<span class="keyword">void</span>)drawDividerInRect:(<span class="built_in">NSRect</span>)rect; <span class="comment">// 绘制分割线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制拆分位置&lt;左右(或上下)可滑动区域&gt;</span></span><br><span class="line">- (<span class="built_in">CGFloat</span>)minPossiblePositionOfDividerAtIndex:(<span class="built_in">NSInteger</span>)dividerIndex API_AVAILABLE(macos(<span class="number">10.5</span>)); <span class="comment">// 索引处最小位置 </span></span><br><span class="line">- (<span class="built_in">CGFloat</span>)maxPossiblePositionOfDividerAtIndex:(<span class="built_in">NSInteger</span>)dividerIndex API_AVAILABLE(macos(<span class="number">10.5</span>)); <span class="comment">// 索引处最大位置</span></span><br><span class="line">- (<span class="keyword">void</span>)setPosition:(<span class="built_in">CGFloat</span>)position ofDividerAtIndex:(<span class="built_in">NSInteger</span>)dividerIndex API_AVAILABLE(macos(<span class="number">10.5</span>)); <span class="comment">// 设置分割线在指定索引处的位置</span></span><br></pre></td></tr></table></figure>

<h1 id="三-示例-lt-代码-gt"><a href="#三-示例-lt-代码-gt" class="headerlink" title="三. 示例&lt;代码&gt;"></a>三. 示例&lt;代码&gt;</h1><p>使用代码创建<code>NSSplitView</code>，想要用<code>Storyboard</code>创建的自行研究，比较简单</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSSplitView</span> *)splitView &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_splitView) &#123;</span><br><span class="line">        _splitView = [[<span class="built_in">NSSplitView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">100</span>, <span class="number">600</span>, <span class="number">400</span>)];</span><br><span class="line">        _splitView.delegate = <span class="keyword">self</span>;</span><br><span class="line">        _splitView.vertical = <span class="literal">YES</span>;</span><br><span class="line">        _splitView.dividerStyle = <span class="built_in">NSSplitViewDividerStylePaneSplitter</span>;</span><br><span class="line">        _splitView.wantsLayer = <span class="literal">YES</span>;</span><br><span class="line">        _splitView.layer.backgroundColor = <span class="built_in">NSColor</span>.whiteColor.CGColor;</span><br><span class="line">        _splitView.toolTip = <span class="string">@&quot;代码创建SplitView&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _splitView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// Do view setup here.</span></span><br><span class="line">    <span class="keyword">self</span>.view.wantsLayer = <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">self</span>.view.layer.backgroundColor = <span class="built_in">NSColor</span>.lightGrayColor.CGColor;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span> addSplitView];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addSplitView &#123;</span><br><span class="line">    <span class="built_in">NSView</span> *leftView = [[<span class="built_in">NSView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">400</span>)];</span><br><span class="line">    [<span class="keyword">self</span>.splitView addArrangedSubview:leftView];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSView</span> *rightView = [[<span class="built_in">NSView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">400</span>)];</span><br><span class="line">    [<span class="keyword">self</span>.splitView addArrangedSubview:rightView];</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.splitView];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)splitView:(<span class="built_in">NSSplitView</span> *)splitView constrainMinCoordinate:(<span class="built_in">CGFloat</span>)proposedMinimumPosition ofSubviewAt:(<span class="built_in">NSInteger</span>)dividerIndex &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)splitView:(<span class="built_in">NSSplitView</span> *)splitView constrainMaxCoordinate:(<span class="built_in">CGFloat</span>)proposedMaximumPosition ofSubviewAt:(<span class="built_in">NSInteger</span>)dividerIndex &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 能否折叠子视图</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)splitView:(<span class="built_in">NSSplitView</span> *)splitView canCollapseSubview:(<span class="built_in">NSView</span> *)subview &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>macOS</tag>
        <tag>AppKit</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS开发-NSTableView</title>
    <url>/2020/10/22/macOS%E5%BC%80%E5%8F%91-NSTableView/</url>
    <content><![CDATA[<h1 id="NSTableView"><a href="#NSTableView" class="headerlink" title="NSTableView"></a>NSTableView</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>​    一组相关记录，显示在代表单个记录的行和代表这些记录的属性的列中。</p>
<blockquote>
<p>参考</p>
<p><a href="https://developer.apple.com/documentation/appkit/nstableview?language=objc">官方文档</a></p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSTableView</span> : <span class="title">NSControl</span> &lt;<span class="title">NSUserInterfaceValidations</span>, <span class="title">NSTextViewDelegate</span>, <span class="title">NSDraggingSource</span>, <span class="title">NSAccessibilityTable</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><h3 id="1-1-基础创建"><a href="#1-1-基础创建" class="headerlink" title="1.1 基础创建"></a>1.1 基础创建</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  ZDMacOSDemo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by forget on 2020/10/19.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">NSTableViewDelegate</span>, <span class="title">NSTableViewDataSource</span>&gt;// 系统</span></span><br><span class="line">  </span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">NSRect</span>)frameRect <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)coder <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> &lt;<span class="built_in">NSTableViewDataSource</span>&gt; dataSource;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> &lt;<span class="built_in">NSTableViewDelegate</span>&gt; delegate;</span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">NSTableViewDelegate</span>, <span class="title">NSTableViewDataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建TableView</span></span><br><span class="line"><span class="built_in">NSTableView</span> *tableView = [[<span class="built_in">NSTableView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1000</span>, <span class="number">500</span>)];</span><br><span class="line"><span class="comment">// 隐藏header</span></span><br><span class="line">tableView.headerView = <span class="literal">nil</span>; </span><br><span class="line">tableView.dataSource = <span class="keyword">self</span>;</span><br><span class="line">tableView.delegate = <span class="keyword">self</span>;</span><br><span class="line">tableView.backgroundColor = <span class="built_in">NSColor</span>.blueColor;</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:tableView];</span><br></pre></td></tr></table></figure>

<p>此时运行并不显示在界面上，即使你设置了背景色，因为此时<code>NSTableView</code>的column=0。</p>
<p><code>storyboard</code>创建的 column != 0，直接拖拽的 <code>NSTableView</code>会生成一个 column 默认值。</p>
<h3 id="1-2-添加可滑动区域"><a href="#1-2-添加可滑动区域" class="headerlink" title="1.2 添加可滑动区域"></a>1.2 添加可滑动区域</h3><p>创建<code>NSScrollView</code>并将上面创建的<code>NSTableView</code>添加到ScrollView上</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSScrollView</span> *scrollView = [[<span class="built_in">NSScrollView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">150</span>, <span class="number">500</span>)];</span><br><span class="line">scrollView.hasVerticalScroller = <span class="literal">YES</span>;</span><br><span class="line"><span class="comment">// scrollView.autohidesScrollers = YES;</span></span><br><span class="line"><span class="comment">// scrollView.backgroundColor = NSColor.redColor;</span></span><br><span class="line">[<span class="keyword">self</span>.view addSubview:scrollView];</span><br><span class="line">scrollView.contentView.documentView = tableView;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-添加-cloumn"><a href="#1-3-添加-cloumn" class="headerlink" title="1.3 添加 cloumn"></a>1.3 添加 cloumn</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建Column并添加到tableView，可添加多个</span></span><br><span class="line"><span class="built_in">NSTableColumn</span> *column1 = [[<span class="built_in">NSTableColumn</span> alloc] initWithIdentifier:<span class="string">@&quot;nameID&quot;</span>];</span><br><span class="line">column1.width = scrollView.frame.size.width;</span><br><span class="line">column1.title = <span class="string">@&quot;name&quot;</span>;</span><br><span class="line">[tableView addTableColumn:column1];</span><br></pre></td></tr></table></figure>

<h3 id="1-4-常用代理方法"><a href="#1-4-常用代理方法" class="headerlink" title="1.4 常用代理方法"></a>1.4 常用代理方法</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 行数</span></span><br><span class="line">- (<span class="built_in">NSInteger</span>)numberOfRowsInTableView:(<span class="built_in">NSTableView</span> *)tableView &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.dataSource.count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定数据源</span></span><br><span class="line">- (<span class="keyword">id</span>)tableView:(<span class="built_in">NSTableView</span> *)tableView objectValueForTableColumn:(<span class="built_in">NSTableColumn</span> *)tableColumn row:(<span class="built_in">NSInteger</span>)row &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.dataSource[row];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 行高度</span></span><br><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">NSTableView</span> *)tableView heightOfRow:(<span class="built_in">NSInteger</span>)row &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 点击行cell的通知</span></span><br><span class="line">- (<span class="keyword">void</span>)tableViewSelectionDidChange:(<span class="built_in">NSNotification</span> *)notification &#123;</span><br><span class="line">    <span class="built_in">NSTableView</span> *tableView = notification.object;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 点击column，多用于排序等</span></span><br><span class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">NSTableView</span> *)tableView didClickTableColumn:(<span class="built_in">NSTableColumn</span> *)tableColumn &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 鼠标点击Column,效果同上didClickTableColumn</span></span><br><span class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">NSTableView</span> *)tableView mouseDownInHeaderOfTableColumn:(<span class="built_in">NSTableColumn</span> *)tableColumn &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cell将会出现，可用于修改样式</span></span><br><span class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">NSTableView</span> *)tableView willDisplayCell:(<span class="keyword">id</span>)cell forTableColumn:(<span class="built_in">NSTableColumn</span> *)tableColumn row:(<span class="built_in">NSInteger</span>)row &#123;</span><br><span class="line">    <span class="built_in">NSTextFieldCell</span> *tfCell = (<span class="built_in">NSTextFieldCell</span> *)cell;</span><br><span class="line">    tfCell.textColor = <span class="built_in">NSColor</span>.redColor;</span><br><span class="line">    tfCell.font = [<span class="built_in">NSFont</span> systemFontOfSize:<span class="number">18</span>];</span><br><span class="line">    tfCell.selectable = <span class="literal">NO</span>;</span><br><span class="line">    tfCell.editable = <span class="literal">NO</span>;</span><br><span class="line">    tfCell.alignment = <span class="built_in">NSTextAlignmentCenter</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 鼠标悬浮在cell上的提示内容</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)tableView:(<span class="built_in">NSTableView</span> *)tableView toolTipForCell:(<span class="built_in">NSCell</span> *)cell rect:(<span class="built_in">NSRectPointer</span>)rect tableColumn:(<span class="built_in">NSTableColumn</span> *)tableColumn row:(<span class="built_in">NSInteger</span>)row mouseLocation:(<span class="built_in">NSPoint</span>)mouseLocation &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.dataSource[row];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-其他业务需求"><a href="#1-5-其他业务需求" class="headerlink" title="1.5 其他业务需求"></a>1.5 其他业务需求</h3><ul>
<li><p><strong>拖拽</strong></p>
<p>一些文件管理器等都需要支持拖拽功能</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">NSTableView</span> *)tableView writeRowsWithIndexes:(<span class="built_in">NSIndexSet</span> *)rowIndexes toPasteboard:(<span class="built_in">NSPasteboard</span> *)pboard &#123;</span><br><span class="line">  <span class="comment">// 必须注册拖拽类型，也可以在创建table的时候注册</span></span><br><span class="line">    [tableView registerForDraggedTypes:@[<span class="string">@&quot;dataType&quot;</span>]];</span><br><span class="line">    <span class="built_in">NSData</span> *setData = [<span class="built_in">NSKeyedArchiver</span> archivedDataWithRootObject:rowIndexes requiringSecureCoding:<span class="literal">NO</span> error:<span class="literal">nil</span>];</span><br><span class="line">    [pboard declareTypes:@[<span class="string">@&quot;dataType&quot;</span>] owner:<span class="keyword">self</span>];</span><br><span class="line">    [pboard setData:setData forType:<span class="string">@&quot;dataType&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSDragOperation</span>)tableView:(<span class="built_in">NSTableView</span> *)tableView validateDrop:(<span class="keyword">id</span>&lt;<span class="built_in">NSDraggingInfo</span>&gt;)info proposedRow:(<span class="built_in">NSInteger</span>)row proposedDropOperation:(<span class="built_in">NSTableViewDropOperation</span>)dropOperation &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NSDragOperationEvery</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">NSTableView</span> *)aTableView acceptDrop:(<span class="keyword">id</span> &lt;<span class="built_in">NSDraggingInfo</span>&gt;)info</span><br><span class="line">          row:(<span class="built_in">NSInteger</span>)row dropOperation:(<span class="built_in">NSTableViewDropOperation</span>)operation &#123;</span><br><span class="line">    <span class="built_in">NSPasteboard</span>* pboard = [info draggingPasteboard];</span><br><span class="line">    <span class="built_in">NSData</span>* rowData = [pboard dataForType:<span class="string">@&quot;dataType&quot;</span>];</span><br><span class="line">    <span class="built_in">NSIndexSet</span>* rowIndexes = [<span class="built_in">NSKeyedUnarchiver</span> unarchivedObjectOfClass:[<span class="built_in">NSIndexSet</span> <span class="keyword">class</span>] fromData:rowData error:<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">NSInteger</span> dragRow = [rowIndexes firstIndex];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (dragRow &lt; row) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.dataSource insertObject:[<span class="keyword">self</span>.dataSource objectAtIndex:dragRow] atIndex:row];</span><br><span class="line">        [<span class="keyword">self</span>.dataSource removeObjectAtIndex:dragRow];</span><br><span class="line">        [<span class="keyword">self</span>.tableView noteNumberOfRowsChanged];</span><br><span class="line">        [<span class="keyword">self</span>.tableView reloadData];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="comment">// end if</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *zData = [<span class="keyword">self</span>.dataSource objectAtIndex:dragRow];</span><br><span class="line">    [<span class="keyword">self</span>.dataSource removeObjectAtIndex:dragRow];</span><br><span class="line">    [<span class="keyword">self</span>.dataSource insertObject:zData atIndex:row];</span><br><span class="line">    [<span class="keyword">self</span>.tableView noteNumberOfRowsChanged];</span><br><span class="line">    [<span class="keyword">self</span>.tableView reloadData];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>双击tableView</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[tableView setDoubleAction:<span class="keyword">@selector</span>(tableViewDoubleClick:)];</span><br><span class="line"><span class="comment">// 实现双击方法</span></span><br><span class="line">- (<span class="keyword">void</span>)tableViewDoubleClick:(<span class="built_in">NSTableView</span> *)sender &#123;</span><br><span class="line">    <span class="keyword">if</span> (sender.selectedRow &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        ZDDoc *doc = <span class="keyword">self</span>.dataSource[sender.selectedRow];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, doc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>点击cloumn排序</strong></p>
<p>一个cloumn只能添加一个排序属性</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.添加排序属性</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZDDoc</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSInteger</span> index;<span class="comment">// 进行排序的属性</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="comment">// 2.cloumn添加sortDescriptorPrototype</span></span><br><span class="line">column1.sortDescriptorPrototype = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@&quot;index&quot;</span> ascending:<span class="literal">NO</span>];</span><br><span class="line"><span class="comment">// 3.实现sortDescriptorsDidChange</span></span><br><span class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">NSTableView</span> *)tableView sortDescriptorsDidChange:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSSortDescriptor</span> *&gt; *)oldDescriptors &#123;</span><br><span class="line">    [<span class="keyword">self</span>.dataSource sortUsingDescriptors:tableView.sortDescriptors];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-xib实现"><a href="#3-xib实现" class="headerlink" title="3.xib实现"></a>3.xib实现</h2>]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>macOS</tag>
        <tag>AppKit</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS开发-NSTextField</title>
    <url>/2020/10/19/macOS%E5%BC%80%E5%8F%91-NSTextField/</url>
    <content><![CDATA[<h1 id="NSTextField-简介"><a href="#NSTextField-简介" class="headerlink" title="NSTextField 简介"></a>NSTextField 简介</h1><p><strong>输入框</strong>，主要用于用户输入文本，同 <code>iOS</code>里的<code>UITextField</code></p>
<p>在macOS开发环境下，没有像<code>iOS</code>里的<code>UILabel</code>一样定义、创建标签，此时可以使用<code>NSTextField</code>创建标签</p>
<h1 id="NSTextField-举例"><a href="#NSTextField-举例" class="headerlink" title="NSTextField 举例"></a>NSTextField 举例</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSTextField</span> *tf = [[<span class="built_in">NSTextField</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">100</span>)];</span><br><span class="line">    tf.toolTip = <span class="string">@&quot;10月16日，第二届中国互联网企业社会责任高峰论坛暨《2020中国互联网企业社会责任报告》（下称“报告”）发布会在京举办。&quot;</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *text = <span class="string">@&quot;10月16日，第二届中国互联网企业社会责任高峰论坛暨《2020中国互联网企业社会责任报告》（下称“报告”）发布会在京举办。报告由北京师范大学互联网发展研究院、互联网司法治理研究中心联合光明网、中国经济网、中国日报网、中国网、北师大中国教育与社会发展研究院权威发布，系统评价了中国互联网企业社会责任发展现状，为进一步强化社会责任意识，改进社会责任管理，更好地促进经济效益与社会效益的统一，实现企业和行业健康、有序地发展提供依据。&quot;</span>;</span><br><span class="line">    <span class="comment">// 中划线</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *middleAttributeDic = @&#123;<span class="built_in">NSStrikethroughStyleAttributeName</span> : @(<span class="built_in">NSUnderlineStyleSingle</span>)&#125;;</span><br><span class="line">    <span class="comment">/*!</span></span><br><span class="line"><span class="comment">     NSStrikethroughStyleAttributeName  // 中划线</span></span><br><span class="line"><span class="comment">     NSUnderlineStyleAttributeName      // 下划线</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">NSMutableAttributedString</span> *attributeStr = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:text attributes:middleAttributeDic];</span><br><span class="line">    </span><br><span class="line">    tf.attributedStringValue = attributeStr;</span><br><span class="line">    tf.placeholderString = <span class="string">@&quot;NSTextField-placeholdString&quot;</span>;</span><br><span class="line">    tf.backgroundColor = <span class="built_in">NSColor</span>.clearColor;</span><br><span class="line">    tf.textColor = <span class="built_in">NSColor</span>.whiteColor;</span><br><span class="line">    tf.bordered = <span class="literal">false</span>;</span><br><span class="line">    tf.editable = <span class="literal">false</span>;</span><br><span class="line">    tf.selectable = <span class="literal">true</span>;</span><br><span class="line">    tf.highlighted = <span class="literal">false</span>;</span><br><span class="line">	  tf.focusRingType = <span class="built_in">NSFocusRingTypeNone</span>;<span class="comment">// 去除周围蓝色或橙色框</span></span><br><span class="line">    tf.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [[tf cell] setUsesSingleLineMode:<span class="literal">false</span>];</span><br><span class="line">    [[tf cell] setTruncatesLastVisibleLine:<span class="literal">false</span>];</span><br><span class="line">    tf.font = [<span class="built_in">NSFont</span> systemFontOfSize:<span class="number">15</span>];</span><br><span class="line">    tf.alignment = <span class="built_in">NSTextAlignmentCenter</span>;</span><br><span class="line">    tf.maximumNumberOfLines = <span class="number">2</span>;</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:tf];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - NSTextFieldDelegate</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)textField:(<span class="built_in">NSTextField</span> *)textField textView:(<span class="built_in">NSTextView</span> *)textView shouldSelectCandidateAtIndex:(<span class="built_in">NSUInteger</span>)index &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span> *)textField:(<span class="built_in">NSTextField</span> *)textField textView:(<span class="built_in">NSTextView</span> *)textView candidatesForSelectedRange:(<span class="built_in">NSRange</span>)selectedRange &#123;</span><br><span class="line">    <span class="keyword">return</span> @[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span>&lt;<span class="built_in">NSTextCheckingResult</span> *&gt; *)textField:(<span class="built_in">NSTextField</span> *)textField textView:(<span class="built_in">NSTextView</span> *)textView candidates:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSTextCheckingResult</span> *&gt; *)candidates forSelectedRange:(<span class="built_in">NSRange</span>)selectedRange &#123;</span><br><span class="line">    <span class="keyword">return</span> @[];</span><br><span class="line">&#125;```</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>macOS</tag>
        <tag>AppKit</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS开发-NSView</title>
    <url>/2020/10/20/macOS%E5%BC%80%E5%8F%91-NSView/</url>
    <content><![CDATA[<h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h1><p><code>NSView</code>用于在应用程序中渲染、打印以及处理事件的基础容器，多数功能由AppKit自动调用。</p>
<p><code>NSView</code> 继承自<code>NSResponder</code></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSView</span> : <span class="title">NSResponder</span> &lt;<span class="title">NSAnimatablePropertyContainer</span>, <span class="title">NSUserInterfaceItemIdentification</span>, <span class="title">NSDraggingDestination</span>, <span class="title">NSAppearanceCustomization</span>, <span class="title">NSAccessibilityElement</span>, <span class="title">NSAccessibility</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通常我们不直接使用<code>NSView</code>，而是创建子类或派生对象实现我们的需求。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readonly</span>, <span class="keyword">assign</span>) <span class="built_in">NSWindow</span> *window; <span class="comment">// 返回NSWindow</span></span><br></pre></td></tr></table></figure>

<h1 id="二-核心API"><a href="#二-核心API" class="headerlink" title="二.核心API"></a>二.核心API</h1><h2 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="1.创建对象"></a>1.创建对象</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">NSRect</span>)frameRect <span class="built_in">NS_DESIGNATED_INITIALIZER</span>; <span class="comment">// 初始化对象</span></span><br><span class="line">- (<span class="keyword">void</span>)prepareForReuse API_AVAILABLE(macos(<span class="number">10.7</span>)); <span class="comment">// 重置对象</span></span><br></pre></td></tr></table></figure>

<h2 id="2-视图结构"><a href="#2-视图结构" class="headerlink" title="2.视图结构"></a>2.视图结构</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readonly</span>, <span class="keyword">assign</span>) <span class="built_in">NSWindow</span> *window;  <span class="comment">// 获取视图NSWindow对象</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readonly</span>, <span class="keyword">assign</span>) <span class="built_in">NSView</span> *superview; <span class="comment">// 获取父视图</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;__kindof <span class="built_in">NSView</span> *&gt; *subviews; <span class="comment">// 获取所有自视图</span></span><br><span class="line"><span class="comment">/*! 判定视图是否在其父视图的视图层中 */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)isDescendantOf:(<span class="built_in">NSView</span> *)view;</span><br><span class="line"><span class="comment">/*! 返回该视图和另一个指定视图共享的最接近的祖先 */</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSView</span> *)ancestorSharedWithView:(<span class="built_in">NSView</span> *)view;</span><br><span class="line"><span class="comment">/*! 视图最接近的不透明祖先 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readonly</span>, <span class="keyword">assign</span>) <span class="built_in">NSView</span> *opaqueAncestor;</span><br><span class="line"><span class="comment">/*! 添加子视图 */</span></span><br><span class="line">- (<span class="keyword">void</span>)addSubview:(<span class="built_in">NSView</span> *)view;</span><br><span class="line">- (<span class="keyword">void</span>)addSubview:(<span class="built_in">NSView</span> *)view positioned:(<span class="built_in">NSWindowOrderingMode</span>)place relativeTo:(<span class="keyword">nullable</span> <span class="built_in">NSView</span> *)otherView;</span><br><span class="line"><span class="comment">/*! 添加子视图后的回调，可以在子类中重写该方法，进行其他操作 */</span></span><br><span class="line">- (<span class="keyword">void</span>)didAddSubview:(<span class="built_in">NSView</span> *)subview;</span><br><span class="line"><span class="comment">/*! 从父视图中移除 */</span></span><br><span class="line">- (<span class="keyword">void</span>)removeFromSuperview;</span><br><span class="line"><span class="comment">/*! 子视图将会被移除 */</span></span><br><span class="line">- (<span class="keyword">void</span>)willRemoveSubview:(<span class="built_in">NSView</span> *)subview;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*! 替换子视图 */</span></span><br><span class="line">- (<span class="keyword">void</span>)replaceSubview:(<span class="built_in">NSView</span> *)oldView with:(<span class="built_in">NSView</span> *)newView;</span><br><span class="line"><span class="comment">/*! 使用比较器函数对子视图进行排序 */</span></span><br><span class="line">- (<span class="keyword">void</span>)sortSubviewsUsingFunction:(<span class="built_in">NSComparisonResult</span> (<span class="built_in">NS_NOESCAPE</span> *)(__kindof <span class="built_in">NSView</span> *, __kindof <span class="built_in">NSView</span> *,  <span class="keyword">void</span> * _Nullable))compare context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*! 通知视图正在将其添加到指定窗口对象的视图层级结构 */</span></span><br><span class="line">- (<span class="keyword">void</span>)viewWillMoveToWindow:(<span class="keyword">nullable</span> <span class="built_in">NSWindow</span> *)newWindow;</span><br><span class="line"><span class="comment">/*! 通知视图已经将其添加到视图结构上 */</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidMoveToWindow;</span><br><span class="line"><span class="comment">/*! 通知视图正在将其添加到父视图上 */</span></span><br><span class="line">- (<span class="keyword">void</span>)viewWillMoveToSuperview:(<span class="keyword">nullable</span> <span class="built_in">NSView</span> *)newSuperview;</span><br><span class="line"><span class="comment">/*! 通知父视图已经做更改 */</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidMoveToSuperview;</span><br></pre></td></tr></table></figure>

<h2 id="3-frame-amp-bounds"><a href="#3-frame-amp-bounds" class="headerlink" title="3.frame &amp; bounds"></a>3.frame &amp; bounds</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setFrameOrigin:(<span class="built_in">NSPoint</span>)newOrigin;</span><br><span class="line">- (<span class="keyword">void</span>)setFrameSize:(<span class="built_in">NSSize</span>)newSize;</span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSRect</span> frame;</span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">CGFloat</span> frameRotation;</span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">CGFloat</span> frameCenterRotation API_AVAILABLE(macos(<span class="number">10.5</span>));</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setBoundsOrigin:(<span class="built_in">NSPoint</span>)newOrigin;</span><br><span class="line">- (<span class="keyword">void</span>)setBoundsSize:(<span class="built_in">NSSize</span>)newSize;</span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">CGFloat</span> boundsRotation;</span><br><span class="line">- (<span class="keyword">void</span>)translateOriginToPoint:(<span class="built_in">NSPoint</span>)translation;</span><br><span class="line">- (<span class="keyword">void</span>)scaleUnitSquareToSize:(<span class="built_in">NSSize</span>)newUnitSize;</span><br><span class="line">- (<span class="keyword">void</span>)rotateByAngle:(<span class="built_in">CGFloat</span>)angle;</span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSRect</span> bounds;</span><br></pre></td></tr></table></figure>

<h1 id="3-简单示例"><a href="#3-简单示例" class="headerlink" title="3.简单示例"></a>3.简单示例</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSView</span> *view = [[<span class="built_in">NSView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">200</span>, <span class="number">200</span>)];</span><br><span class="line">[view prepareForReuse];</span><br><span class="line"><span class="comment">// 背景色</span></span><br><span class="line">view.wantsLayer = <span class="literal">YES</span>;</span><br><span class="line">view.layer.backgroundColor = <span class="built_in">NSColor</span>.redColor.CGColor;</span><br><span class="line"><span class="comment">// 圆角</span></span><br><span class="line">view.layer.cornerRadius = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 边框</span></span><br><span class="line">view.layer.borderColor = <span class="built_in">NSColor</span>.greenColor.CGColor;</span><br><span class="line">view.layer.borderWidth = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">NSClickGestureRecognizer</span> *gesture = [[<span class="built_in">NSClickGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(viewClick:)];</span><br><span class="line">[view addGestureRecognizer:gesture];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:view];</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewClick:(<span class="built_in">NSGestureRecognizer</span> *)gesture &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;touch view&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>macOS</tag>
        <tag>AppKit</tag>
      </tags>
  </entry>
  <entry>
    <title>macos开发-NSCollectionView</title>
    <url>/2020/11/09/macos%E5%BC%80%E5%8F%91-NSCollectionView/</url>
    <content><![CDATA[<h1 id="一-简述"><a href="#一-简述" class="headerlink" title="一. 简述"></a>一. 简述</h1><p>以可自定义的布局显示的数据项的有序集合。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSCollectionView</span> : <span class="title">NSView</span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://docs-assets.developer.apple.com/published/cce637a738/cv_objects_2x_37439bb5-da91-4db6-a7f0-03c4046877f4.png" alt="Merging content and layout to create the final appearance"></p>
<h1 id="二-官方属性方法"><a href="#二-官方属性方法" class="headerlink" title="二. 官方属性方法"></a>二. 官方属性方法</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为收集视图提供数据的对象</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;<span class="built_in">NSCollectionViewDataSource</span>&gt; dataSource API_AVAILABLE(macos(<span class="number">10.11</span>)); </span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;<span class="built_in">NSCollectionViewPrefetching</span>&gt; prefetchDataSource API_AVAILABLE(macos(<span class="number">10.13</span>));</span><br><span class="line"><span class="comment">// 委托对象</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;<span class="built_in">NSCollectionViewDelegate</span>&gt; delegate;</span><br><span class="line"><span class="comment">// 为收集视图提供数据的数组</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="keyword">id</span>&gt; *content;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSView</span> *backgroundView API_AVAILABLE(macos(<span class="number">10.11</span>));</span><br><span class="line"><span class="comment">// 背景色数组</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">null_resettable</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSColor</span> *&gt; *backgroundColors;</span><br><span class="line"><span class="comment">// 背景视图是否随项目及其他内容滚动</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> backgroundViewScrollsWithContent API_AVAILABLE(macos(<span class="number">10.12</span>));</span><br><span class="line"><span class="comment">// 构建集合视图内容的布局对象</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">strong</span>) __kindof <span class="built_in">NSCollectionViewLayout</span> *collectionViewLayout API_AVAILABLE(macos(<span class="number">10.11</span>));</span><br></pre></td></tr></table></figure>
<p><strong>!!! 之后再补充 !!!</strong></p>
<h1 id="三-示例"><a href="#三-示例" class="headerlink" title="三. 示例"></a>三. 示例</h1><h2 id="1-效果图"><a href="#1-效果图" class="headerlink" title="1. 效果图"></a>1. 效果图</h2><p>要达到的效果:</p>
<ul>
<li>显示左侧聊天列表</li>
<li>Split滑动item内控件位置不变动</li>
<li>全屏下的显示</li>
<li>点击item调整选中色</li>
</ul>
<p>如下图</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gkj0kyt20vj31e00u00um.jpg" alt="效果图"></p>
<h2 id="2-具体代码"><a href="#2-具体代码" class="headerlink" title="2. 具体代码"></a>2. 具体代码</h2><h3 id="2-1-创建NSCollectionView"><a href="#2-1-创建NSCollectionView" class="headerlink" title="2.1 创建NSCollectionView"></a>2.1 创建<code>NSCollectionView</code></h3><p>此处为了方便使用<code>Storyboard</code>创建</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gkj0ricw9hj30oo0lmgmi.jpg" alt="创建CollectionView"></p>
<h3 id="2-2-配置flowLayout-可以创建或者代理设置"><a href="#2-2-配置flowLayout-可以创建或者代理设置" class="headerlink" title="2.2 配置flowLayout(可以创建或者代理设置)"></a>2.2 配置flowLayout(可以创建或者代理设置)</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.flowLayout = [[<span class="built_in">NSCollectionViewFlowLayout</span> alloc] init];</span><br><span class="line"><span class="keyword">self</span>.flowLayout.itemSize = <span class="built_in">NSMakeSize</span>(<span class="keyword">self</span>.collectionView.frame.size.width, <span class="number">60</span>); <span class="comment">// item大小</span></span><br><span class="line"><span class="keyword">self</span>.flowLayout.minimumLineSpacing = <span class="number">0</span>; <span class="comment">// 最小横向间距</span></span><br><span class="line"><span class="keyword">self</span>.flowLayout.minimumInteritemSpacing = <span class="number">0</span>; <span class="comment">// 最小竖向间距</span></span><br><span class="line"><span class="keyword">self</span>.collectionView.collectionViewLayout = <span class="keyword">self</span>.flowLayout;</span><br></pre></td></tr></table></figure>

<p><strong>说明</strong>: 这里不使用<code>Storyboard</code>或者代理配置flowLayout的原因是在滑动SplitView的时候要调整<code>itemSize</code>，使用这种方式更方便设置<code>itemSize</code>。</p>
<h3 id="2-3-设置代理"><a href="#2-3-设置代理" class="headerlink" title="2.3 设置代理"></a>2.3 设置代理</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FSMessageVC</span> ()</span></span><br><span class="line">&lt;</span><br><span class="line"><span class="built_in">NSSplitViewDelegate</span>,</span><br><span class="line"><span class="built_in">NSCollectionViewDelegate</span>,</span><br><span class="line"><span class="built_in">NSCollectionViewDataSource</span>,</span><br><span class="line"><span class="built_in">NSCollectionViewDelegateFlowLayout</span></span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.collectionView.delegate = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span>.collectionView.dataSource = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-设置CollectionView属性"><a href="#2-4-设置CollectionView属性" class="headerlink" title="2.4 设置CollectionView属性"></a>2.4 设置CollectionView属性</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置CollectionView的背景色</span></span><br><span class="line"><span class="keyword">self</span>.collectionView.layer.backgroundColor = <span class="built_in">NSColor</span>.whiteColor.CGColor;</span><br><span class="line"><span class="keyword">self</span>.collectionView.wantsLayer = <span class="literal">YES</span>;</span><br><span class="line"><span class="comment">// 设置可选择 ！！！注意！！！不设置为YES会导致点击item无效果</span></span><br><span class="line"><span class="keyword">self</span>.collectionView.selectable = <span class="literal">YES</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-注册自定义的Item"><a href="#2-5-注册自定义的Item" class="headerlink" title="2.5 注册自定义的Item"></a>2.5 注册自定义的Item</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.collectionView registerNib:[[<span class="built_in">NSNib</span> alloc] initWithNibNamed:<span class="string">@&quot;FSChatCell&quot;</span> bundle:<span class="literal">nil</span>]</span><br><span class="line">               forItemWithIdentifier:<span class="string">@&quot;kChatItem&quot;</span>];</span><br></pre></td></tr></table></figure>

<h3 id="2-6-实现代理方法"><a href="#2-6-实现代理方法" class="headerlink" title="2.6 实现代理方法"></a>2.6 实现代理方法</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 区数</span></span><br><span class="line">- (<span class="built_in">NSInteger</span>)numberOfSectionsInCollectionView:(<span class="built_in">NSCollectionView</span> *)collectionView &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// item数量</span></span><br><span class="line">- (<span class="built_in">NSInteger</span>)collectionView:(<span class="built_in">NSCollectionView</span> *)collectionView numberOfItemsInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.dataSource.count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// FSChatCell继承自NSCollectionViewItem</span></span><br><span class="line">- (<span class="keyword">nonnull</span> <span class="built_in">NSCollectionViewItem</span> *)collectionView:(<span class="keyword">nonnull</span> <span class="built_in">NSCollectionView</span> *)collectionView itemForRepresentedObjectAtIndexPath:(<span class="keyword">nonnull</span> <span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    FSChatCell *cell = (FSChatCell *)[collectionView makeItemWithIdentifier:<span class="string">@&quot;kChatItem&quot;</span> forIndexPath:indexPath];</span><br><span class="line">    cell.name = <span class="keyword">self</span>.dataSource[indexPath.item];</span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)commitEditingAndReturnError:(<span class="built_in">NSError</span> *__autoreleasing  _Nullable * _Nullable)error &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="keyword">nonnull</span> <span class="built_in">NSCoder</span> *)coder &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-7-Split滑动item内控件位置不变动"><a href="#2-7-Split滑动item内控件位置不变动" class="headerlink" title="2.7 Split滑动item内控件位置不变动"></a>2.7 Split滑动item内控件位置不变动</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 添加NSSplitViewDelegate</span></span><br><span class="line"><span class="keyword">self</span>.splitView.delegate = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最小可滑动的点</span></span><br><span class="line">- (<span class="built_in">CGFloat</span>)splitView:(<span class="built_in">NSSplitView</span> *)splitView constrainMinCoordinate:(<span class="built_in">CGFloat</span>)proposedMinimumPosition ofSubviewAt:(<span class="built_in">NSInteger</span>)dividerIndex &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最大可滑动的点</span></span><br><span class="line">- (<span class="built_in">CGFloat</span>)splitView:(<span class="built_in">NSSplitView</span> *)splitView constrainMaxCoordinate:(<span class="built_in">CGFloat</span>)proposedMaximumPosition ofSubviewAt:(<span class="built_in">NSInteger</span>)dividerIndex &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 滑动时的通知代理, 设置itemSize</span></span><br><span class="line">- (<span class="keyword">void</span>)splitViewDidResizeSubviews:(<span class="built_in">NSNotification</span> *)notification &#123;</span><br><span class="line">    <span class="keyword">self</span>.flowLayout.itemSize = <span class="built_in">NSMakeSize</span>(<span class="keyword">self</span>.collectionView.frame.size.width, <span class="number">60</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-8-全屏下的显示"><a href="#2-8-全屏下的显示" class="headerlink" title="2.8 全屏下的显示"></a>2.8 全屏下的显示</h3><p>添加全屏通知在通知的回调方法里调用 <code>self.flowLayout.itemSize = NSMakeSize(self.collectionView.frame.size.width, 60);</code> ，比较简单不再累述。</p>
<h3 id="2-9-点击item调整选中背景色"><a href="#2-9-点击item调整选中背景色" class="headerlink" title="2.9 点击item调整选中背景色"></a>2.9 点击item调整选中背景色</h3><p>有两种方式实现：</p>
<ul>
<li><code>didSelectItemsAtIndexPaths</code>和<code>didDeselectItemsAtIndexPaths</code>修改item背景色</li>
<li>在自定义item中重写<code>selected</code>方法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式 1</span></span><br><span class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">NSCollectionView</span> *)collectionView didSelectItemsAtIndexPaths:(<span class="built_in">NSSet</span>&lt;<span class="built_in">NSIndexPath</span> *&gt; *)indexPaths &#123;</span><br><span class="line">    <span class="built_in">NSIndexPath</span> *indexPath = indexPaths.allObjects.firstObject;</span><br><span class="line">    FSChatCell *cell = (FSChatCell *)[collectionView itemAtIndexPath:indexPath];</span><br><span class="line">    cell.view.wantsLayer = <span class="literal">YES</span>;</span><br><span class="line">    cell.view.layer.backgroundColor = <span class="built_in">NSColor</span>.lightGrayColor.CGColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)collectionView:(<span class="built_in">NSCollectionView</span> *)collectionView didDeselectItemsAtIndexPaths:(<span class="built_in">NSSet</span>&lt;<span class="built_in">NSIndexPath</span> *&gt; *)indexPaths &#123;</span><br><span class="line">    <span class="built_in">NSIndexPath</span> *indexPath = indexPaths.allObjects.firstObject;</span><br><span class="line">    FSChatCell *cell = (FSChatCell *)[collectionView itemAtIndexPath:indexPath];</span><br><span class="line">    cell.view.wantsLayer = <span class="literal">YES</span>;</span><br><span class="line">    cell.view.layer.backgroundColor = <span class="built_in">NSColor</span>.whiteColor.CGColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式 2 </span></span><br><span class="line"><span class="comment">//  FSChatCell.m</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="keyword">self</span>.view.wantsLayer = <span class="literal">YES</span>;</span><br><span class="line">	  <span class="keyword">self</span>.view.layer.backgroundColor = <span class="built_in">NSColor</span>.whiteColor.CGColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setSelected:(<span class="built_in">BOOL</span>)selected &#123;</span><br><span class="line">    <span class="keyword">super</span>.selected = selected;</span><br><span class="line">    [<span class="keyword">self</span> changeBgViewColor];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)changeBgViewColor &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.selected) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.highlightState == <span class="built_in">NSCollectionViewItemHighlightForSelection</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.view.layer.backgroundColor = <span class="built_in">NSColor</span>.lightGrayColor.CGColor;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">self</span>.highlightState == <span class="built_in">NSCollectionViewItemHighlightNone</span> ||</span><br><span class="line">                   <span class="keyword">self</span>.highlightState == <span class="built_in">NSCollectionViewItemHighlightForDeselection</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>.view.layer.backgroundColor = <span class="built_in">NSColor</span>.whiteColor.CGColor;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.view.layer.backgroundColor = <span class="built_in">NSColor</span>.whiteColor.CGColor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-10-FSChatCell-xib"><a href="#2-10-FSChatCell-xib" class="headerlink" title="2.10 FSChatCell.xib"></a>2.10 FSChatCell.xib</h3><p><strong>说明：</strong></p>
<ul>
<li>创建<code>Object</code>对象并绑定<code>FSChatCell</code></li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gkj37m11xlj307a0c3wf5.jpg" alt="image-20201109174544750"></p>
<ul>
<li>连线时最好将控件连在创建的Objects-ChatCell上</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gkj2dzvgayj30s30gjtax.jpg" alt="image-20201109174737345"></p>
<h3 id="2-11-添加头-尾"><a href="#2-11-添加头-尾" class="headerlink" title="2.11 添加头/尾"></a>2.11 添加头/尾</h3><ul>
<li><p>创建<code>FSChatHeaderView</code></p>
<p><code>FSChatHeaderView</code>继承自<code>NSView</code></p>
</li>
<li><p>注册HeaderView</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.collectionView registerNib:[[<span class="built_in">NSNib</span> alloc] initWithNibNamed:<span class="string">@&quot;FSChatHeaderView&quot;</span> bundle:<span class="literal">nil</span>]</span><br><span class="line">          forSupplementaryViewOfKind:<span class="built_in">NSCollectionElementKindSectionHeader</span></span><br><span class="line">                      withIdentifier:<span class="string">@&quot;kChatHeader&quot;</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现代理</p>
</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSSize</span>)collectionView:(<span class="built_in">NSCollectionView</span> *)collectionView layout:(<span class="built_in">NSCollectionViewLayout</span> *)collectionViewLayout referenceSizeForHeaderInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NSMakeSize</span>(<span class="keyword">self</span>.collectionView.frame.size.width, <span class="number">40</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSView</span> *)collectionView:(<span class="built_in">NSCollectionView</span> *)collectionView</span><br><span class="line">viewForSupplementaryElementOfKind:(<span class="built_in">NSCollectionViewSupplementaryElementKind</span>)kind</span><br><span class="line">               atIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    FSChatHeaderView *headerView = [collectionView makeSupplementaryViewOfKind:<span class="built_in">NSCollectionElementKindSectionHeader</span></span><br><span class="line">                                                                withIdentifier:<span class="string">@&quot;kChatHeader&quot;</span></span><br><span class="line">                                                                  forIndexPath:indexPath];</span><br><span class="line">    <span class="keyword">return</span> headerView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><a href="https://github.com/ForgetSou/FSToolBarDemo.git">Github Demo</a></p>
<p><strong>说明：</strong></p>
<ul>
<li><p><code>registerNib</code>/<code>registerClass</code>可以写成宏，代码可以更整洁。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - 注册Nib</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kRegisterNibCollectionView(collectionView, cell, indetifier)    [collectionView registerNib:[[NSNib alloc] initWithNibNamed:NSStringFromClass([cell class]) bundle:nil] forItemWithIdentifier:indetifier]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kRegisterNibTableView(tableView, cell, indetifier)              [tableView registerNib:[[NSNib alloc] initWithNibNamed:NSStringFromClass([cell class]) bundle:nil] forCellReuseIdentifier:indetifier]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>identifier可以写成静态常量</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> kChatItemID = <span class="string">@&quot;chatItemID&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> kChatHeaderID = <span class="string">@&quot;chatHeaderID&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>MVC/MVP/MVVM模式自己选择，Demo使用MVC完成。</p>
</li>
<li><p>Demo只设置了头部，尾部同理。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>macOS</tag>
        <tag>AppKit</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS-google gRPC的简单使用</title>
    <url>/2020/11/04/macOS%E5%BC%80%E5%8F%91-google-gRPC%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="google-gRPC在macOS中的简单使用"><a href="#google-gRPC在macOS中的简单使用" class="headerlink" title="google gRPC在macOS中的简单使用"></a>google gRPC在macOS中的简单使用</h1><blockquote>
<p><a href="http://doc.oschina.net/grpc?t=56831">gRPC 官方文档中文版</a></p>
</blockquote>
<h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h2><blockquote>
<p>A high-performance, open-source universal RPC framework</p>
</blockquote>
<p><a href="http://www.oschina.net/p/grpc-framework">gRPC</a> 是一个高性能、开源和通用的 RPC 框架，面向移动和 HTTP/2 设计。目前提供 C、Java 和 Go 语言版本，分别是：grpc, grpc-java, grpc-go. 其中 C 版本支持 C, C++, Node.js, Python, Ruby, Objective-C, PHP 和 C# 支持。</p>
<p>gRPC 基于 HTTP/2 标准设计，带来诸如双向流、流控、头部压缩、单 TCP 连接上的多复用请求等特。这些特性使得其在移动设备上表现更好，更省电和节省空间占用。</p>
<p>RPC（Remote Procedure Call）远程过程调用，简单的理解是一个节点请求另一个节点提供的服务，使应用程序之间可以进行通信，而且也遵循service/client模型。在客户端调用service端提供的接口就像是调用本地函数一样，一般使用客户端快速能获取到服务器接口数据的时候，如：实时语音识别、翻译、语音合成等。</p>
<p><img src="https://www.grpc.io/img/grpc_concept_diagram_00.png" alt="img"></p>
<p><strong>下面详解<code>googleapis</code>里的gRPC的使用</strong></p>
<h2 id="2-cocopods添加gRPC"><a href="#2-cocopods添加gRPC" class="headerlink" title="2. cocopods添加gRPC"></a>2. <code>cocopods</code>添加<code>gRPC</code></h2><blockquote>
<ul>
<li><a href="https://github.com/GoogleCloudPlatform/ios-docs-samples.git">ios-docs-samples</a> 下载googleapis库</li>
<li>找到并复制ios-docs-samples/speech-to-speech目录下的google文件夹和googleapis.podspec文件</li>
<li>将上述两个文件复制到自己工程主目录</li>
<li>cd 到自己工程</li>
<li>pod install –verbose 或 pod update –verbose (过程较慢，需要翻墙)</li>
</ul>
</blockquote>
<h2 id="3-示例"><a href="#3-示例" class="headerlink" title="3. 示例"></a>3. 示例</h2><p>客户端代码、不会服务器&lt;可以自行研究&gt;</p>
<p><a href="https://github.com/GoogleCloudPlatform">google 官方API</a></p>
<h3 id="3-1-语音识别"><a href="#3-1-语音识别" class="headerlink" title="3.1 语音识别"></a>3.1 语音识别</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  ZDASRService.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;google/cloud/speech/v1p1beta1/CloudSpeech.pbobjc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^SpeechRecognitionCompletionHandler)(<span class="built_in">BOOL</span> done, StreamingRecognizeResponse *object, <span class="built_in">NSError</span> *error);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZDASRService</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)streamAudioData:(<span class="built_in">NSData</span> *)audioData</span><br><span class="line">           languageCode:(<span class="built_in">NSString</span> *)languageCode</span><br><span class="line">         withCompletion:(SpeechRecognitionCompletionHandler)completion;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)stopStreaming;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)isStreaming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//  ZDASRService.m</span></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br><span class="line">  </span><br><span class="line"> <span class="meta">#import <span class="meta-string">&quot;ZDASRService.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;GRPCClient/GRPCCall.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;RxLibrary/GRXBufferedPipe.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;ProtoRPC/ProtoRPC.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;google/cloud/speech/v1p1beta1/CloudSpeech.pbrpc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZDASRService</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) Speech *client;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) GRXBufferedPipe *writer;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) GRPCProtoCall *call;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> streaming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ZDASRService</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)init &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> defaultSetting];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)defaultSetting &#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)streamAudioData:(<span class="built_in">NSData</span> *)audioData</span><br><span class="line">           languageCode:(<span class="built_in">NSString</span> *)languageCode</span><br><span class="line">         withCompletion:(SpeechRecognitionCompletionHandler)completion &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_streaming) &#123;</span><br><span class="line">        _client = [[Speech alloc] initWithHost:[ZDDogAPIService shared].dogApis];</span><br><span class="line">        _writer = [[GRXBufferedPipe alloc] init];</span><br><span class="line">        _call = [_client RPCToStreamingRecognizeWithRequestsWriter:_writer eventHandler:^(<span class="built_in">BOOL</span> done, StreamingRecognizeResponse * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">            completion(done, response, error);</span><br><span class="line">        &#125;];</span><br><span class="line">        _call.requestHeaders[<span class="string">@&quot;Authorization&quot;</span>] = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;Bearer %@&quot;</span>, [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] valueForKey:kDeviceTokenKey]];</span><br><span class="line">        _call.requestHeaders[<span class="string">@&quot;appId&quot;</span>] = kAppId;</span><br><span class="line">        _call.requestHeaders[<span class="string">@&quot;userId&quot;</span>] = [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] valueForKey:kUserId];</span><br><span class="line">        [_call start];</span><br><span class="line">        _streaming = <span class="literal">YES</span>;</span><br><span class="line">        </span><br><span class="line">        RecognitionConfig *recognitionConfig = [RecognitionConfig message];</span><br><span class="line">        recognitionConfig.encoding = RecognitionConfig_AudioEncoding_Linear16;</span><br><span class="line">        recognitionConfig.sampleRateHertz = <span class="number">16000</span>;</span><br><span class="line">        recognitionConfig.languageCode = languageCode;</span><br><span class="line">        recognitionConfig.maxAlternatives = <span class="number">30</span>;</span><br><span class="line">        recognitionConfig.enableAutomaticPunctuation = <span class="literal">YES</span>;</span><br><span class="line">        recognitionConfig.audioChannelCount = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        StreamingRecognitionConfig *streamingRecognitionConfig = [StreamingRecognitionConfig message];</span><br><span class="line">        streamingRecognitionConfig.config = recognitionConfig;</span><br><span class="line">        streamingRecognitionConfig.singleUtterance = <span class="literal">NO</span>;</span><br><span class="line">        streamingRecognitionConfig.interimResults = <span class="literal">YES</span>;</span><br><span class="line">        </span><br><span class="line">        StreamingRecognizeRequest *streamingRecognizeRequest = [StreamingRecognizeRequest message];</span><br><span class="line">        streamingRecognizeRequest.streamingConfig = streamingRecognitionConfig;</span><br><span class="line">        [_writer writeValue:streamingRecognizeRequest];</span><br><span class="line">    &#125;</span><br><span class="line">    StreamingRecognizeRequest *streamingRecognizeRequest = [StreamingRecognizeRequest message];</span><br><span class="line">    streamingRecognizeRequest.audioContent = audioData;</span><br><span class="line">    [_writer writeValue:streamingRecognizeRequest];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)stopStreaming &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_streaming) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    StreamingRecognizeRequest *streamingRecognizeRequest = [StreamingRecognizeRequest message];</span><br><span class="line">    streamingRecognizeRequest.audioContent = [<span class="built_in">NSData</span> data];</span><br><span class="line">    [_writer writeValue:streamingRecognizeRequest];</span><br><span class="line">    [_writer finishWithError:<span class="literal">nil</span>];</span><br><span class="line">    _streaming = <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)isStreaming &#123;</span><br><span class="line">    <span class="keyword">return</span> _streaming;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-语音合成"><a href="#3-2-语音合成" class="headerlink" title="3.2 语音合成"></a>3.2 语音合成</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  ZDTTSService.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;google/cloud/texttospeech/v1beta1/CloudTts.pbobjc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^TTSRecognitionCompletionHandler)(<span class="built_in">NSData</span> *__<span class="keyword">nullable</span> data, <span class="built_in">NSString</span> *__<span class="keyword">nullable</span> error);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZDTTSService</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)ttsRecognition:(<span class="built_in">NSString</span> *)text</span><br><span class="line">              language:(<span class="built_in">NSString</span> *)language</span><br><span class="line">     completionHandler:(TTSRecognitionCompletionHandler)handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//  ZDTTSService.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;ZDTTSService.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;RxLibrary/GRXBufferedPipe.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;google/cloud/texttospeech/v1beta1/CloudTts.pbrpc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZDTTSService</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) TextToSpeech *client;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) GRXBufferedPipe *writer;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) GRPCProtoCall *call;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> mGoogleTimeout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ZDTTSService</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)init &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> defaultSetting];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)defaultSetting &#123;</span><br><span class="line">    <span class="keyword">self</span>.mGoogleTimeout = <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)ttsRecognition:(<span class="built_in">NSString</span> *)text</span><br><span class="line">              language:(<span class="keyword">nonnull</span> <span class="built_in">NSString</span> *)language</span><br><span class="line">     completionHandler:(TTSRecognitionCompletionHandler)handler &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *sIflyteks = @[<span class="string">@&quot;zh-CN&quot;</span>, <span class="string">@&quot;zh-TW&quot;</span>, <span class="string">@&quot;zh-HK&quot;</span>];</span><br><span class="line">    <span class="built_in">NSArray</span> *sMicrosofts = @[<span class="string">@&quot;ms-MY&quot;</span>, <span class="string">@&quot;bg-BG&quot;</span>, <span class="string">@&quot;sl-SI&quot;</span>, <span class="string">@&quot;he_IL&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> ([sIflyteks containsObject:language] || [sMicrosofts containsObject:language] || <span class="keyword">self</span>.mGoogleTimeout) &#123;</span><br><span class="line">        [<span class="keyword">self</span> ttsDogRecognition:text language:language completionHandler:handler];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">self</span> ttsGoogleRecognition:text language:language completionHandler:handler];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// google api合成</span></span><br><span class="line">- (<span class="keyword">void</span>)ttsGoogleRecognition:(<span class="built_in">NSString</span> *)text</span><br><span class="line">                    language:(<span class="built_in">NSString</span> *)language</span><br><span class="line">           completionHandler:(TTSRecognitionCompletionHandler)handler &#123;</span><br><span class="line">    text = [text stringByAddingPercentEncodingWithAllowedCharacters:[<span class="built_in">NSCharacterSet</span> URLQueryAllowedCharacterSet]];</span><br><span class="line">    <span class="built_in">NSMutableString</span> *urlString = [<span class="built_in">NSMutableString</span> stringWithString:[ZDDogAPIService shared].mGoogleUrl];</span><br><span class="line">    [urlString appendFormat:<span class="string">@&quot;&amp;total=1&quot;</span>];</span><br><span class="line">    [urlString appendFormat:<span class="string">@&quot;&amp;idx=0&quot;</span>];</span><br><span class="line">    [urlString appendFormat:<span class="string">@&quot;&amp;textlen=%lu&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">long</span>)text.length];</span><br><span class="line">    [urlString appendFormat:<span class="string">@&quot;&amp;q=%@&quot;</span>, text];</span><br><span class="line">    [urlString appendFormat:<span class="string">@&quot;&amp;tl=%@&quot;</span>, language];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSMutableURLRequest</span> *request = [<span class="built_in">NSMutableURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:urlString]</span><br><span class="line">                                                           cachePolicy:<span class="built_in">NSURLRequestUseProtocolCachePolicy</span></span><br><span class="line">                                                       timeoutInterval:<span class="number">10.0</span>];</span><br><span class="line">    [request setHTTPMethod:<span class="string">@&quot;GET&quot;</span>];</span><br><span class="line">    <span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sharedSession];</span><br><span class="line">    <span class="built_in">NSURLSessionDataTask</span> *dataTask = [session dataTaskWithRequest:request</span><br><span class="line">                                                completionHandler:^(<span class="built_in">NSData</span> *data, <span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSError</span> *error) &#123;</span><br><span class="line">                                                    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                                                        <span class="keyword">if</span> (error.code == <span class="number">-1001</span>) &#123;</span><br><span class="line">                                                            <span class="keyword">self</span>.mGoogleTimeout = <span class="literal">YES</span>;</span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                        handler(<span class="literal">nil</span>, error.localizedDescription);</span><br><span class="line">                                                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                        <span class="built_in">NSHTTPURLResponse</span> *httpResponse = (<span class="built_in">NSHTTPURLResponse</span> *) response;</span><br><span class="line">                                                        <span class="keyword">if</span> (httpResponse.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">                                                            handler(data, <span class="string">@&quot;&quot;</span>);</span><br><span class="line">                                                        &#125;</span><br><span class="line">                                                    &#125;</span><br><span class="line">                                                &#125;];</span><br><span class="line">    [dataTask resume];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dog RPC</span></span><br><span class="line">- (<span class="keyword">void</span>)ttsDogRecognition:(<span class="built_in">NSString</span> *)text</span><br><span class="line">             language:(<span class="built_in">NSString</span> *)language</span><br><span class="line">        completionHandler:(TTSRecognitionCompletionHandler)handler &#123;</span><br><span class="line">    _client = [[TextToSpeech alloc] initWithHost:[ZDDogAPIService shared].dogApis];</span><br><span class="line">    _writer = [[GRXBufferedPipe alloc] init];</span><br><span class="line">        </span><br><span class="line">    SynthesisInput *input = [[SynthesisInput alloc] init];</span><br><span class="line">    input.text = text;</span><br><span class="line"></span><br><span class="line">    VoiceSelectionParams *params = [[VoiceSelectionParams alloc] init];</span><br><span class="line">    params.languageCode =  language;</span><br><span class="line">    params.ssmlGender = SsmlVoiceGender_Female;</span><br><span class="line">    </span><br><span class="line">    AudioConfig *config = [[AudioConfig alloc] init];</span><br><span class="line">    config.audioEncoding = AudioEncoding_Mp3;</span><br><span class="line">    </span><br><span class="line">    SynthesizeSpeechRequest *speechRequest = [[SynthesizeSpeechRequest alloc] init];</span><br><span class="line">    speechRequest.audioConfig = config;</span><br><span class="line">    speechRequest.input = input;</span><br><span class="line">    speechRequest.voice = params;</span><br><span class="line">    </span><br><span class="line">    _call = [_client RPCToSynthesizeSpeechWithRequest:speechRequest handler:^(SynthesizeSpeechResponse * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        handler(response.audioContent, error.localizedDescription);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    _call.requestHeaders[<span class="string">@&quot;Authorization&quot;</span>] = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;Bearer %@&quot;</span>, [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] valueForKey:kDeviceTokenKey]];</span><br><span class="line">    _call.requestHeaders[<span class="string">@&quot;appId&quot;</span>] = kAppId;</span><br><span class="line">    [_call start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-翻译"><a href="#3-3-翻译" class="headerlink" title="3.3 翻译"></a>3.3 翻译</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  ZDTranslateService.h</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;google/cloud/translate/v3beta1/TranslationService.pbobjc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^TranslationCompletionHandler)(TranslateTextResponse *object, <span class="built_in">NSError</span> *error);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZDTranslateService</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)translateText:(<span class="built_in">NSString</span> *)text</span><br><span class="line">            sourceLan:(<span class="built_in">NSString</span> *)sourceLan</span><br><span class="line">            targetLan:(<span class="built_in">NSString</span> *)targetLan</span><br><span class="line">    completionHandler:(TranslationCompletionHandler)handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//  ZDTranslateService.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;ZDTranslateService.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;google/cloud/translate/v3beta1/TranslationService.pbrpc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZDTranslateService</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) TranslationService *client;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) GRPCProtoCall *call;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ZDTranslateService</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)init &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> defaultSetting];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)defaultSetting &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)translateText:(<span class="built_in">NSString</span> *)text</span><br><span class="line">            sourceLan:(<span class="built_in">NSString</span> *)sourceLan</span><br><span class="line">            targetLan:(<span class="built_in">NSString</span> *)targetLan</span><br><span class="line">    completionHandler:(TranslationCompletionHandler)handler &#123;</span><br><span class="line">    _client = [[TranslationService alloc] initWithHost:[ZDDogAPIService shared].dogApis];</span><br><span class="line">    TranslateTextRequest *translateRequest = [[TranslateTextRequest alloc] init];</span><br><span class="line">    translateRequest.contentsArray = [<span class="built_in">NSMutableArray</span> arrayWithArray:@[text]];</span><br><span class="line">    translateRequest.mimeType = <span class="string">@&quot;text/plain&quot;</span>;</span><br><span class="line">    translateRequest.sourceLanguageCode = sourceLan;</span><br><span class="line">    translateRequest.targetLanguageCode = targetLan;</span><br><span class="line">    </span><br><span class="line">    _call = [_client RPCToTranslateTextWithRequest:translateRequest handler:^(TranslateTextResponse * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</span><br><span class="line">        handler(response, error);</span><br><span class="line">    &#125;];</span><br><span class="line">    _call.requestHeaders[<span class="string">@&quot;Authorization&quot;</span>] = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;Bearer %@&quot;</span>, [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] valueForKey:kDeviceTokenKey]];</span><br><span class="line">    _call.requestHeaders[<span class="string">@&quot;appId&quot;</span>] = kAppId;</span><br><span class="line">    _call.requestHeaders[<span class="string">@&quot;userId&quot;</span>] = [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] valueForKey:kUserId];</span><br><span class="line">    [_call start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>macOS</tag>
        <tag>google</tag>
        <tag>gPRC</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS开发-关闭/最小化/全屏居中处理(仿Mac QQ)</title>
    <url>/2020/11/06/macos%E5%BC%80%E5%8F%91-%E5%85%B3%E9%97%AD-%E6%9C%80%E5%B0%8F%E5%8C%96-%E5%85%A8%E5%B1%8F%E5%B1%85%E4%B8%AD%E5%A4%84%E7%90%86(%E4%BB%BFMac%20QQ)/</url>
    <content><![CDATA[<p>关闭/最小化/全屏居中处理(仿Mac QQ)，效果如下</p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gkffxnzk8aj31e00u0gn3.jpg" alt="image-20201106143307906"></p>
<p>在<code>WindowController</code>中添加以下代码，直接复制到控制器并修改控制器名称就可以了。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  FSWindowCtl.m</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FSWindowCtl</span> ()&lt;<span class="title">NSWindowDelegate</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FSWindowCtl</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)windowDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> windowDidLoad];</span><br><span class="line">    [<span class="keyword">self</span> settingWindowStyle];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置window样式</span></span><br><span class="line">- (<span class="keyword">void</span>)settingWindowStyle &#123;</span><br><span class="line">    <span class="keyword">self</span>.window.titlebarAppearsTransparent = <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">self</span>.window.titleVisibility = <span class="built_in">NSWindowTitleHidden</span>;</span><br><span class="line">    <span class="keyword">self</span>.window.styleMask = <span class="built_in">NSWindowStyleMaskClosable</span> | <span class="built_in">NSWindowStyleMaskResizable</span> | <span class="built_in">NSWindowStyleMaskTitled</span> | <span class="built_in">NSWindowStyleMaskMiniaturizable</span> | <span class="built_in">NSWindowStyleMaskFullSizeContentView</span>;</span><br><span class="line">    [<span class="keyword">self</span>.window setMovableByWindowBackground:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span> updateTitleBarOfWindow:<span class="literal">NO</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改关闭、最小化、全屏的位置</span></span><br><span class="line">- (<span class="keyword">void</span>)updateTitleBarOfWindow:(<span class="built_in">BOOL</span>)fullScreen &#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> kTitlebarH = <span class="number">54.0</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> kFullScreenButtonYOrigin = <span class="number">3.0</span>;</span><br><span class="line">    <span class="built_in">NSRect</span> windowFrame = <span class="keyword">self</span>.window.frame;</span><br><span class="line">    <span class="built_in">NSView</span> *titlebarContainerView = [<span class="keyword">self</span>.window standardWindowButton:<span class="built_in">NSWindowCloseButton</span>].superview.superview;</span><br><span class="line">    <span class="built_in">NSRect</span> titlebarContainerFrame = titlebarContainerView.frame;</span><br><span class="line">    titlebarContainerFrame.origin.y = windowFrame.size.height - kTitlebarH;</span><br><span class="line">    titlebarContainerFrame.size.height = (<span class="built_in">CGFloat</span>)kTitlebarH;</span><br><span class="line">    titlebarContainerView.frame = titlebarContainerFrame;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGFloat</span> buttonX = <span class="number">12.0</span>;</span><br><span class="line">    <span class="built_in">NSButton</span> *closeBtn = [<span class="keyword">self</span>.window standardWindowButton:<span class="built_in">NSWindowCloseButton</span>];</span><br><span class="line">    <span class="built_in">NSButton</span> *minimizeBtn = [<span class="keyword">self</span>.window standardWindowButton:<span class="built_in">NSWindowMiniaturizeButton</span>];</span><br><span class="line">    <span class="built_in">NSButton</span> *zoomBtn = [<span class="keyword">self</span>.window standardWindowButton:<span class="built_in">NSWindowZoomButton</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSButton</span> *buttonView <span class="keyword">in</span> @[closeBtn, minimizeBtn, zoomBtn]) &#123;</span><br><span class="line">        <span class="built_in">NSRect</span> buttonFrame = buttonView.frame;</span><br><span class="line">        buttonFrame.origin.y = fullScreen ? kFullScreenButtonYOrigin : round((kTitlebarH - buttonFrame.size.height)/<span class="number">2.0</span>);</span><br><span class="line">        buttonFrame.origin.x = (<span class="built_in">CGFloat</span>)buttonX;</span><br><span class="line">        buttonX = buttonFrame.size.width + buttonX + <span class="number">6</span>;</span><br><span class="line">        [buttonView setFrameOrigin:buttonFrame.origin];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - NSWindowDelegate</span></span><br><span class="line">- (<span class="keyword">void</span>)windowDidEnterFullScreen:(<span class="built_in">NSNotification</span> *)notification &#123;</span><br><span class="line">    [<span class="keyword">self</span> updateTitleBarOfWindow:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)windowDidExitFullScreen:(<span class="built_in">NSNotification</span> *)notification &#123;</span><br><span class="line">    [<span class="keyword">self</span> updateTitleBarOfWindow:<span class="literal">NO</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)windowDidResize:(<span class="built_in">NSNotification</span> *)notification &#123;</span><br><span class="line">    [<span class="keyword">self</span> updateTitleBarOfWindow:<span class="literal">NO</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>macOS</tag>
        <tag>日常收集</tag>
      </tags>
  </entry>
  <entry>
    <title>【面试题】2020-10-16 OC</title>
    <url>/2020/10/13/%E3%80%90%E9%9D%A2%E8%AF%95%E9%A2%98%E3%80%912020-10-16-OC/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">欢迎来到我的博客，请输入密码查看全文</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="16cc1f58b175d93f719ad477256a35be9bad2fc9479d2acc654350a8890d8384"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找-算法</title>
    <url>/2021/12/03/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE-%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一-简述"><a href="#一-简述" class="headerlink" title="一. 简述"></a>一. 简述</h2><figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">假设要在电话簿中找一个名字以<span class="built_in">K</span>打头的人，可以从头开始翻页，直到进入以<span class="built_in">K</span>打头的部分。但你很可能不这样做，而是从中间开始，因为你知道以<span class="built_in">K</span>打头的名字在电话簿中间。</span><br></pre></td></tr></table></figure>


<figure class="highlight"><table><tr><td class="code"><pre><span class="line">对于上述情况，可以使用一种算法来解决问题，这种算法就是二分查找。</span><br></pre></td></tr></table></figure>


<figure class="highlight"><table><tr><td class="code"><pre><span class="line">二分查找只适合顺序排列的列表使用。</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p><strong>个人博客:</strong> 🏡 <a href="https://forgetsou.github.io/">ForgetSou</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>在Mac终端上使用Minicom进行串口调试</title>
    <url>/2021/08/19/%E5%9C%A8Mac%E7%BB%88%E7%AB%AF%E4%B8%8A%E4%BD%BF%E7%94%A8Minicom%E8%BF%9B%E8%A1%8C%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>​    最近在升级飞机的<code>SDR</code>固件，需要使用<code>USB</code>串口进行升级，就记录下使用<code>Minicom</code> <code>USB</code>串口升级固件的方式。</p>
<p>​    minicom是一个<a href="https://baike.baidu.com/item/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/3775296">串口通信</a>工具，就像Windows下的<a href="https://baike.baidu.com/item/%E8%B6%85%E7%BA%A7%E7%BB%88%E7%AB%AF/1702227">超级终端</a>。可用来与串口设备通信，如调试交换机和Modem等。它的<a href="https://baike.baidu.com/item/Debian/748667">Debian</a>软件包的名称就叫minicom。</p>
<h3 id="1-minicom的安装"><a href="#1-minicom的安装" class="headerlink" title="1. minicom的安装"></a>1. <code>minicom</code>的安装</h3><p><code>brew</code> 安装</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$ brew install minicom</span><br></pre></td></tr></table></figure>

<p><em>在安装过程中报错</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Running Homebrew as root is extremely dangerous <span class="keyword">and</span> no longer supported.</span><br><span class="line">As Homebrew does <span class="keyword">not</span> drop privileges on installation you would be giving all</span><br><span class="line">build scripts full access to your system.</span><br></pre></td></tr></table></figure>

<p>​    以根用户身份运行自制程序非常危险，不再受支持。<br>​    由于Homebrew不会放弃安装权限，因此您将授予所有生成脚本对系统的完全访问权限。</p>
<p>解决方案:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo chown -R `whoami` <span class="regexp">/usr/</span>local<span class="regexp">/Homebrew/</span></span><br><span class="line">$ sudo chown -R $(whoami) $(brew --prefix)/*</span><br><span class="line">$ sudo mkdir <span class="regexp">/usr/</span>local/Frameworks</span><br><span class="line">$ sudo chown -R `whoami` <span class="regexp">/usr/</span>local<span class="regexp">/Frameworks/</span></span><br></pre></td></tr></table></figure>

<p><strong>注：**</strong>不要使用 <code>sudo brew install</code> 安装**</p>
<p>安装完<code>minicom</code>后，使用<code>minicom s</code>来配置<code>minicom</code></p>
<h3 id="2-minicom的配置"><a href="#2-minicom的配置" class="headerlink" title="2. minicom的配置"></a>2. <code>minicom</code>的配置</h3><ul>
<li><p>运行<code>minicom s</code></p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gtm70mpli0j60g20e2dgu02.jpg" alt="image-20210819164728129"></p>
</li>
<li><p>按↓选择<code>Serial port setup</code>，并按Enter进入</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gtm71ofzp7j60um0jwdir02.jpg" alt="image-20210819164830836"></p>
</li>
<li><p>输入A选择<code>Serial Device</code>修改为自己要连的<code>USB</code>名称，按Enter完成修改</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gtm74cj61nj60uq0kgn0902.jpg" alt="image-20210819165104774"></p>
</li>
<li><p>按E可修改波特率等参数</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gtm799gxjdj60ug0kujuq02.jpg" alt="image-20210819165548179"></p>
</li>
<li><p>完成后，选择<code>Save setup as dfl</code>保存配置。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gtm7an1s15j60dc0di0tq02.jpg" alt="image-20210819165707254"></p>
</li>
<li><p>保存后按<code>Exit</code>退出即可。</p>
<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gtm7c1hzo9j60dc0d43zi02.jpg" alt="image-20210819165828821"></p>
</li>
<li><p>下次使用直接使用命令<code>minicom</code>即可。</p>
</li>
</ul>
<h3 id="3-minicom的简单使用"><a href="#3-minicom的简单使用" class="headerlink" title="3. minicom的简单使用"></a>3. <code>minicom</code>的简单使用</h3><p>使用串口线<code>USB</code>口连接<code>Mac</code>，一端连接硬件。</p>
<p>在命令行输入<code>sudo minicom</code>，回车，如果出现<code>minicom: cannot open /dev/tty.usbserial-1420: No such file or directory</code>说明<code>USB</code>没有连接好。</p>
<p>之后输入命令升级SD卡中要升级的固件，如：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/tmp/</span>sd<span class="regexp">/usb_hotplugin ./</span>;chmod a+x usb_hotplugin;killall daemon.sh;killall usb_hotplugin;sleep <span class="number">2</span>;.<span class="regexp">/usb_hotplugin ar8020_usb_cmd 7-0 /</span>tmp<span class="regexp">/sd/</span>V1.<span class="number">0.0</span>.bin</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p><strong>个人博客:</strong> 🏡 <a href="https://forgetsou.github.io/">ForgetSou</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>串口</tag>
        <tag>Mac</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库-RealmSwift的使用/数据迁移</title>
    <url>/2020/12/04/%E6%95%B0%E6%8D%AE%E5%BA%93-RealmSwift%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="一-简述"><a href="#一-简述" class="headerlink" title="一. 简述"></a>一. 简述</h1><p><img src="https://raw.githubusercontent.com/realm/realm-cocoa/master/logo.png" alt="img">是一个跨平台的移动数据库引擎。</p>
<p><a href="https://realm.io/cn/docs/swift/latest/">Realm 中文文档</a></p>
<blockquote>
<p>Realm平台是基于noSQL的服务器和客户端组件的组合，该组件通过快速高效的同步协议进行连接，以实现实时，连接的应用程序和服务，无论网络状态如何，它们都具有响应能力和性能。Realm平台具有两个主要组件：Realm数据库和Realm对象服务器。这两个组件协同工作以自动同步数据，从而实现大量用例，从离线优先应用程序，现场服务和数据收集应用程序，以数据可用性和用户响应能力为关键的移动服务开始。此外，通过与现有后端（SQL，Kafka等）的集成功能，Realm Platform是一种在利用现有（有时是传统）系统和数据源的同时构建现代实时服务体验的绝佳方法。</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glbnizdrg1j31is0u0ain.jpg" alt="领域平台的高级示意图"></p>
<blockquote>
<p>Realm数据库嵌入在客户端上，是一个功能齐全的，面向对象的跨平台数据库，可将数据本地存储在设备上。它适用于主要的移动语言，例如Swift和Objective-C（iOS），Java（Android），C＃（Xamarin，.NET）和JavaScript（React Native和Node.js）。</p>
<p>Realm数据库是轻量级且高性能的，能够处理非常大的数据负载并在几分之一秒内运行查询。它基于共享的活动对象，无需编写网络，序列化或对象关系映射代码，即可与Realm Object Server实时无缝同步数据。</p>
</blockquote>
<p>Realm 性能优于 FMDB 和 Core Data，支持 OC 和 Swift 语言开发，使用更加简单、方便。</p>
<p>下面主要说下Swift语言下的 Realm 数据库的使用和 RealmSwift 数据迁移</p>
<h1 id="二-Cocopods-安装"><a href="#二-Cocopods-安装" class="headerlink" title="二. Cocopods 安装"></a>二. <code>Cocopods</code> 安装</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">pod <span class="string">&#x27;RealmSwift&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="三-数据模型"><a href="#三-数据模型" class="headerlink" title="三. 数据模型"></a>三. 数据模型</h1><p>不再详述了，具体可参考<a href="https://realm.io/cn/docs/swift/latest/">中文官方文档</a></p>
<p><a href="https://realm.io/cn/docs/swift/latest/#models">中文官方文档-数据模型</a></p>
<p><strong>Realm 支持的属性</strong></p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">非可空值形式</th>
<th align="left">可空值形式</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Bool</td>
<td align="left"><code>@objc dynamic var value = false</code></td>
<td align="left"><code>let value = RealmOptional&lt;Bool&gt;()</code></td>
</tr>
<tr>
<td align="left">Int</td>
<td align="left"><code>@objc dynamic var value = 0</code></td>
<td align="left"><code>let value = RealmOptional&lt;Int&gt;()</code></td>
</tr>
<tr>
<td align="left">Float</td>
<td align="left"><code>@objc dynamic var value: Float = 0.0</code></td>
<td align="left"><code>let value = RealmOptional&lt;Float&gt;()</code></td>
</tr>
<tr>
<td align="left">Double</td>
<td align="left"><code>@objc dynamic var value: Double = 0.0</code></td>
<td align="left"><code>let value = RealmOptional&lt;Double&gt;()</code></td>
</tr>
<tr>
<td align="left">String</td>
<td align="left"><code>@objc dynamic var value = &quot;&quot;</code></td>
<td align="left"><code>@objc dynamic var value: String? = nil</code></td>
</tr>
<tr>
<td align="left">Data</td>
<td align="left"><code>@objc dynamic var value = Data()</code></td>
<td align="left"><code>@objc dynamic var value: Data? = nil</code></td>
</tr>
<tr>
<td align="left">Date</td>
<td align="left"><code>@objc dynamic var value = Date()</code></td>
<td align="left"><code>@objc dynamic var value: Date? = nil</code></td>
</tr>
<tr>
<td align="left">Object</td>
<td align="left">不存在：必须是可空值</td>
<td align="left"><code>@objc dynamic var value: Class?</code></td>
</tr>
<tr>
<td align="left">List</td>
<td align="left"><code>let value = List&lt;Type&gt;()</code></td>
<td align="left">不存在：必须是非可空值</td>
</tr>
<tr>
<td align="left">LinkingObjects</td>
<td align="left"><code>let value = LinkingObjects(fromType: Class.self, property: &quot;property&quot;)</code></td>
<td align="left">不存在：必须是非可空值</td>
</tr>
</tbody></table>
<h1 id="四-数据迁移"><a href="#四-数据迁移" class="headerlink" title="四. 数据迁移"></a>四. 数据迁移</h1><p>当您使用任意一个数据库时，您随时都可能打算修改您的数据模型。由于 Realm 的数据模型是以标准的 Swift 类来定义的，这使得修改模型就像修改其他的 Swift 类一样方便。</p>
<p>例如在1.0.1版本定义的 <code>Person</code>，现在需要在1.0.2版本中添加一个 email 的属性。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.0.1版本定义的Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> age <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1.0.2版本新增email属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> age <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">  	<span class="keyword">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> email <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如下是具体处理这类问题的实现方式</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Swift 数据库管理器中的init()方法中做数据迁移</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">init</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> realmName <span class="operator">=</span> <span class="string">&quot;demo.realm&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> defaultUrl <span class="operator">=</span> <span class="type">FileManager</span>.default.urls(for: <span class="type">FileManager</span>.<span class="type">SearchPathDirectory</span>.documentDirectory, in: <span class="type">FileManager</span>.<span class="type">SearchPathDomainMask</span>.userDomainMask).first</span><br><span class="line">        <span class="keyword">let</span> configCompact <span class="operator">=</span> <span class="type">Realm</span>.<span class="type">Configuration</span>(</span><br><span class="line">            fileURL: defaultUrl<span class="operator">?</span>.appendingPathComponent(<span class="string">&quot;<span class="subst">\(realmName)</span>&quot;</span>),</span><br><span class="line">            shouldCompactOnLaunch: &#123; totalBytes, usedBytes <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">let</span> oneHundredMB <span class="operator">=</span> <span class="number">100</span> <span class="operator">*</span> <span class="number">1024</span> <span class="operator">*</span> <span class="number">1024</span></span><br><span class="line">            <span class="keyword">return</span> (totalBytes <span class="operator">&gt;</span> oneHundredMB) <span class="operator">&amp;&amp;</span> (<span class="type">Double</span>(usedBytes) <span class="operator">/</span> <span class="type">Double</span>(totalBytes)) <span class="operator">&lt;</span> <span class="number">0.5</span></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// 如果满足配置块条件，则在第一次打开时压缩 Realm</span></span><br><span class="line">            <span class="keyword">_</span> <span class="operator">=</span> <span class="keyword">try</span> <span class="type">Realm</span>(configuration: configCompact)</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="comment">// 处理压缩或打开 Realm 的错误</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> currentVersion : <span class="type">String</span> <span class="operator">=</span> <span class="type">Bundle</span>.main.infoDictionary<span class="operator">!</span>[<span class="string">&quot;CFBundleShortVersionString&quot;</span>] <span class="keyword">as!</span> <span class="type">String</span></span><br><span class="line">        <span class="keyword">let</span> currentVersions <span class="operator">=</span> currentVersion.components(separatedBy: <span class="string">&quot;.&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> currentVersionStr <span class="operator">=</span> <span class="type">NSMutableString</span>()</span><br><span class="line">        <span class="keyword">for</span> subVersion <span class="keyword">in</span> currentVersions &#123;</span><br><span class="line">            <span class="keyword">let</span> subs <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%02d&quot;</span>, (subVersion <span class="keyword">as</span> <span class="type">NSString</span>).integerValue)</span><br><span class="line">            currentVersionStr.append(subs)</span><br><span class="line">        &#125;</span><br><span class="line">  		  <span class="comment">/*!</span></span><br><span class="line"><span class="comment">         * 当前版本的UInt64版本号</span></span><br><span class="line"><span class="comment">         * 如currentVersion = &quot;1.0.1&quot;，schemaVersion = 010001; currentVersion = 10.12.25, schemaVersion = 101225</span></span><br><span class="line"><span class="comment">         * !!! 注意 !!!</span></span><br><span class="line"><span class="comment">         * 在打包定义版本的时候，版本规则:</span></span><br><span class="line"><span class="comment">         * 1.版本号只能是三位，如1.12.18,中间只能两个小数点；相反1.12.18.2或者1.22等禁用的。</span></span><br><span class="line"><span class="comment">         * 2.版本号不能超过100，如定义到1.0.99或者1.99.1时，之后的下个版本不能定义1.0.100或1.100.0</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">let</span> schemaVersion : <span class="type">UInt64</span> <span class="operator">=</span> <span class="type">UInt64</span>(currentVersionStr <span class="keyword">as</span> <span class="type">String</span>)<span class="operator">!</span></span><br><span class="line">        <span class="keyword">let</span> config <span class="operator">=</span> <span class="type">Realm</span>.<span class="type">Configuration</span>(</span><br><span class="line">            fileURL: defaultUrl<span class="operator">?</span>.appendingPathComponent(<span class="string">&quot;<span class="subst">\(realmName)</span>&quot;</span>),</span><br><span class="line">            schemaVersion: schemaVersion,</span><br><span class="line">            migrationBlock: &#123; migration, oldSchemaVersion <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span> (oldSchemaVersion <span class="operator">&lt;</span> schemaVersion) &#123;</span><br><span class="line">                    migration.enumerateObjects(ofType: <span class="type">Person</span>.className()) &#123; (oldObject, newObject) <span class="keyword">in</span></span><br><span class="line">												 <span class="comment">// 新增字段</span></span><br><span class="line">                         newObject<span class="operator">!</span>[<span class="string">&quot;email&quot;</span>] <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    migration.enumerateObjects(ofType: <span class="type">Student</span>.className()) &#123; (oldObject, newObject) <span class="keyword">in</span></span><br><span class="line">												 <span class="comment">// 改字段</span></span><br><span class="line">                         <span class="keyword">let</span> firstName <span class="operator">=</span> oldObject<span class="operator">!</span>[<span class="string">&quot;firstName&quot;</span>] <span class="keyword">as!</span> <span class="type">String</span></span><br><span class="line">                         <span class="keyword">let</span> lastName <span class="operator">=</span> oldObject<span class="operator">!</span>[<span class="string">&quot;lastName&quot;</span>] <span class="keyword">as!</span> <span class="type">String</span></span><br><span class="line">                         newObject<span class="operator">!</span>[<span class="string">&quot;fullName&quot;</span>] <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(firstName)</span> <span class="subst">\(lastName)</span>&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="type">Realm</span>.<span class="type">Configuration</span>.defaultConfiguration <span class="operator">=</span> config</span><br><span class="line">        <span class="keyword">_</span> <span class="operator">=</span> <span class="keyword">try!</span> <span class="type">Realm</span>()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p><strong>个人博客:</strong> 🏡 <a href="https://forgetsou.github.io/">ForgetSou</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>RealmSwift</tag>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>快速算法</title>
    <url>/2020/10/16/%E5%BF%AB%E9%80%9F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一、排序算法"><a href="#一、排序算法" class="headerlink" title="一、排序算法"></a>一、排序算法</h1><h2 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h2><blockquote>
<p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢”浮”到数列的顶端。</p>
<p>作为最简单的排序算法之一，冒泡排序给我的感觉就像 Abandon 在单词书里出现的感觉一样，每次都在第一页第一位，所以最熟悉。冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来</p>
</blockquote>
<h3 id="1-1-算法步骤"><a href="#1-1-算法步骤" class="headerlink" title="1.1 算法步骤"></a>1.1 算法步骤</h3><blockquote>
<p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p>
<p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</p>
<p>针对所有的元素重复以上的步骤，除了最后一个。</p>
<p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)algorithm &#123;</span><br><span class="line">    [<span class="keyword">self</span> bubbleSort];</span><br><span class="line">    [<span class="keyword">self</span> quickSort];</span><br><span class="line">    [<span class="keyword">self</span> selectSort];</span><br><span class="line">    [<span class="keyword">self</span> heapSelectSort];</span><br><span class="line">    [<span class="keyword">self</span> insertSort];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 冒泡算法</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)bubbleSort &#123;</span><br><span class="line">  <span class="built_in">NSMutableArray</span> *array = [<span class="built_in">NSMutableArray</span> arrayWithArray:@[@<span class="number">23</span>, @<span class="number">13</span>, @<span class="number">42</span>, @<span class="number">59</span>, @<span class="number">10</span>, @<span class="number">12</span>, @<span class="number">18</span>, @<span class="number">29</span>, @<span class="number">2</span>, @<span class="number">5</span>, @<span class="number">30</span>, @<span class="number">50</span>]];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.count - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.count - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">          <span class="built_in">NSLog</span>(<span class="string">@&quot;%d  %d&quot;</span>, i, j);</span><br><span class="line">          <span class="keyword">if</span> ([array[j] integerValue] &gt; [array[j+<span class="number">1</span>] integerValue]) &#123;</span><br><span class="line">              [array exchangeObjectAtIndex:j withObjectAtIndex:j+<span class="number">1</span>];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, array);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 快速排序算法</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)quickSort &#123;</span><br><span class="line">  <span class="built_in">NSMutableArray</span> *array = [<span class="built_in">NSMutableArray</span> arrayWithArray:@[@<span class="number">23</span>, @<span class="number">13</span>, @<span class="number">42</span>, @<span class="number">59</span>, @<span class="number">10</span>, @<span class="number">12</span>, @<span class="number">18</span>, @<span class="number">29</span>, @<span class="number">2</span>, @<span class="number">5</span>, @<span class="number">30</span>, @<span class="number">50</span>]];</span><br><span class="line">  [<span class="keyword">self</span> quickSortArray:array leftIndex:<span class="number">0</span> rightIndex:array.count - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)quickSortArray:(<span class="built_in">NSMutableArray</span> *)array leftIndex:(<span class="built_in">NSInteger</span>)left rightIndex:(<span class="built_in">NSInteger</span>)right &#123;</span><br><span class="line">  <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//记录比较基准数</span></span><br><span class="line">  <span class="built_in">NSInteger</span> temp = [array[left] integerValue];</span><br><span class="line">  <span class="built_in">NSInteger</span> i = left;</span><br><span class="line">  <span class="built_in">NSInteger</span> j = right;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">/**** 首先从右边j开始查找比基准数小的值 ***/</span></span><br><span class="line">      <span class="keyword">while</span> ([array[j] integerValue] &gt;= temp &amp;&amp; i &lt; j)</span><br><span class="line">      &#123;</span><br><span class="line">          j--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/**** 当在右边查找到一个比基准数小的值时，就从i开始往后找比基准数大的值 ***/</span></span><br><span class="line">      <span class="keyword">while</span>([array[i] integerValue] &lt;= temp &amp;&amp; i &lt; j)</span><br><span class="line">      &#123;</span><br><span class="line">          i++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">      &#123;</span><br><span class="line">          [array exchangeObjectAtIndex:j withObjectAtIndex:i];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//将基准数放到正确位置</span></span><br><span class="line">  [array exchangeObjectAtIndex:i withObjectAtIndex:left];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**** 递归排序 ***/</span></span><br><span class="line">  <span class="comment">//排序基准数左边的</span></span><br><span class="line">  [<span class="keyword">self</span> quickSortArray:array leftIndex:left rightIndex:i - <span class="number">1</span>];</span><br><span class="line">  <span class="comment">//排序基准数右边的</span></span><br><span class="line">  [<span class="keyword">self</span> quickSortArray:array leftIndex:i+<span class="number">1</span> rightIndex:right];</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, array);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/// 直接选择排序01</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)selectSort &#123;</span><br><span class="line">  <span class="built_in">NSMutableArray</span> *array = [<span class="built_in">NSMutableArray</span> arrayWithArray:@[@<span class="number">23</span>, @<span class="number">13</span>, @<span class="number">42</span>, @<span class="number">59</span>, @<span class="number">10</span>, @<span class="number">12</span>, @<span class="number">18</span>, @<span class="number">29</span>, @<span class="number">2</span>, @<span class="number">5</span>, @<span class="number">30</span>, @<span class="number">50</span>, @<span class="number">42</span>]];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.count - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; array.count; j++) &#123;</span><br><span class="line">          <span class="keyword">if</span> ([array[i] integerValue] &gt; [array[j] integerValue]) &#123;</span><br><span class="line">              [array exchangeObjectAtIndex:i withObjectAtIndex:j];</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, array);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 直接选择排序02(堆栈二叉树)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)heapSelectSort &#123;</span><br><span class="line">  <span class="built_in">NSMutableArray</span> *array = [<span class="built_in">NSMutableArray</span> arrayWithArray:@[@<span class="number">23</span>, @<span class="number">13</span>, @<span class="number">42</span>, @<span class="number">59</span>, @<span class="number">10</span>, @<span class="number">12</span>, @<span class="number">18</span>, @<span class="number">29</span>, @<span class="number">2</span>, @<span class="number">5</span>, @<span class="number">30</span>, @<span class="number">50</span>, @<span class="number">42</span>]];</span><br><span class="line">  <span class="comment">//循环建立初始堆</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = array.count * <span class="number">0.5</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      [<span class="keyword">self</span> heapAdjustWithArray:array parentIndex:i length:array.count];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//进行n-1次循环，完成排序</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">NSInteger</span> j = array.count - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="comment">//最后一个元素和第一个元素进行交换</span></span><br><span class="line">      [array exchangeObjectAtIndex:j withObjectAtIndex:<span class="number">0</span>];</span><br><span class="line">      <span class="comment">//筛选R[0]结点，得到i-1个结点的堆</span></span><br><span class="line">      [<span class="keyword">self</span> heapAdjustWithArray:array parentIndex:<span class="number">0</span> length:j];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;堆排序升序结果是---&gt;%@&quot;</span>,array);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)heapAdjustWithArray:(<span class="built_in">NSMutableArray</span> *)array</span><br><span class="line">      parentIndex:(<span class="built_in">NSInteger</span>)parentIndex</span><br><span class="line">           length:(<span class="built_in">NSInteger</span>)length &#123;</span><br><span class="line">  <span class="built_in">NSInteger</span> temp = [array[parentIndex] integerValue]; <span class="comment">//temp保存当前父结点</span></span><br><span class="line">  <span class="built_in">NSInteger</span> child = <span class="number">2</span> * parentIndex + <span class="number">1</span>; <span class="comment">//先获得左孩子</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (child &lt; length) &#123;</span><br><span class="line">      <span class="comment">//如果有右孩子结点，并且右孩子结点的值大于左孩子结点，则选取右孩子结点</span></span><br><span class="line">      <span class="keyword">if</span> (child + <span class="number">1</span> &lt; length &amp;&amp; [array[child] integerValue] &lt; [array[child + <span class="number">1</span>] integerValue]) &#123;</span><br><span class="line">          child++;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">      <span class="comment">//如果父结点的值已经大于孩子结点的值，则直接结束</span></span><br><span class="line">      <span class="keyword">if</span> (temp &gt;= [array[child] integerValue]) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//把孩子结点的值赋值给父结点</span></span><br><span class="line">      array[parentIndex] = array[child];</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//选取孩子结点的左孩子结点，继续向下筛选</span></span><br><span class="line">      parentIndex = child;</span><br><span class="line">      child = <span class="number">2</span> * child + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  array[parentIndex] = @(temp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/// 插入排序</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)insertSort &#123;</span><br><span class="line">  <span class="built_in">NSMutableArray</span> *array = [<span class="built_in">NSMutableArray</span> arrayWithArray:@[@<span class="number">23</span>, @<span class="number">13</span>, @<span class="number">42</span>, @<span class="number">59</span>, @<span class="number">10</span>, @<span class="number">12</span>, @<span class="number">18</span>, @<span class="number">29</span>, @<span class="number">2</span>, @<span class="number">5</span>, @<span class="number">30</span>, @<span class="number">50</span>, @<span class="number">42</span>]];</span><br><span class="line">  <span class="built_in">NSInteger</span> j;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">1</span>; i &lt; array.count; i++) &#123;</span><br><span class="line">  <span class="comment">//取出每一个待插入的数据，从array[1]开始查找</span></span><br><span class="line">  <span class="built_in">NSInteger</span> temp = [array[i] integerValue];</span><br><span class="line">  <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; temp &lt; [array[j] integerValue]; j--) &#123;</span><br><span class="line">          <span class="comment">//如果之前的数比temp大，就将这个数往后移动一个位置，留出空来让temp插入，和整理扑克牌类似</span></span><br><span class="line">          array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">          array[j] = @(temp);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@&quot;插入排序结果是---&gt;%@&quot;</span>,array);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Other</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>日常报错收集记录</title>
    <url>/2020/11/12/%E6%97%A5%E5%B8%B8%E6%8A%A5%E9%94%99%E6%94%B6%E9%9B%86%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="1-LGAlertView库viewWillTransitionToSize崩溃"><a href="#1-LGAlertView库viewWillTransitionToSize崩溃" class="headerlink" title="1.LGAlertView库viewWillTransitionToSize崩溃"></a>1.LGAlertView库viewWillTransitionToSize崩溃</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewWillTransitionToSize:(<span class="built_in">CGSize</span>)size withTransitionCoordinator:(<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerTransitionCoordinator</span>&gt;)coordinator &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillTransitionToSize:size withTransitionCoordinator:coordinator];</span><br><span class="line"></span><br><span class="line">      __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">   dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">0.0</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        [<span class="built_in">UIView</span> animateWithDuration:coordinator.transitionDuration animations:^&#123;</span><br><span class="line">            [<span class="keyword">self</span> setNeedsStatusBarAppearanceUpdate];</span><br><span class="line">            [<span class="keyword">self</span>.alertView layoutValidateWithSize:size];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>-[_UIViewControllerOneToOneTransitionContext _duration]: message sent to deallocated instance</code></p>
<p><code>po coordinator.transitionDuration</code>输出 <code>error: property &#39;transitionDuration&#39; not found on object of type &#39;id&#39;</code></p>
<p><strong>解决方法：</strong></p>
<p>使用硬编码的持续时间，<code>pod &#39;LGAlertView&#39;</code>更改为vovnit的派生库</p>
<p><code>pod &#39;LGAlertView&#39;, :git =&gt; &#39;https://github.com/vovnit/LGAlertView.git&#39;</code></p>
<p><strong>vovnit的派生库的具体解决方案</strong></p>
<p>@vovnit的具体解决方式如下：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewWillTransitionToSize:(<span class="built_in">CGSize</span>)size withTransitionCoordinator:(<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerTransitionCoordinator</span>&gt;)coordinator &#123;</span><br><span class="line">    <span class="keyword">if</span> (coordinator) &#123;</span><br><span class="line">        [<span class="keyword">super</span> viewWillTransitionToSize:size withTransitionCoordinator:coordinator];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@try</span> &#123;</span><br><span class="line">        [[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</span><br><span class="line">            __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">            [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.5</span> animations:^&#123;</span><br><span class="line">                <span class="keyword">if</span> (weakSelf) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ([weakSelf respondsToSelector:<span class="keyword">@selector</span>(setNeedsStatusBarAppearanceUpdate)]) &#123;</span><br><span class="line">                        [weakSelf setNeedsStatusBarAppearanceUpdate];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (weakSelf.alertView) &#123;</span><br><span class="line">                        [weakSelf.alertView layoutValidateWithSize:size];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125; <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125; <span class="keyword">@finally</span> &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-Name-types-using-UpperCamelCase"><a href="#2-Name-types-using-UpperCamelCase" class="headerlink" title="2. Name types using UpperCamelCase."></a>2. Name types using UpperCamelCase.</h2><p>骆驼拼写法</p>
<p>在单次底部有波浪线提示<code>Typo: In word &#39;&#39;</code>时，是由于未按照骆驼拼写法进行定义，一般是单词拼写错误了。如：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandowWords</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> wordPair = <span class="keyword">new</span> WordPair.random();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Padding(</span><br><span class="line">        padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">      child: <span class="keyword">new</span> Text(<span class="string">&#x27;随机字符串：<span class="subst">$&#123;wordPair.toString()&#125;</span>&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RandowWords底部会提示<code>Typo:In word &#39;Randow&#39;</code>；此时是由于“随机”单词拼写错误，修改为Random就可以了。</p>
<h2 id="3-hexo-报错"><a href="#3-hexo-报错" class="headerlink" title="3. hexo 报错"></a>3. hexo 报错</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">hexo s</span><br><span class="line"><span class="type">ERROR</span> <span class="type">Cannot</span> find module &#x27;hexo&#x27; from &#x27;<span class="operator">/</span><span class="type">Users</span><span class="operator">/</span>pv<span class="operator">/</span>myBlog<span class="operator">/</span>blog&#x27;</span><br><span class="line"><span class="type">ERROR</span> <span class="type">Local</span> hexo loading failed <span class="keyword">in</span> <span class="operator">~/</span>myBlog<span class="operator">/</span>blog</span><br><span class="line"><span class="type">ERROR</span> <span class="type">Try</span> running: &#x27;rm <span class="operator">-</span>rf node_modules <span class="operator">&amp;&amp;</span> npm install <span class="operator">--</span>force&#x27;</span><br></pre></td></tr></table></figure>

<p>只需要运行以下命令安装下就可以了</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="operator">-</span>util <span class="operator">--</span>save</span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p><strong>个人博客:</strong> 🏡 <a href="https://forgetsou.github.io/">ForgetSou</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>日常收集</tag>
      </tags>
  </entry>
  <entry>
    <title>📚《高性能iOS应用开发》-内存管理</title>
    <url>/2021/09/06/%F0%9F%93%9A%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDiOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E3%80%8B-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gu6ymntbv1j60ku0kzmza02.jpg" alt="image.png"></p>
<h2 id="一-简述"><a href="#一-简述" class="headerlink" title="一. 简述"></a>一. 简述</h2><p>​    手机的内存资源是非常有限的，如果一个应用的内存使用量超过了单个进程的上限，就会被操作系统终止使用，正式这个原因，内存管理在iOS中扮演着核心的角色。<br>​    与(基于垃圾回收的)Java 运行时不同，Objective-C 和 Swift 的 iOS 运行时使用引用计数。 使用引用计数的负面影响在于，如果开发人员不够小心，那么可能会出现重复的内存释放 和循环引用的情况。</p>
<h3 id="1-内存消耗"><a href="#1-内存消耗" class="headerlink" title="1.内存消耗"></a>1.内存消耗</h3><p>​    内存消耗指的是应用消耗的 RAM。应用中的内存消耗分为两部分:栈大小和堆大小。</p>
<h4 id="1-1-栈大小"><a href="#1-1-栈大小" class="headerlink" title="1.1 栈大小"></a>1.1 栈大小</h4><p>​    可被递归调用的最大方法数<br>​    每个方法都有其自己的栈帧，并会消耗整体的栈空间。如果你调 用 main，那么 main 将调用 method1，而 method1 又将调用 method2，这就存在三个栈帧 了，且每个栈帧都会消耗一定字节的内存。</p>
<p>​    一个方法中最多可以使用的变量个数<br>​    视图层级中可以嵌入的最大视图深度<br>​    渲染复合视图将在整个视图层级树中递归地调用 layoutSubViews 和 drawRect 方法。如 果层级过深，可能会导致栈溢出。</p>
<h4 id="1-2-堆大小"><a href="#1-2-堆大小" class="headerlink" title="1.2 堆大小"></a>1.2 堆大小</h4><p>​    每个进程的所有线程共享同一个堆。一个应用可以使用的堆大小通常远远小于设备的 RAM 值。例如，iPhone 5S 拥有大约 1GB 的 RAM，但分配给一个应用的堆大小最多不到 512MB。应用并不能控制分配给它的堆。只有操作系统才能管理堆。<br>​    使用 NSString、载入图片、创建或使用 JSON/XML 数据、使用视图等都会消耗大量的堆 内存。如果你的应用大量使用图片(与 Flickr 和 Instagram 应用类似)，那么你需要格外关 注平均值和峰值内存使用的最小化。<br>​    didReceiveMemoryWarning<br>​    建议使用量不要超过 80%~85%，要给操作系统的核 心服务留下足够多的内存。</p>
<h3 id="2-内存管理模型"><a href="#2-内存管理模型" class="headerlink" title="2.内存管理模型"></a>2.内存管理模型</h3><p>​    内存管理模型基于持有关系的概念。如果一个对象正处于被持有状态，那它占用的内存就 不能被回收。<br>​    当一个对象创建于某个方法的内部时，那该方法就持有这个对象了。如果这个对象从方法 返回，则调用者声称建立了持有关系。这个值可以赋值给其他变量，对应的变量同样会声称建立了持有关系。<br>​    一旦与某个对象相关的任务全部完成，那么就是放弃了持有关系。这一过程没有转移持有关系，而是分别增加或减少了持有者的数量。当持有者的数量降为零时，对象会被释放， 相 关 的 内存会被回收。<br>​    这种持有关系计数通常被正式称为引用计数。当你亲自管理时，它被称为手动引用计数 (manual reference counting，MRC)。虽然现在已经十分罕见，但 MRC 对理解问题很有帮助。现如今的应用大都使用自动引用计数(automatic reference counting ，ARC)。</p>
<h3 id="3-自动释放对象"><a href="#3-自动释放对象" class="headerlink" title="3.自动释放对象"></a>3.自动释放对象</h3><p>​    自动释放对象让你能够放弃对一个对象的持有关系，但延后对它的销毁。当在方法中创建 一个对象并需要将其返回时，自动释放就显得非常有用。自动释放可以帮助在 MRC 中管 理对象的生命周期。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-(NSString *) address</span><br><span class="line">     &#123;</span><br><span class="line">         NSString *result = [[[NSString alloc]</span><br><span class="line">                 initWithFormat:@&quot;%@\n%@\n%@, %@&quot;,</span><br><span class="line">                 self.line1, self.line2, self.city, self.state]</span><br><span class="line">autorelease]; return result;</span><br><span class="line">&#125;</span><br><span class="line">(1) 持有的对象(在上述示例中是 NSString)是 alloc 方法返回的。</span><br><span class="line">(2) 确保没有内存泄漏，你必须在失去引用之前放弃持有关系。</span><br><span class="line">(3) 但是，如果使用了 release，那么对象的释放将发生在返回之前，因而方法将返回一个</span><br><span class="line">无效的引用。</span><br><span class="line">(4) autorelease 表明你想要放弃持有关系，同时允许方法的调用者在对象被释放之前使用</span><br><span class="line">对象。</span><br></pre></td></tr></table></figure>

<p>​    当创建一个对象并将其从非 alloc 方法返回时，应使用 autorelease。这样 可以确保对象将被释放，并尽量在调用方法执行完成时立即释放。</p>
<h3 id="4-自动释放池"><a href="#4-自动释放池" class="headerlink" title="4.自动释放池"></a>4.自动释放池</h3><p>​    自动释放池块是允许你放弃对一个对象的持有关系、但可避免它立即被回收的一个工具。当从方法返回对象时，这种功能非常有用。</p>
<p>​    它还能确保在块内创建的对象会在块完成时被回收。这在创建了多个对象的场景中非常有 用。本地的块可以用来尽早地释放其中的对象，从而使内存用量保持在较低的水平。</p>
<p>​    自动释放池块用 @autoreleasepool 表示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main(int argc, char * argv[]) &#123;  </span><br><span class="line">    @autoreleasepool &#123;  </span><br><span class="line">  </span><br><span class="line">        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</span><br><span class="line">    &#125;         </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>​    块中收到过 autorelease 消息的所有对象都会在 autoreleasepool 块结束时收到 release 消 息。更加重要的是，每个 autorelease 调用都会发送一个 release 消息。这意味着如果一 个对象收到了不止一次的 autorelease 消息，那它也会多次收到 release 消息。这一点很 棒，因为这能保证对象的引用计数下降到使用 autoreleasepool 块之前的值。如果计数为 0，则对象将被回收，从而保持较低的内存使用率。</p>
<p>​    看了 main 方法的代码后，你会发现整个应用都在一个 autoreleasepool 块中，这意味着所 有的 autorelease 对象最后都会被回收，不会导致内存泄漏。</p>
<p>​    Cocoa 框架希望代码能在 autoreleasepool 块内执行，否则 autorelease 对象将无法被 释放，从而导致应用发生内存泄漏。</p>
<p>AppKit 和 UIKit 框架将事件 - 循环的迭代放入了 autoreleasepool 块中。因此，通常 不需要你自己再创建 autoreleasepool 块了。</p>
<p>​    在一些特定情况下，你很可能想创建自己的 autoreleasepool 块，例如以下这些情况。</p>
<ul>
<li><p>当你有一个创建了很多临时对象的循环时<br> 在循环中使用 autoreleasepool 块可以为每个迭代释放内存。虽然迭代前后最终的内存 使用相同，但你的应用的最大内存需求可以大大降低。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">@autoreleasepool &#123;</span><br><span class="line">    NSUInteger *userCount = userDatabase.userCount;</span><br><span class="line">    for(NSUInteger *i = 0; i &lt; userCount;     i++) &#123;</span><br><span class="line">        @autoreleasepool &#123;</span><br><span class="line">            Person *p = [userDatabase userAtIndex:i];</span><br><span class="line">            NSString *fname = p.fname;</span><br><span class="line">            if(fname == nil) &#123;</span><br><span class="line">                fname = [self askUserForFirstName];</span><br><span class="line">            &#125;</span><br><span class="line">            NSString *lname = p.lname;</span><br><span class="line">            if(lname == nil) &#123;</span><br><span class="line">                lname = [self askUserForLastName];</span><br><span class="line">            &#125;</span><br><span class="line">//...</span><br><span class="line">            [userDatabase updateUser:p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>当你创建一个线程时</p>
<p>每个线程都将有它自己的 autoreleasepool 块栈。主线程用自己的 autoreleasepool 启 动，因为它来自统一生成的代码。然而，对于任何自定义的线程，你必须创建自己的 autoreleasepool。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-(void)myThreadStart:(id)obj &#123; </span><br><span class="line">	@autoreleasepool &#123;</span><br><span class="line">		//新线程的代码 </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">//其他地方 </span><br><span class="line">&#123;</span><br><span class="line">	NSThread *myThread = [[NSThread alloc] initWithTarget:self 				selector:@selector(myThreadStart:) object:nil];</span><br><span class="line">	[myThread start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-自动引用计数"><a href="#5-自动引用计数" class="headerlink" title="5. 自动引用计数"></a>5. 自动引用计数</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gup6bioptfj610u0ew0tx02.jpg" alt="image-20210922100020465"></p>
<ul>
<li><p>不能实现或调用 retain、release、autorelease 或 retainCount 方法。这一限制不仅针 对对象，对选择器同样有效。因此，[obj release]或@selector(retain)是编译时的错误。</p>
</li>
<li><p>可以实现 dealloc 方法，但不能调用它们。不仅不能调用其他对象的 dealloc 方法，也 不能调用超类。[super dealloc] 是编译时的错误。<br> 但你仍然可以对 Core Foundation 类型的对象调用 CFRetain、CFRelease 等相关方法。</p>
</li>
<li><p>不能调用 NSAllocateObject 和 NSDeallocateObject 方法。应使用 alloc 方法创建对象， 运行时负责回收对象。</p>
</li>
<li><p>不能在 C 语言的结构体内使用对象指针。</p>
</li>
<li><p>不能在 id 类型和 void * 类型之间自动转换。如果需要，那么你必须做显示转换。</p>
</li>
<li><p>不能使用 NSAutoreleasePool，要替换使用 autoreleasepool 块。</p>
</li>
<li><p>不能使用 NSZone 内存区域。</p>
</li>
<li><p>属性的访问器名称不能以 new 开头，以确保与 MRC 的互操作性。</p>
</li>
<li><p>虽然总的来说需要避免许多事情，但仍然可以混合使用 ARC 和 MRC 代码。</p>
</li>
</ul>
<h3 id="6-引用类型"><a href="#6-引用类型" class="headerlink" title="6. 引用类型"></a>6. 引用类型</h3><ul>
<li><p>强引用 </p>
<p>强引用是默认的引用类型。被强引用指向的内存不会被释放。强引用会对引用计数加 1，从而扩展对象的生命周期。</p>
</li>
<li><p>弱引用 </p>
<p>弱引用是一种特殊的引用类型。它不会增加引用计数，因而不会扩展对象的生命周期。 在启用了 ARC 的 Objective-C 编程中，弱引用格外重要。</p>
</li>
</ul>
<h4 id="6-1-变量限定符"><a href="#6-1-变量限定符" class="headerlink" title="6.1 变量限定符"></a>6.1 变量限定符</h4><p>ARC 为变量供了四种生命周期限定符。</p>
<ul>
<li><p>__strong</p>
<p>这是默认的限定符，无需显示引入。只要有强引用指向，对象就会长时间驻留在内存 中。可以将 __strong 理解为 retain 调用的 ARC 版本。</p>
</li>
<li><p>__weak</p>
<p>这表明引用不会保持被引用对象的存活。当没有强引用指向对象时，弱引用会被置为 nil。可将__weak 看作是 assign 操作符的 ARC 版本，只是对象被回收时，__weak 具有 安全性——指针将自动被设置为 nil。</p>
</li>
<li><p>__unsafe_unretained</p>
<p>与 __weak 类似，只是当没有强引用指向对象时，__unsafe_unretained 不会被置为 nil。 可将其看作 assign 操作符的 ARC 版本。</p>
</li>
<li><p>__autoreleasing</p>
<p>__autoreleasing用于由引用使用id *传递的消息参数。它预期了autorelease方法会 在传递参数的方法中被调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 创建对象后引用计数为 1，并且对象在 p1 引用期间不会被回收。</span><br><span class="line">Person * __strong p1 = [[Person alloc] init]; </span><br><span class="line">// 创建对象后引用计数为 0，对象会被立即释放，且 p2 将被设置为 nil。</span><br><span class="line">Person * __weak p2 = [[Person alloc] init]; </span><br><span class="line">// 创建对象后引用计数为 1，对象会被立即释放，但 p3 不会被设置为 nil。</span><br><span class="line">Person * __unsafe_unretained p3 = [[Person alloc] init]; </span><br><span class="line">// 创建对象后引用计数为 1，当方法返回时对象会被立即释放。</span><br><span class="line">Person * __autoreleasing p4 = [[Person alloc] init];</span><br></pre></td></tr></table></figure>

<h4 id="6-2-属性限定符"><a href="#6-2-属性限定符" class="headerlink" title="6.2 属性限定符"></a>6.2 属性限定符</h4><ul>
<li><p><code>strong</code></p>
<p>默认符，指定了__strong关系</p>
</li>
<li><p><code>weak</code></p>
<p>指定了__weak关系</p>
</li>
<li><p><code>assign</code></p>
</li>
<li><p><code>copy</code></p>
<p>暗指了 __strong 关系。此外，它还暗示了 setter 中的复制语义</p>
</li>
<li><p><code>retain</code></p>
<p>指定了 __strong 关系。</p>
</li>
<li><p><code>unsafe_unretained</code></p>
<p>指定了 __unsafe_unretained 关系。</p>
</li>
</ul>
<h3 id="7-僵尸对象"><a href="#7-僵尸对象" class="headerlink" title="7. 僵尸对象"></a>7. 僵尸对象</h3><p>​    僵尸对象是用于捕捉内存错误的调试功能。</p>
<p>​    通常情况下，当引用计数降为 0 时对象会立即被释放，但这使得调试变得困难。如果开启 了僵尸对象，那么对象就不会立即释放内存，而是被标记为僵尸。任何试图对其进行访 问的行为都会被日志记录，因而你可以在对象的生命周期中跟踪对象在代码中被使用的 位置。</p>
<p>​    NSZombieEnabled 是一个环境变量，可以控制 Core Foundation 的运行时是否将使用僵尸对 象。不应长期保留 NSZombieEnabled，因为默认情况下不会有对象被真正析构，这会导致应 用使用大量的内存。特别说明一点，在发布的构建包中一定要禁用 NSZombieEnabled。</p>
<p>​    要想设置 NSZombieEnabled 环境变量，需要进入 Product → Scheme → Edit Scheme。选择 左侧的 Run，然后在右侧选取 Diagnostics 标签页。选中 Enable Zombie Objects 选项。</p>
</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p><strong>个人博客:</strong> 🏡 <a href="https://forgetsou.github.io/">ForgetSou</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>《高性能iOS应用开发》</tag>
      </tags>
  </entry>
  <entry>
    <title>📚《高性能iOS应用开发》-移动端性能</title>
    <url>/2021/08/11/%F0%9F%93%9A%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDiOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E3%80%8B-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%80%A7%E8%83%BD/</url>
    <content><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gtczx6o8frj60u00u742m02.jpg" alt="img"></p>
<h1 id="2-性能指标"><a href="#2-性能指标" class="headerlink" title="2. 性能指标"></a>2. 性能指标</h1><p>性能指标是面向用户的各种属性。每个指标可能是一个或多个可测量工程参数的一个要素。</p>
<h3 id="2-1-内存"><a href="#2-1-内存" class="headerlink" title="2.1 内存"></a>2.1 内存</h3><p>内存涉及运行应用所需的 RAM 最小值，以及应用消耗的内存平均值和峰值。最小内存值，会严重限制硬件，而更高的内存平均值和峰值意味着更多的后台应用会被强制关闭。</p>
<p>同时还要确保没有泄漏内存。随时间流逝而持续增长的内存消耗意味着，应用很可能会因 为内存不足的异常而崩溃。 </p>
<h3 id="2-2-电量消耗"><a href="#2-2-电量消耗" class="headerlink" title="2.2 电量消耗"></a>2.2 电量消耗</h3><p>在编写高性能代码时，电量消耗是一个需要重点处理的重要因素。就执行时间和 CPU 资 源的利用而言，我们不仅要实现高效的数据结构和算法，还需要考虑其他的因素。如果某 个应用是个电池黑洞，那么一定不会有人喜欢它。 </p>
<p>电量消耗不仅仅与计算 CPU 周期有关，还包括高效地使用硬件。除了要实现电量消耗最 小化，还要确保不会影响用户体验。 </p>
<h3 id="2-3-初始化时间"><a href="#2-3-初始化时间" class="headerlink" title="2.3 初始化时间"></a>2.3 初始化时间</h3><p>应用在启动时应执行刚好够用的任务以完成初始化，从而满足用户的使用需求。执行这些 任务消耗的时间就是应用的初始化时间。刚好够用是一个开放式用语——正确的平衡点取 决于应用的需要。 </p>
<p>在首次使用应用时创建对象并进行初始化是一个合理的选择，例如，直到需要使用对象时 才创建对象。这种方式被称为惰性初始化。这是一种很好的策略，但也要考虑不能让用户 总是在执行后续任务时等待。 </p>
<p>下面列举了你可能想在应用初始化阶段执行的一些动作，排名不分先后。             </p>
<ul>
<li><p>检查应用是否为首次启动。</p>
</li>
<li><p>检查用户是否已经登录。</p>
</li>
<li><p>如果用户已经登录，尽可能地载入之前的状态。 </p>
</li>
<li><p>连接服务器以拉取最新的变更。 </p>
</li>
<li><p>检查应用是否由某个深层链接唤起。如果是，还需要载入深层链接相应的 UI 和状态。 </p>
</li>
<li><p>检查是否存在应用上次启动时挂起的任务，需要时恢复它们。</p>
</li>
<li><p>初始化后续需要使用的对象和线程池。</p>
</li>
<li><p>初始化依赖项(如对象关系映射、崩溃报告系统和缓存)。 </p>
</li>
</ul>
<h3 id="2-4-执行速度"><a href="#2-4-执行速度" class="headerlink" title="2.4 执行速度"></a>2.4 执行速度</h3><p>一旦启动应用，用户总是希望它可以尽可能快地工作。一切必要的处理都应该在尽可能短 的时间内完成。 </p>
<p>例如，在照片应用中，用户通常希望看到调整亮度或对比度等简单效果的实时预览效果。 因此，相应的处理需要在几毫秒内完成。 </p>
<h3 id="2-5-响应速度"><a href="#2-5-响应速度" class="headerlink" title="2.5 响应速度"></a>2.5 响应速度</h3><p>每个应用都应该快速地响应用户交互。在应用中所做的一切优化和权衡最终都应该体现在响应速度上。</p>
<p>App Store 中有许多应用可以完成相似或相关的任务。这为用户提供了很大的选择空间，而 用户基本都会选择响应最快的应用。</p>
<h3 id="2-6-缓存"><a href="#2-6-缓存" class="headerlink" title="2.6 缓存"></a>2.6 缓存</h3><p>针对任何在服务器上存储数据或通过外部来源刷新数据的应用，开发人员应该对本地存储的使用有所规划，以便应用具备离线浏览的能力。</p>
<p>例如，用户都希望邮件应用能够在无网络或设备离线的情况下浏览历史邮件。</p>
<p>同样，新闻应用也应该可以在离线模式下显示最近更新的新闻，并标记出每条新闻是否已读。</p>
<p>然而，从本地存储中载入和同步数据应该迅速、便捷。这不仅需要选择要在本地缓存的数 据和要优化的数据结构，还需要提供一系列的配置选项并确定数据同步的频率。</p>
<p>如果你的应用使用了本地存储，那么请提供一个清除数据的选项。遗憾的是，市场上的大 部分应用都没有提供此选项。更让人烦恼的是，一些应用竟然会消耗数百兆的存储空间。 用户会频繁地卸载这些应用来回收本地存储。这会导致糟糕的用户体验，从而威胁应用的 成功。</p>
<p>一定要向终端用户提供清空本地缓存的选项。如果用户开启了 iCloud 的备份功能，那么应用的数据将会消耗用户的存储限 额，请谨慎使用。</p>
<h3 id="2-7-互操作性"><a href="#2-7-互操作性" class="headerlink" title="2.7 互操作性"></a>2.7 互操作性</h3><p>用户可能会使用多个应用来完成某个任务，这就需要这些应用直接提供互操作的能力。</p>
<p>例如，一个相册可能需要一个幻灯片应用来实现最佳的浏览体验，但需要另一个应用来编辑 照片。其中浏览照片的应用要能够将照片发送到编辑器，并接收编辑后的图片。iOS 为实现应用间的互操作和数据共享提供了多种机制，其中包括 UIActivityViewController、 深层链接、MultipeerConnectivity 框架，等等。</p>
<p>为深层链接定义良好的 URL 结构与编写优异的代码来解析 URL 同样重要。类似地，使用 共享对话框共享数据时，精确识别用于分享的数据非常重要，同时，在处理不同数据源传 入的数据时还要注意安全隐患。</p>
<p>如果某个应用向附近设备共享数据时需要花费很长时间准备数据，那么用户体验就会非常 糟糕。</p>
<h3 id="2-8-网络环境"><a href="#2-8-网络环境" class="headerlink" title="2.8 网络环境"></a>2.8 网络环境</h3><p>移动设备会在不同网络环境下使用。为了确保能够提供最好的用户体验，你的应用应当适应各种网络条件:</p>
<ul>
<li><p>高带宽稳定网络</p>
</li>
<li><p>低带宽稳定网络</p>
</li>
<li><p>高带宽不稳定网络 </p>
</li>
<li><p>低带宽不稳定网络</p>
</li>
<li><p>无网络</p>
</li>
</ul>
<p>为用户提供进度指示或错误信息是相对合理的方式，无尽的等待或崩溃则让人无法接受。</p>
<h3 id="2-9-数据刷新"><a href="#2-9-数据刷新" class="headerlink" title="2.9 数据刷新"></a>2.9 数据刷新</h3><p>即使没有提供离线浏览能力，你仍然可以从服务器端周期性地刷新数据。刷新的频率和每 次传输的数据量将决定数据传输的总量。如果传输的字节数过大，那用户必然会快速耗尽 自己的流量计划。当流量消耗大到一定程度时，你的应用很可能会流失用户。</p>
<p>在 iOS 6.x 或更低版本中，在后台运行的应用不能刷新数据。从 iOS 7 开始，应用可以在后 台周期性地刷新数据。对于在线聊天类应用，持久的 HTTP 连接或原生 TCP 连接可能会非 常有用。</p>
<h3 id="2-10-多用户支持"><a href="#2-10-多用户支持" class="headerlink" title="2.10 多用户支持"></a>2.10 多用户支持</h3><p>家庭成员间可能会共享移动设备，或者一个用户可能会拥有同一应用的多个账号。例如， 兄弟姐妹间可能会共享一个 iPad 来玩游戏。再比如，家庭成员可能会在旅游时配置一个设 备来查收全家人的电子邮件，以减少漫游费用，尤其是在境外旅游时。类似地，一个人也 可能会配置多个电子邮件账号。</p>
<p>是否支持多个并发用户取决于产品的需要。一旦决定提供此类功能，请参考以下准则。</p>
<ul>
<li><p>添加新用户应尽可能高效。</p>
</li>
<li><p>在不同用户之间更新应尽可能高效。</p>
</li>
<li><p>在不同用户之间切换应尽可能高效。</p>
</li>
<li><p>用户数据的界限应该简洁且没有 bug。</p>
</li>
</ul>
<h3 id="2-11-单点登录"><a href="#2-11-单点登录" class="headerlink" title="2.11 单点登录"></a>2.11 单点登录</h3><p>如果你已经创建了多个允许或需要登录的应用，那么支持单点登录(single sign-on，SSO) 是非常棒的选择。如果用户登录了一个应用，只需要点击一次，就可以登录到其他的应 用中。</p>
<p>这个过程不仅需要支持跨应用的数据共享，还需要分享状态、跨应用同步等。例如，如果 用户注销了其中某个应用，则通过 SSO 登录的所有其他应用也应能注销掉。</p>
<p>此外，应用之间的同步应该是安全的。</p>
<h3 id="2-12-安全"><a href="#2-12-安全" class="headerlink" title="2.12 安全"></a>2.12 安全</h3><p>安全对移动应用来说是最重要的，因为敏感信息可能会在应用间共享。因此，对所有通信以及本地数据和共享数据进行加密就显得尤为重要了。</p>
<p>实现安全需要更多的计算、内存和存储，但这与最大化运行速度、最小化内存和存储使用 的目标相冲突。</p>
<p>因此，你需要在安全和其他因素之间进行权衡。</p>
<p>引入多个安全层会影响性能，并对用户体验造成可感知的负面影响。如何设定安全的基线 需要参考对用户群体的统计分析。此外，硬件在其中扮演了重要的角色:选择会因为不同 设备的计算能力而有所不同。</p>
<h3 id="2-13-崩溃"><a href="#2-13-崩溃" class="headerlink" title="2.13 崩溃"></a>2.13 崩溃</h3><p>应用可能会而且确实会崩溃。过度优化会导致崩溃。同样，使用原始 C 代码也可能会导致 崩溃。</p>
<p>高性能的应用不仅应尽可能地避免崩溃，还应该在崩溃发生时优雅地恢复，尤其是在进行 某个操作的过程中发生崩溃时。</p>
<h2 id="3-性能分析"><a href="#3-性能分析" class="headerlink" title="3. 性能分析"></a>3. 性能分析</h2><p>我们在前面讨论过一些参数，通过测量它们来分析应用的方式有两种:采样和埋点。</p>
<h3 id="3-1-采样"><a href="#3-1-采样" class="headerlink" title="3.1 采样"></a>3.1 采样</h3><p>顾名思义，采样(或基于探测点的性能分析)是指以一定的周期间隔采集状态，这通常需 要借助工具。由于不会干扰应用的执行，因此采样可以 很好地提供应用的全景图。采样的不足之处在于它不能返回 100% 精确的细节。如果采样 的频率是 10 毫秒，那么你就无法得知在探测点之间的 9.999 毫秒内发生了什么。</p>
<p>采样可以作为初始的性能调研手段，并可用于跟踪 CPU 和内存的使用情况。</p>
<h3 id="3-2埋点"><a href="#3-2埋点" class="headerlink" title="3.2埋点"></a>3.2埋点</h3><p>通过修改代码，记录细节信息的埋点能够提供比采样更加精确的结果。你既可以在关键部 分主动埋点，也可以在性能分析或处理用户反馈时有针对性地埋点，以便解决问题。</p>
<p>因为埋点需要注入额外代码，所以它一定会影响应用的性能，对内存或速度(或同时对二者)造成损害。</p>
<h2 id="4-测量"><a href="#4-测量" class="headerlink" title="4. 测量"></a>4. 测量</h2><p>针对工程配置、安装和代码实现共有三类任务。</p>
<p>• 构建与发布 确保能够轻松地构建和发布应用。</p>
<p>• 可测试性 确保你的代码能够同时在模拟数据和真实数据之上工作，其中包括能够模拟真实场景的 隔离环境。</p>
<p>• 可跟踪性 确保你能够通过明确问题发生的位置和代码行为来处理错误。</p>
<h3 id="4-1-设置崩溃报告"><a href="#4-1-设置崩溃报告" class="headerlink" title="4.1 设置崩溃报告"></a>4.1 设置崩溃报告</h3><p>崩溃报告系统收集用于分析应用的调试日志，获取崩溃日志的方式有很多。</p>
<ul>
<li><p>手机隐私设置</p>
</li>
<li><p>Xcode的Devices and Simulators</p>
</li>
<li><p>Xcode的Organizer获取线上奔溃日志</p>
</li>
<li><p>App Store Connects</p>
</li>
<li><p>Bugly</p>
</li>
<li><p>firebase</p>
</li>
<li><p>友盟</p>
</li>
<li><p>听云</p>
</li>
<li><p>KSCrash等开源组件</p>
</li>
</ul>
<h3 id="4-2-应用埋点"><a href="#4-2-应用埋点" class="headerlink" title="4.2 应用埋点"></a>4.2 应用埋点</h3><p>对应用进行埋点是了解用户行为的一个重要步骤，但更重要的目的是识别应用的关键路径。注入特定的代码以记录关键指标是提升应用性能的重要步骤。</p>
<p>埋点不应该取代日志。日志可以非常详细。但因为向服务器报告时会消耗网 络资源，所以你应该尽可能少地埋点。 因此，只对你和其他工程或产品团队的成员感兴趣的事件进行埋点是非常重 要的。(这些事件要包含足够多的数据以满足重要报告的需要。) 埋点和过度埋点之间并没有清晰的分界线。一开始应仅对少量报告进行埋 点，然后随着时间的推进逐步增加埋点的覆盖率。</p>
<h3 id="4-3-日志"><a href="#4-3-日志" class="headerlink" title="4.3 日志"></a>4.3 日志</h3><p>日志和埋点之间存在着细微的差别。埋点可以看作日志的子集。被埋点的任何数据都应该 记录在日志中。埋点承担了为聚合分析发布关键性能数据的职责，日志则提供了用于在不同级别跟踪应用 的细节信息，比如 debug、Verbose、info、warning 和 Error。日志的记录会贯穿应用的整 个生命周期，而埋点只应该用在开发的特定阶段。</p>
<p>埋点数据会发送到服务器，日志是记录在设备本地。</p>
<hr>
<blockquote>
<p><strong>个人博客:</strong> 🏡 <a href="https://forgetsou.github.io/">ForgetSou</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>《高性能iOS应用开发》</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS开发-AES/ECB/PKCS5Padding加解密(OC)</title>
    <url>/2021/08/11/iOS%E5%BC%80%E5%8F%91-AES-ECB-PKCS5Padding%E5%8A%A0%E8%A7%A3%E5%AF%86-OC/</url>
    <content><![CDATA[<h1 id="一-简述"><a href="#一-简述" class="headerlink" title="一. 简述"></a>一. 简述</h1><h2 id="1-加解密方式有很多，iOS常用的加密方式有"><a href="#1-加解密方式有很多，iOS常用的加密方式有" class="headerlink" title="1. 加解密方式有很多，iOS常用的加密方式有:"></a>1. 加解密方式有很多，<code>iOS</code>常用的加密方式有:</h2><ul>
<li>哈希算法: MD5、SHA</li>
<li>对称加密算法: DES、3DES、AES</li>
<li>非对称加密算法: RSA</li>
</ul>
<p>本文主要讲述<code>AES/ECB/PKCS5Padding</code>加解密方式</p>
<h1 id="二-示例"><a href="#二-示例" class="headerlink" title="二. 示例"></a>二. 示例</h1><h2 id="1-加密"><a href="#1-加密" class="headerlink" title="1. 加密"></a>1. 加密</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> k_aesECBKey                         @<span class="meta-string">&quot;AAAAA&quot;</span><span class="comment">// AAAAA只是示例，换成自己喜欢的字符串</span></span></span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line">+ (<span class="built_in">NSString</span> *)encryptText:(<span class="built_in">NSString</span> *)text &#123;</span><br><span class="line">    CCCryptorStatus status = kCCSuccess;</span><br><span class="line">    <span class="built_in">NSData</span> *data = [text dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="built_in">NSData</span> *result = [data dataEncryptedUsingAlgorithm:kCCAlgorithmAES128</span><br><span class="line">                                                   key:k_aesECBKey</span><br><span class="line">                                  initializationVector:<span class="literal">nil</span></span><br><span class="line">                                               options:(kCCOptionPKCS7Padding|kCCOptionECBMode)</span><br><span class="line">                                                 error:&amp;status];</span><br><span class="line">    <span class="keyword">if</span> (status != kCCSuccess) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">@&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> convertDataToHexStr:result];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 将十六进制data转为十六进制字符串</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param data 十六进制data</span></span><br><span class="line"><span class="comment"> @return 十六进制字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">NSString</span> *)convertDataToHexStr:(<span class="built_in">NSData</span> *)data &#123;</span><br><span class="line">	<span class="keyword">if</span> (!data || [data length] == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">@&quot;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">NSMutableString</span> *string = [[<span class="built_in">NSMutableString</span> alloc] initWithCapacity:[data length]];</span><br><span class="line">	</span><br><span class="line">	[data enumerateByteRangesUsingBlock:^(<span class="keyword">const</span> <span class="keyword">void</span> *bytes, <span class="built_in">NSRange</span> byteRange, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line">		<span class="keyword">unsigned</span> <span class="keyword">char</span> *dataBytes = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)bytes;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; byteRange.length; i++) &#123;</span><br><span class="line">			<span class="built_in">NSString</span> *hexStr = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%x&quot;</span>, (dataBytes[i]) &amp; <span class="number">0xff</span>];</span><br><span class="line">			<span class="keyword">if</span> ([hexStr length] == <span class="number">2</span>) &#123;</span><br><span class="line">				[string appendString:hexStr];</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				[string appendFormat:<span class="string">@&quot;0%@&quot;</span>, hexStr];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;];</span><br><span class="line">	<span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-解密"><a href="#2-解密" class="headerlink" title="2. 解密"></a>2. 解密</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解密</span></span><br><span class="line">+ (<span class="built_in">NSString</span> *)decryptHexStr:(<span class="built_in">NSString</span> *)hexStr &#123;</span><br><span class="line">    <span class="built_in">NSData</span> *data = [<span class="keyword">self</span> convertHexStrToData:hexStr];</span><br><span class="line">    CCCryptorStatus status = kCCSuccess;</span><br><span class="line">    <span class="built_in">NSData</span>* result = [data decryptedDataUsingAlgorithm:kCCAlgorithmAES128</span><br><span class="line">                                                   key:k_aesECBKey</span><br><span class="line">                                  initializationVector:<span class="literal">nil</span>   <span class="comment">// ECB解密不会用到iv</span></span><br><span class="line">                                               options:(kCCOptionPKCS7Padding|kCCOptionECBMode)</span><br><span class="line">                                                 error:&amp;status];</span><br><span class="line">    <span class="keyword">if</span> (status != kCCSuccess) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">@&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">NSString</span> alloc] initWithData:result encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSData</span> *)convertHexStrToData:(<span class="built_in">NSString</span> *)str &#123;</span><br><span class="line">    <span class="keyword">if</span> (!str || [str length] == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">NSMutableData</span> *hexData = [[<span class="built_in">NSMutableData</span> alloc] initWithCapacity:<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSRange</span> range;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ([str length] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        range = <span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        range = <span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = range.location; i &lt; [str length]; i+= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> anInt;</span><br><span class="line">        <span class="built_in">NSString</span>*hexCharStr= [str substringWithRange:range];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSScanner</span>*scanner= [[<span class="built_in">NSScanner</span> alloc] initWithString:hexCharStr];</span><br><span class="line"> </span><br><span class="line">        [scanner scanHexInt:&amp;anInt];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSData</span> *entity= [[<span class="built_in">NSData</span> alloc] initWithBytes:&amp;anInt length:<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        [hexData appendData:entity];</span><br><span class="line"></span><br><span class="line">        range.location+= range.length;</span><br><span class="line"></span><br><span class="line">        range.length= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hexData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⚠️ <strong>NSData+CommonCrypto.h</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/NSData.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/NSError.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;CommonCrypto/CommonCryptor.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;CommonCrypto/CommonHMAC.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kCommonCryptoErrorDomain;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSError</span> (<span class="title">CommonCryptoErrorDomain</span>)</span></span><br><span class="line">+ (<span class="built_in">NSError</span> *) errorWithCCCryptorStatus: (CCCryptorStatus) status;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSData</span> (<span class="title">CommonDigest</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) MD2Sum;</span><br><span class="line">- (<span class="built_in">NSData</span> *) MD4Sum;</span><br><span class="line">- (<span class="built_in">NSData</span> *) MD5Sum;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) SHA1Hash;</span><br><span class="line">- (<span class="built_in">NSData</span> *) SHA224Hash;</span><br><span class="line">- (<span class="built_in">NSData</span> *) SHA256Hash;</span><br><span class="line">- (<span class="built_in">NSData</span> *) SHA384Hash;</span><br><span class="line">- (<span class="built_in">NSData</span> *) SHA512Hash;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSData</span> (<span class="title">CommonCryptor</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) AES256EncryptedDataUsingKey: (<span class="keyword">id</span>) key error: (<span class="built_in">NSError</span> **) error;</span><br><span class="line">- (<span class="built_in">NSData</span> *) decryptedAES256DataUsingKey: (<span class="keyword">id</span>) key error: (<span class="built_in">NSError</span> **) error;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) DESEncryptedDataUsingKey: (<span class="keyword">id</span>) key error: (<span class="built_in">NSError</span> **) error;</span><br><span class="line">- (<span class="built_in">NSData</span> *) decryptedDESDataUsingKey: (<span class="keyword">id</span>) key error: (<span class="built_in">NSError</span> **) error;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) <span class="built_in">CASTEncryptedDataUsingKey</span>: (<span class="keyword">id</span>) key error: (<span class="built_in">NSError</span> **) error;</span><br><span class="line">- (<span class="built_in">NSData</span> *) decryptedCASTDataUsingKey: (<span class="keyword">id</span>) key error: (<span class="built_in">NSError</span> **) error;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSData</span> (<span class="title">LowLevelCommonCryptor</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) dataEncryptedUsingAlgorithm: (CCAlgorithm) algorithm</span><br><span class="line">                                     key: (<span class="keyword">id</span>) key		<span class="comment">// data or string</span></span><br><span class="line">                                   error: (CCCryptorStatus *) error;</span><br><span class="line">- (<span class="built_in">NSData</span> *) dataEncryptedUsingAlgorithm: (CCAlgorithm) algorithm</span><br><span class="line">                                     key: (<span class="keyword">id</span>) key		<span class="comment">// data or string</span></span><br><span class="line">                                 options: (CCOptions) options</span><br><span class="line">                                   error: (CCCryptorStatus *) error;</span><br><span class="line">- (<span class="built_in">NSData</span> *) dataEncryptedUsingAlgorithm: (CCAlgorithm) algorithm</span><br><span class="line">                                     key: (<span class="keyword">id</span>) key		<span class="comment">// data or string</span></span><br><span class="line">                    initializationVector: (<span class="keyword">id</span>) iv		<span class="comment">// data or string</span></span><br><span class="line">                                 options: (CCOptions) options</span><br><span class="line">                                   error: (CCCryptorStatus *) error;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) decryptedDataUsingAlgorithm: (CCAlgorithm) algorithm</span><br><span class="line">                                     key: (<span class="keyword">id</span>) key		<span class="comment">// data or string</span></span><br><span class="line">                                   error: (CCCryptorStatus *) error;</span><br><span class="line">- (<span class="built_in">NSData</span> *) decryptedDataUsingAlgorithm: (CCAlgorithm) algorithm</span><br><span class="line">                                     key: (<span class="keyword">id</span>) key		<span class="comment">// data or string</span></span><br><span class="line">                                 options: (CCOptions) options</span><br><span class="line">                                   error: (CCCryptorStatus *) error;</span><br><span class="line">- (<span class="built_in">NSData</span> *) decryptedDataUsingAlgorithm: (CCAlgorithm) algorithm</span><br><span class="line">                                     key: (<span class="keyword">id</span>) key		<span class="comment">// data or string</span></span><br><span class="line">                    initializationVector: (<span class="keyword">id</span>) iv		<span class="comment">// data or string</span></span><br><span class="line">                                 options: (CCOptions) options</span><br><span class="line">                                   error: (CCCryptorStatus *) error;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSData</span> (<span class="title">CommonHMAC</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) HMACWithAlgorithm: (CCHmacAlgorithm) algorithm;</span><br><span class="line">- (<span class="built_in">NSData</span> *) HMACWithAlgorithm: (CCHmacAlgorithm) algorithm key: (<span class="keyword">id</span>) key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>⚠️ <strong>NSData+CommonCrypto.m</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;NSData+CommonCrypto.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;CommonCrypto/CommonDigest.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;CommonCrypto/CommonCryptor.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;CommonCrypto/CommonHMAC.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> kCommonCryptoErrorDomain = <span class="string">@&quot;CommonCryptoErrorDomain&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSError</span> (<span class="title">CommonCryptoErrorDomain</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSError</span> *) errorWithCCCryptorStatus: (CCCryptorStatus) status</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">NSString</span> * description = <span class="literal">nil</span>, * reason = <span class="literal">nil</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">switch</span> ( status )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> kCCSuccess:</span><br><span class="line">			description = <span class="built_in">NSLocalizedString</span>(<span class="string">@&quot;Success&quot;</span>, <span class="string">@&quot;Error description&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">case</span> kCCParamError:</span><br><span class="line">			description = <span class="built_in">NSLocalizedString</span>(<span class="string">@&quot;Parameter Error&quot;</span>, <span class="string">@&quot;Error description&quot;</span>);</span><br><span class="line">			reason = <span class="built_in">NSLocalizedString</span>(<span class="string">@&quot;Illegal parameter supplied to encryption/decryption algorithm&quot;</span>, <span class="string">@&quot;Error reason&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">case</span> kCCBufferTooSmall:</span><br><span class="line">			description = <span class="built_in">NSLocalizedString</span>(<span class="string">@&quot;Buffer Too Small&quot;</span>, <span class="string">@&quot;Error description&quot;</span>);</span><br><span class="line">			reason = <span class="built_in">NSLocalizedString</span>(<span class="string">@&quot;Insufficient buffer provided for specified operation&quot;</span>, <span class="string">@&quot;Error reason&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">case</span> kCCMemoryFailure:</span><br><span class="line">			description = <span class="built_in">NSLocalizedString</span>(<span class="string">@&quot;Memory Failure&quot;</span>, <span class="string">@&quot;Error description&quot;</span>);</span><br><span class="line">			reason = <span class="built_in">NSLocalizedString</span>(<span class="string">@&quot;Failed to allocate memory&quot;</span>, <span class="string">@&quot;Error reason&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">case</span> kCCAlignmentError:</span><br><span class="line">			description = <span class="built_in">NSLocalizedString</span>(<span class="string">@&quot;Alignment Error&quot;</span>, <span class="string">@&quot;Error description&quot;</span>);</span><br><span class="line">			reason = <span class="built_in">NSLocalizedString</span>(<span class="string">@&quot;Input size to encryption algorithm was not aligned correctly&quot;</span>, <span class="string">@&quot;Error reason&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">case</span> kCCDecodeError:</span><br><span class="line">			description = <span class="built_in">NSLocalizedString</span>(<span class="string">@&quot;Decode Error&quot;</span>, <span class="string">@&quot;Error description&quot;</span>);</span><br><span class="line">			reason = <span class="built_in">NSLocalizedString</span>(<span class="string">@&quot;Input data did not decode or decrypt correctly&quot;</span>, <span class="string">@&quot;Error reason&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">case</span> kCCUnimplemented:</span><br><span class="line">			description = <span class="built_in">NSLocalizedString</span>(<span class="string">@&quot;Unimplemented Function&quot;</span>, <span class="string">@&quot;Error description&quot;</span>);</span><br><span class="line">			reason = <span class="built_in">NSLocalizedString</span>(<span class="string">@&quot;Function not implemented for the current algorithm&quot;</span>, <span class="string">@&quot;Error reason&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			description = <span class="built_in">NSLocalizedString</span>(<span class="string">@&quot;Unknown Error&quot;</span>, <span class="string">@&quot;Error description&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">NSMutableDictionary</span> * userInfo = [[<span class="built_in">NSMutableDictionary</span> alloc] init];</span><br><span class="line">	[userInfo setObject: description forKey: <span class="built_in">NSLocalizedDescriptionKey</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( reason != <span class="literal">nil</span> )</span><br><span class="line">		[userInfo setObject: reason forKey: <span class="built_in">NSLocalizedFailureReasonErrorKey</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">NSError</span> * result = [<span class="built_in">NSError</span> errorWithDomain: kCommonCryptoErrorDomain code: status userInfo: userInfo];</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> !__has_feature(objc_arc)</span></span><br><span class="line">        [userInfo release];</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ( result );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark -</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSData</span> (<span class="title">CommonDigest</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) MD2Sum</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> hash[CC_MD2_DIGEST_LENGTH];</span><br><span class="line">	(<span class="keyword">void</span>) CC_MD2( [<span class="keyword">self</span> bytes], (CC_LONG)[<span class="keyword">self</span> length], hash );</span><br><span class="line">	<span class="keyword">return</span> ( [<span class="built_in">NSData</span> dataWithBytes: hash length: CC_MD2_DIGEST_LENGTH] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) MD4Sum</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> hash[CC_MD4_DIGEST_LENGTH];</span><br><span class="line">	(<span class="keyword">void</span>) CC_MD4( [<span class="keyword">self</span> bytes], (CC_LONG)[<span class="keyword">self</span> length], hash );</span><br><span class="line">	<span class="keyword">return</span> ( [<span class="built_in">NSData</span> dataWithBytes: hash length: CC_MD4_DIGEST_LENGTH] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) MD5Sum</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> hash[CC_MD5_DIGEST_LENGTH];</span><br><span class="line">	(<span class="keyword">void</span>) CC_MD5( [<span class="keyword">self</span> bytes], (CC_LONG)[<span class="keyword">self</span> length], hash );</span><br><span class="line">	<span class="keyword">return</span> ( [<span class="built_in">NSData</span> dataWithBytes: hash length: CC_MD5_DIGEST_LENGTH] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) SHA1Hash</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> hash[CC_SHA1_DIGEST_LENGTH];</span><br><span class="line">	(<span class="keyword">void</span>) CC_SHA1( [<span class="keyword">self</span> bytes], (CC_LONG)[<span class="keyword">self</span> length], hash );</span><br><span class="line">	<span class="keyword">return</span> ( [<span class="built_in">NSData</span> dataWithBytes: hash length: CC_SHA1_DIGEST_LENGTH] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) SHA224Hash</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> hash[CC_SHA224_DIGEST_LENGTH];</span><br><span class="line">	(<span class="keyword">void</span>) CC_SHA224( [<span class="keyword">self</span> bytes], (CC_LONG)[<span class="keyword">self</span> length], hash );</span><br><span class="line">	<span class="keyword">return</span> ( [<span class="built_in">NSData</span> dataWithBytes: hash length: CC_SHA224_DIGEST_LENGTH] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) SHA256Hash</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> hash[CC_SHA256_DIGEST_LENGTH];</span><br><span class="line">	(<span class="keyword">void</span>) CC_SHA256( [<span class="keyword">self</span> bytes], (CC_LONG)[<span class="keyword">self</span> length], hash );</span><br><span class="line">	<span class="keyword">return</span> ( [<span class="built_in">NSData</span> dataWithBytes: hash length: CC_SHA256_DIGEST_LENGTH] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) SHA384Hash</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> hash[CC_SHA384_DIGEST_LENGTH];</span><br><span class="line">	(<span class="keyword">void</span>) CC_SHA384( [<span class="keyword">self</span> bytes], (CC_LONG)[<span class="keyword">self</span> length], hash );</span><br><span class="line">	<span class="keyword">return</span> ( [<span class="built_in">NSData</span> dataWithBytes: hash length: CC_SHA384_DIGEST_LENGTH] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) SHA512Hash</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> hash[CC_SHA512_DIGEST_LENGTH];</span><br><span class="line">	(<span class="keyword">void</span>) CC_SHA512( [<span class="keyword">self</span> bytes], (CC_LONG)[<span class="keyword">self</span> length], hash );</span><br><span class="line">	<span class="keyword">return</span> ( [<span class="built_in">NSData</span> dataWithBytes: hash length: CC_SHA512_DIGEST_LENGTH] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSData</span> (<span class="title">CommonCryptor</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) AES256EncryptedDataUsingKey: (<span class="keyword">id</span>) key error: (<span class="built_in">NSError</span> **) error</span><br><span class="line">&#123;</span><br><span class="line">	CCCryptorStatus status = kCCSuccess;</span><br><span class="line">	<span class="built_in">NSData</span> * result = [<span class="keyword">self</span> dataEncryptedUsingAlgorithm: kCCAlgorithmAES128</span><br><span class="line">                                                  key: key</span><br><span class="line">                                              options: kCCOptionPKCS7Padding</span><br><span class="line">                                                error: &amp;status];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( result != <span class="literal">nil</span> )</span><br><span class="line">		<span class="keyword">return</span> ( result );</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( error != <span class="literal">NULL</span> )</span><br><span class="line">		*error = [<span class="built_in">NSError</span> errorWithCCCryptorStatus: status];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ( <span class="literal">nil</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) decryptedAES256DataUsingKey: (<span class="keyword">id</span>) key error: (<span class="built_in">NSError</span> **) error</span><br><span class="line">&#123;</span><br><span class="line">	CCCryptorStatus status = kCCSuccess;</span><br><span class="line">	<span class="built_in">NSData</span> * result = [<span class="keyword">self</span> decryptedDataUsingAlgorithm: kCCAlgorithmAES128</span><br><span class="line">                                                  key: key</span><br><span class="line">                                              options: kCCOptionPKCS7Padding</span><br><span class="line">                                                error: &amp;status];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( result != <span class="literal">nil</span> )</span><br><span class="line">		<span class="keyword">return</span> ( result );</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( error != <span class="literal">NULL</span> )</span><br><span class="line">		*error = [<span class="built_in">NSError</span> errorWithCCCryptorStatus: status];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ( <span class="literal">nil</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) DESEncryptedDataUsingKey: (<span class="keyword">id</span>) key error: (<span class="built_in">NSError</span> **) error</span><br><span class="line">&#123;</span><br><span class="line">	CCCryptorStatus status = kCCSuccess;</span><br><span class="line">	<span class="built_in">NSData</span> * result = [<span class="keyword">self</span> dataEncryptedUsingAlgorithm: kCCAlgorithmDES</span><br><span class="line">                                                  key: key</span><br><span class="line">                                              options: kCCOptionPKCS7Padding</span><br><span class="line">                                                error: &amp;status];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( result != <span class="literal">nil</span> )</span><br><span class="line">		<span class="keyword">return</span> ( result );</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( error != <span class="literal">NULL</span> )</span><br><span class="line">		*error = [<span class="built_in">NSError</span> errorWithCCCryptorStatus: status];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ( <span class="literal">nil</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) decryptedDESDataUsingKey: (<span class="keyword">id</span>) key error: (<span class="built_in">NSError</span> **) error</span><br><span class="line">&#123;</span><br><span class="line">	CCCryptorStatus status = kCCSuccess;</span><br><span class="line">	<span class="built_in">NSData</span> * result = [<span class="keyword">self</span> decryptedDataUsingAlgorithm: kCCAlgorithmDES</span><br><span class="line">                                                  key: key</span><br><span class="line">                                              options: kCCOptionPKCS7Padding</span><br><span class="line">                                                error: &amp;status];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( result != <span class="literal">nil</span> )</span><br><span class="line">		<span class="keyword">return</span> ( result );</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( error != <span class="literal">NULL</span> )</span><br><span class="line">		*error = [<span class="built_in">NSError</span> errorWithCCCryptorStatus: status];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ( <span class="literal">nil</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) <span class="built_in">CASTEncryptedDataUsingKey</span>: (<span class="keyword">id</span>) key error: (<span class="built_in">NSError</span> **) error</span><br><span class="line">&#123;</span><br><span class="line">	CCCryptorStatus status = kCCSuccess;</span><br><span class="line">	<span class="built_in">NSData</span> * result = [<span class="keyword">self</span> dataEncryptedUsingAlgorithm: kCCAlgorithmCAST</span><br><span class="line">                                                  key: key</span><br><span class="line">                                              options: kCCOptionPKCS7Padding</span><br><span class="line">                                                error: &amp;status];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( result != <span class="literal">nil</span> )</span><br><span class="line">		<span class="keyword">return</span> ( result );</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( error != <span class="literal">NULL</span> )</span><br><span class="line">		*error = [<span class="built_in">NSError</span> errorWithCCCryptorStatus: status];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ( <span class="literal">nil</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) decryptedCASTDataUsingKey: (<span class="keyword">id</span>) key error: (<span class="built_in">NSError</span> **) error</span><br><span class="line">&#123;</span><br><span class="line">	CCCryptorStatus status = kCCSuccess;</span><br><span class="line">	<span class="built_in">NSData</span> * result = [<span class="keyword">self</span> decryptedDataUsingAlgorithm: kCCAlgorithmCAST</span><br><span class="line">                                                  key: key</span><br><span class="line">                                              options: kCCOptionPKCS7Padding</span><br><span class="line">                                                error: &amp;status];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( result != <span class="literal">nil</span> )</span><br><span class="line">		<span class="keyword">return</span> ( result );</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( error != <span class="literal">NULL</span> )</span><br><span class="line">		*error = [<span class="built_in">NSError</span> errorWithCCCryptorStatus: status];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ( <span class="literal">nil</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> FixKeyLengths( CCAlgorithm algorithm, <span class="built_in">NSMutableData</span> * keyData, <span class="built_in">NSMutableData</span> * ivData )</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">NSUInteger</span> keyLength = [keyData length];</span><br><span class="line">	<span class="keyword">switch</span> ( algorithm )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> kCCAlgorithmAES128:</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> ( keyLength &lt; <span class="number">16</span> )</span><br><span class="line">			&#123;</span><br><span class="line">				[keyData setLength: <span class="number">16</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> ( keyLength &lt; <span class="number">24</span> )</span><br><span class="line">			&#123;</span><br><span class="line">				[keyData setLength: <span class="number">24</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				[keyData setLength: <span class="number">32</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">case</span> kCCAlgorithmDES:</span><br><span class="line">		&#123;</span><br><span class="line">			[keyData setLength: <span class="number">8</span>];</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">case</span> kCCAlgorithm3DES:</span><br><span class="line">		&#123;</span><br><span class="line">			[keyData setLength: <span class="number">24</span>];</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">case</span> kCCAlgorithmCAST:</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> ( keyLength &lt; <span class="number">5</span> )</span><br><span class="line">			&#123;</span><br><span class="line">				[keyData setLength: <span class="number">5</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> ( keyLength &gt; <span class="number">16</span> )</span><br><span class="line">			&#123;</span><br><span class="line">				[keyData setLength: <span class="number">16</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">case</span> kCCAlgorithmRC4:</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> ( keyLength &gt; <span class="number">512</span> )</span><br><span class="line">				[keyData setLength: <span class="number">512</span>];</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	[ivData setLength: [keyData length]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSData</span> (<span class="title">LowLevelCommonCryptor</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) _runCryptor: (CCCryptorRef) cryptor result: (CCCryptorStatus *) status</span><br><span class="line">&#123;</span><br><span class="line">	size_t bufsize = CCCryptorGetOutputLength( cryptor, (size_t)[<span class="keyword">self</span> length], <span class="literal">true</span> );</span><br><span class="line">	<span class="keyword">void</span> * buf = malloc( bufsize );</span><br><span class="line">	size_t bufused = <span class="number">0</span>;</span><br><span class="line">  size_t bytesTotal = <span class="number">0</span>;</span><br><span class="line">	*status = CCCryptorUpdate( cryptor, [<span class="keyword">self</span> bytes], (size_t)[<span class="keyword">self</span> length], </span><br><span class="line">                            buf, bufsize, &amp;bufused );</span><br><span class="line">	<span class="keyword">if</span> ( *status != kCCSuccess )</span><br><span class="line">	&#123;</span><br><span class="line">		free( buf );</span><br><span class="line">		<span class="keyword">return</span> ( <span class="literal">nil</span> );</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">  bytesTotal += bufused;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// From Brent Royal-Gordon (Twitter: architechies):</span></span><br><span class="line">	<span class="comment">//  Need to update buf ptr past used bytes when calling CCCryptorFinal()</span></span><br><span class="line">	*status = CCCryptorFinal( cryptor, buf + bufused, bufsize - bufused, &amp;bufused );</span><br><span class="line">	<span class="keyword">if</span> ( *status != kCCSuccess )</span><br><span class="line">	&#123;</span><br><span class="line">		free( buf );</span><br><span class="line">		<span class="keyword">return</span> ( <span class="literal">nil</span> );</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">  bytesTotal += bufused;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ( [<span class="built_in">NSData</span> dataWithBytesNoCopy: buf length: bytesTotal] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) dataEncryptedUsingAlgorithm: (CCAlgorithm) algorithm</span><br><span class="line">                                     key: (<span class="keyword">id</span>) key</span><br><span class="line">                                   error: (CCCryptorStatus *) error</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> ( [<span class="keyword">self</span> dataEncryptedUsingAlgorithm: algorithm</span><br><span class="line">                                         key: key</span><br><span class="line">                        initializationVector: <span class="literal">nil</span></span><br><span class="line">                                     options: <span class="number">0</span></span><br><span class="line">                                       error: error] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) dataEncryptedUsingAlgorithm: (CCAlgorithm) algorithm</span><br><span class="line">                                     key: (<span class="keyword">id</span>) key</span><br><span class="line">                                 options: (CCOptions) options</span><br><span class="line">                                   error: (CCCryptorStatus *) error</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> ( [<span class="keyword">self</span> dataEncryptedUsingAlgorithm: algorithm</span><br><span class="line">                                         key: key</span><br><span class="line">                        initializationVector: <span class="literal">nil</span></span><br><span class="line">                                     options: options</span><br><span class="line">                                       error: error] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) dataEncryptedUsingAlgorithm: (CCAlgorithm) algorithm</span><br><span class="line">                                     key: (<span class="keyword">id</span>) key</span><br><span class="line">                    initializationVector: (<span class="keyword">id</span>) iv</span><br><span class="line">                                 options: (CCOptions) options</span><br><span class="line">                                   error: (CCCryptorStatus *) error</span><br><span class="line">&#123;</span><br><span class="line">	CCCryptorRef cryptor = <span class="literal">NULL</span>;</span><br><span class="line">	CCCryptorStatus status = kCCSuccess;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">NSParameterAssert</span>([key isKindOfClass: [<span class="built_in">NSData</span> <span class="keyword">class</span>]] || [key isKindOfClass: [<span class="built_in">NSString</span> <span class="keyword">class</span>]]);</span><br><span class="line">	<span class="built_in">NSParameterAssert</span>(iv == <span class="literal">nil</span> || [iv isKindOfClass: [<span class="built_in">NSData</span> <span class="keyword">class</span>]] || [iv isKindOfClass: [<span class="built_in">NSString</span> <span class="keyword">class</span>]]);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">NSMutableData</span> * keyData, * ivData;</span><br><span class="line">	<span class="keyword">if</span> ( [key isKindOfClass: [<span class="built_in">NSData</span> <span class="keyword">class</span>]] )</span><br><span class="line">		keyData = (<span class="built_in">NSMutableData</span> *) [key mutableCopy];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		keyData = [[key dataUsingEncoding: <span class="built_in">NSUTF8StringEncoding</span>] mutableCopy];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( [iv isKindOfClass: [<span class="built_in">NSString</span> <span class="keyword">class</span>]] )</span><br><span class="line">		ivData = [[iv dataUsingEncoding: <span class="built_in">NSUTF8StringEncoding</span>] mutableCopy];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		ivData = (<span class="built_in">NSMutableData</span> *) [iv mutableCopy];	<span class="comment">// data or nil</span></span><br><span class="line">	</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> !__has_feature(objc_arc)</span></span><br><span class="line">        [keyData autorelease];</span><br><span class="line">        [ivData autorelease];</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	<span class="comment">// ensure correct lengths for key and iv data, based on algorithms</span></span><br><span class="line">	FixKeyLengths( algorithm, keyData, ivData );</span><br><span class="line">	</span><br><span class="line">	status = CCCryptorCreate( kCCEncrypt, algorithm, options,</span><br><span class="line">                           [keyData bytes], [keyData length], [ivData bytes],</span><br><span class="line">                           &amp;cryptor );</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( status != kCCSuccess )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ( error != <span class="literal">NULL</span> )</span><br><span class="line">			*error = status;</span><br><span class="line">		<span class="keyword">return</span> ( <span class="literal">nil</span> );</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">NSData</span> * result = [<span class="keyword">self</span> _runCryptor: cryptor result: &amp;status];</span><br><span class="line">	<span class="keyword">if</span> ( (result == <span class="literal">nil</span>) &amp;&amp; (error != <span class="literal">NULL</span>) )</span><br><span class="line">		*error = status;</span><br><span class="line">	</span><br><span class="line">	CCCryptorRelease( cryptor );</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ( result );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) decryptedDataUsingAlgorithm: (CCAlgorithm) algorithm</span><br><span class="line">                                     key: (<span class="keyword">id</span>) key		<span class="comment">// data or string</span></span><br><span class="line">                                   error: (CCCryptorStatus *) error</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> ( [<span class="keyword">self</span> decryptedDataUsingAlgorithm: algorithm</span><br><span class="line">                                         key: key</span><br><span class="line">                        initializationVector: <span class="literal">nil</span></span><br><span class="line">                                     options: <span class="number">0</span></span><br><span class="line">                                       error: error] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) decryptedDataUsingAlgorithm: (CCAlgorithm) algorithm</span><br><span class="line">                                     key: (<span class="keyword">id</span>) key		<span class="comment">// data or string</span></span><br><span class="line">                                 options: (CCOptions) options</span><br><span class="line">                                   error: (CCCryptorStatus *) error</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> ( [<span class="keyword">self</span> decryptedDataUsingAlgorithm: algorithm</span><br><span class="line">                                         key: key</span><br><span class="line">                        initializationVector: <span class="literal">nil</span></span><br><span class="line">                                     options: options</span><br><span class="line">                                       error: error] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) decryptedDataUsingAlgorithm: (CCAlgorithm) algorithm</span><br><span class="line">                                     key: (<span class="keyword">id</span>) key		<span class="comment">// data or string</span></span><br><span class="line">                    initializationVector: (<span class="keyword">id</span>) iv		<span class="comment">// data or string</span></span><br><span class="line">                                 options: (CCOptions) options</span><br><span class="line">                                   error: (CCCryptorStatus *) error</span><br><span class="line">&#123;</span><br><span class="line">	CCCryptorRef cryptor = <span class="literal">NULL</span>;</span><br><span class="line">	CCCryptorStatus status = kCCSuccess;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">NSParameterAssert</span>([key isKindOfClass: [<span class="built_in">NSData</span> <span class="keyword">class</span>]] || [key isKindOfClass: [<span class="built_in">NSString</span> <span class="keyword">class</span>]]);</span><br><span class="line">	<span class="built_in">NSParameterAssert</span>(iv == <span class="literal">nil</span> || [iv isKindOfClass: [<span class="built_in">NSData</span> <span class="keyword">class</span>]] || [iv isKindOfClass: [<span class="built_in">NSString</span> <span class="keyword">class</span>]]);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">NSMutableData</span> * keyData, * ivData;</span><br><span class="line">	<span class="keyword">if</span> ( [key isKindOfClass: [<span class="built_in">NSData</span> <span class="keyword">class</span>]] )</span><br><span class="line">		keyData = (<span class="built_in">NSMutableData</span> *) [key mutableCopy];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		keyData = [[key dataUsingEncoding: <span class="built_in">NSUTF8StringEncoding</span>] mutableCopy];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( [iv isKindOfClass: [<span class="built_in">NSString</span> <span class="keyword">class</span>]] )</span><br><span class="line">		ivData = [[iv dataUsingEncoding: <span class="built_in">NSUTF8StringEncoding</span>] mutableCopy];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		ivData = (<span class="built_in">NSMutableData</span> *) [iv mutableCopy];	<span class="comment">// data or nil</span></span><br><span class="line">	</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> !__has_feature(objc_arc)</span></span><br><span class="line">        [keyData autorelease];</span><br><span class="line">        [ivData autorelease];</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">// ensure correct lengths for key and iv data, based on algorithms</span></span><br><span class="line">	FixKeyLengths( algorithm, keyData, ivData );</span><br><span class="line">	</span><br><span class="line">	status = CCCryptorCreate( kCCDecrypt, algorithm, options,</span><br><span class="line">                           [keyData bytes], [keyData length], [ivData bytes],</span><br><span class="line">                           &amp;cryptor );</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( status != kCCSuccess )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ( error != <span class="literal">NULL</span> )</span><br><span class="line">			*error = status;</span><br><span class="line">		<span class="keyword">return</span> ( <span class="literal">nil</span> );</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">NSData</span> * result = [<span class="keyword">self</span> _runCryptor: cryptor result: &amp;status];</span><br><span class="line">	<span class="keyword">if</span> ( (result == <span class="literal">nil</span>) &amp;&amp; (error != <span class="literal">NULL</span>) )</span><br><span class="line">		*error = status;</span><br><span class="line">	</span><br><span class="line">	CCCryptorRelease( cryptor );</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ( result );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSData</span> (<span class="title">CommonHMAC</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) HMACWithAlgorithm: (CCHmacAlgorithm) algorithm</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> ( [<span class="keyword">self</span> HMACWithAlgorithm: algorithm key: <span class="literal">nil</span>] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSData</span> *) HMACWithAlgorithm: (CCHmacAlgorithm) algorithm key: (<span class="keyword">id</span>) key</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">NSParameterAssert</span>(key == <span class="literal">nil</span> || [key isKindOfClass: [<span class="built_in">NSData</span> <span class="keyword">class</span>]] || [key isKindOfClass: [<span class="built_in">NSString</span> <span class="keyword">class</span>]]);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">NSData</span> * keyData = <span class="literal">nil</span>;</span><br><span class="line">	<span class="keyword">if</span> ( [key isKindOfClass: [<span class="built_in">NSString</span> <span class="keyword">class</span>]] )</span><br><span class="line">		keyData = [key dataUsingEncoding: <span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		keyData = (<span class="built_in">NSData</span> *) key;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// this could be either CC_SHA1_DIGEST_LENGTH or CC_MD5_DIGEST_LENGTH. SHA1 is larger.</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[CC_SHA1_DIGEST_LENGTH];</span><br><span class="line">	CCHmac( algorithm, [keyData bytes], [keyData length], [<span class="keyword">self</span> bytes], [<span class="keyword">self</span> length], buf );</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ( [<span class="built_in">NSData</span> dataWithBytes: buf length: (algorithm == kCCHmacAlgMD5 ? CC_MD5_DIGEST_LENGTH : CC_SHA1_DIGEST_LENGTH)] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>



<hr>
<blockquote>
<p><strong>个人博客:</strong> 🏡 <a href="https://forgetsou.github.io/">ForgetSou</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS开发-AudioUnit实时录音(OC)</title>
    <url>/2020/11/11/iOS%E5%BC%80%E5%8F%91-AudioUnit%E5%AE%9E%E6%97%B6%E5%BD%95%E9%9F%B3-OC/</url>
    <content><![CDATA[<h1 id="1-单声道录音"><a href="#1-单声道录音" class="headerlink" title="1.单声道录音"></a>1.单声道录音</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  FSUnitRecorder.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^kAudioUnitRecorderOnputBlock)(AudioBufferList *bufferList);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FSUnitRecorder</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="keyword">double</span> sampleRate;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> isRecording;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) kAudioUnitRecorderOnputBlock bufferListBlock;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)start;</span><br><span class="line">- (<span class="keyword">void</span>)stop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure>

<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  FSUnitRecorder.m</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;FSUnitRecorder.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FSUnitRecorder</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">    AudioUnit audioUnit;</span><br><span class="line">    <span class="built_in">BOOL</span> audioComponentInitialized;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) AudioStreamBasicDescription inputStreamDesc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FSUnitRecorder</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">            [<span class="keyword">self</span> defaultSetting];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)defaultSetting &#123;</span><br><span class="line">  <span class="comment">// 优先16000，如果设备不支持使用其它采样率</span></span><br><span class="line">    <span class="built_in">NSArray</span> *sampleRates = @[@<span class="number">16000</span>, @<span class="number">11025</span>, @<span class="number">22050</span>, @<span class="number">44100</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSNumber</span> *sampleRate <span class="keyword">in</span> sampleRates) &#123;</span><br><span class="line">        OSStatus status = [<span class="keyword">self</span> prepareRecord:sampleRate.doubleValue];</span><br><span class="line">        <span class="keyword">if</span> (status == noErr) &#123;</span><br><span class="line">            <span class="keyword">self</span>.sampleRate = [sampleRate doubleValue];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (OSStatus)prepareRecord:(<span class="keyword">double</span>)sampleRate &#123;</span><br><span class="line">    OSStatus status = noErr;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSError</span> *error;</span><br><span class="line">    [[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategoryPlayAndRecord</span> withOptions:<span class="built_in">AVAudioSessionCategoryOptionMixWithOthers</span> | <span class="built_in">AVAudioSessionCategoryOptionAllowBluetooth</span>  error:&amp;error];</span><br><span class="line">    [[<span class="built_in">AVAudioSession</span> sharedInstance] setActive:<span class="literal">YES</span> error:&amp;error];</span><br><span class="line">  <span class="comment">// This doesn&#x27;t seem to really indicate a problem (iPhone 6s Plus)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> IGNORE</span></span><br><span class="line">    <span class="built_in">NSInteger</span> inputChannels = session.inputNumberOfChannels;</span><br><span class="line">    <span class="keyword">if</span> (!inputChannels) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;ERROR: NO AUDIO INPUT DEVICE&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!audioComponentInitialized) &#123;</span><br><span class="line">        audioComponentInitialized = <span class="literal">YES</span>;</span><br><span class="line">        <span class="comment">// Describe the RemoteIO unit</span></span><br><span class="line">        AudioComponentDescription audioComponentDescription;</span><br><span class="line">        audioComponentDescription.componentType = kAudioUnitType_Output;</span><br><span class="line">        audioComponentDescription.componentSubType = kAudioUnitSubType_RemoteIO;</span><br><span class="line">        audioComponentDescription.componentManufacturer = kAudioUnitManufacturer_Apple;</span><br><span class="line">        audioComponentDescription.componentFlags = <span class="number">0</span>;</span><br><span class="line">        audioComponentDescription.componentFlagsMask = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get the RemoteIO unit</span></span><br><span class="line">        AudioComponent remoteIOComponent = AudioComponentFindNext(<span class="literal">NULL</span>,&amp;audioComponentDescription);</span><br><span class="line">        status = AudioComponentInstanceNew(remoteIOComponent,&amp;(<span class="keyword">self</span>-&gt;audioUnit));</span><br><span class="line">        <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t get RemoteIO unit instance&quot;</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">UInt32</span> oneFlag = <span class="number">1</span>;</span><br><span class="line">      AudioUnitElement bus0 = <span class="number">0</span>;</span><br><span class="line">      AudioUnitElement bus1 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((<span class="literal">NO</span>)) &#123;</span><br><span class="line">        <span class="comment">// Configure the RemoteIO unit for playback</span></span><br><span class="line">        status = AudioUnitSetProperty (<span class="keyword">self</span>-&gt;audioUnit,</span><br><span class="line">                                       kAudioOutputUnitProperty_EnableIO,</span><br><span class="line">                                       kAudioUnitScope_Output,</span><br><span class="line">                                       bus0,</span><br><span class="line">                                       &amp;oneFlag,</span><br><span class="line">                                       <span class="keyword">sizeof</span>(oneFlag));</span><br><span class="line">        <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t enable RemoteIO output&quot;</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Configure the RemoteIO unit for input</span></span><br><span class="line">      status = AudioUnitSetProperty(<span class="keyword">self</span>-&gt;audioUnit,</span><br><span class="line">                                    kAudioOutputUnitProperty_EnableIO,</span><br><span class="line">                                    kAudioUnitScope_Input,</span><br><span class="line">                                    bus1,</span><br><span class="line">                                    &amp;oneFlag,</span><br><span class="line">                                    <span class="keyword">sizeof</span>(oneFlag));</span><br><span class="line">      <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t enable RemoteIO input&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      AudioStreamBasicDescription asbd;</span><br><span class="line">      memset(&amp;asbd, <span class="number">0</span>, <span class="keyword">sizeof</span>(asbd));</span><br><span class="line">      asbd.mSampleRate = sampleRate; <span class="comment">// 采样率</span></span><br><span class="line">      asbd.mFormatID = kAudioFormatLinearPCM;</span><br><span class="line">      asbd.mFormatFlags = kAudioFormatFlagIsSignedInteger | kAudioFormatFlagIsPacked;</span><br><span class="line">      asbd.mBytesPerPacket = <span class="number">2</span>;</span><br><span class="line">      asbd.mFramesPerPacket = <span class="number">1</span>;</span><br><span class="line">      asbd.mBytesPerFrame = <span class="number">2</span>;</span><br><span class="line">      asbd.mChannelsPerFrame = <span class="number">2</span>;</span><br><span class="line">      asbd.mBitsPerChannel = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Set format for output (bus 0) on the RemoteIO&#x27;s input scope</span></span><br><span class="line">      status = AudioUnitSetProperty(<span class="keyword">self</span>-&gt;audioUnit,</span><br><span class="line">                                    kAudioUnitProperty_StreamFormat,</span><br><span class="line">                                    kAudioUnitScope_Input,</span><br><span class="line">                                    bus0,</span><br><span class="line">                                    &amp;asbd,</span><br><span class="line">                                    <span class="keyword">sizeof</span>(asbd));</span><br><span class="line">      <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t set the ASBD for RemoteIO on input scope/bus 0&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Set format for mic input (bus 1) on RemoteIO&#x27;s output scope</span></span><br><span class="line">      status = AudioUnitSetProperty(<span class="keyword">self</span>-&gt;audioUnit,</span><br><span class="line">                                    kAudioUnitProperty_StreamFormat,</span><br><span class="line">                                    kAudioUnitScope_Output,</span><br><span class="line">                                    bus1,</span><br><span class="line">                                    &amp;asbd,</span><br><span class="line">                                    <span class="keyword">sizeof</span>(asbd));</span><br><span class="line">      <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t set the ASBD for RemoteIO on output scope/bus 1&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Set the recording callback</span></span><br><span class="line">      AURenderCallbackStruct callbackStruct;</span><br><span class="line">      callbackStruct.inputProc = inputCallBackFun;</span><br><span class="line">      callbackStruct.inputProcRefCon = (__bridge <span class="keyword">void</span> *) <span class="keyword">self</span>;</span><br><span class="line">      status = AudioUnitSetProperty(<span class="keyword">self</span>-&gt;audioUnit,</span><br><span class="line">                                    kAudioOutputUnitProperty_SetInputCallback,</span><br><span class="line">                                    kAudioUnitScope_Global,</span><br><span class="line">                                    bus1,</span><br><span class="line">                                    &amp;callbackStruct,</span><br><span class="line">                                    <span class="keyword">sizeof</span> (callbackStruct));</span><br><span class="line">      <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t set RemoteIO&#x27;s render callback on bus 0&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((<span class="literal">NO</span>)) &#123;</span><br><span class="line">        <span class="comment">// Set the playback callback</span></span><br><span class="line">        AURenderCallbackStruct callbackStruct;</span><br><span class="line">        callbackStruct.inputProc = playbackCallback;</span><br><span class="line">        callbackStruct.inputProcRefCon = (__bridge <span class="keyword">void</span> *) <span class="keyword">self</span>;</span><br><span class="line">        status = AudioUnitSetProperty(<span class="keyword">self</span>-&gt;audioUnit,</span><br><span class="line">                                      kAudioUnitProperty_SetRenderCallback,</span><br><span class="line">                                      kAudioUnitScope_Global,</span><br><span class="line">                                      bus0,</span><br><span class="line">                                      &amp;callbackStruct,</span><br><span class="line">                                      <span class="keyword">sizeof</span> (callbackStruct));</span><br><span class="line">        <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t set RemoteIO&#x27;s render callback on bus 0&quot;</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Initialize the RemoteIO unit</span></span><br><span class="line">      status = AudioUnitInitialize(<span class="keyword">self</span>-&gt;audioUnit);</span><br><span class="line">      <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t initialize the RemoteIO unit&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)start &#123;</span><br><span class="line">    [<span class="keyword">self</span> deleteAudioFile];</span><br><span class="line">    CheckError(AudioOutputUnitStart(audioUnit), <span class="string">&quot;AudioOutputUnitStop failed&quot;</span>);</span><br><span class="line">    _isRecording = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)stop &#123;</span><br><span class="line">    CheckError(AudioOutputUnitStop(audioUnit),</span><br><span class="line">    <span class="string">&quot;AudioOutputUnitStop failed&quot;</span>);</span><br><span class="line">    _isRecording = <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deleteAudioFile &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *pcmPath = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>).firstObject stringByAppendingPathComponent:<span class="string">@&quot;record.mp3&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> ([[<span class="built_in">NSFileManager</span> defaultManager] fileExistsAtPath:pcmPath]) &#123;</span><br><span class="line">        [[<span class="built_in">NSFileManager</span> defaultManager] removeItemAtPath:pcmPath error:<span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">    CheckError(AudioComponentInstanceDispose(audioUnit),</span><br><span class="line">               <span class="string">&quot;AudioComponentInstanceDispose failed&quot;</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;UnitRecorder销毁&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> OSStatus CheckError(OSStatus error, <span class="keyword">const</span> <span class="keyword">char</span> *operation) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error == noErr) &#123;</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">char</span> errorString[<span class="number">20</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">// See if it appears to be a 4-char-code</span></span><br><span class="line">  *(<span class="built_in">UInt32</span> *)(errorString + <span class="number">1</span>) = <span class="built_in">CFSwapInt32HostToBig</span>(error);</span><br><span class="line">  <span class="keyword">if</span> (isprint(errorString[<span class="number">1</span>]) &amp;&amp; isprint(errorString[<span class="number">2</span>]) &amp;&amp;</span><br><span class="line">      isprint(errorString[<span class="number">3</span>]) &amp;&amp; isprint(errorString[<span class="number">4</span>])) &#123;</span><br><span class="line">    errorString[<span class="number">0</span>] = errorString[<span class="number">5</span>] = <span class="string">&#x27;\&#x27;&#x27;</span>;</span><br><span class="line">    errorString[<span class="number">6</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// No, format it as an integer</span></span><br><span class="line">    sprintf(errorString, <span class="string">&quot;%d&quot;</span>, (<span class="keyword">int</span>)error);</span><br><span class="line">  &#125;</span><br><span class="line">  fprintf(stderr, <span class="string">&quot;Error: %s (%s)\n&quot;</span>, operation, errorString);</span><br><span class="line">  <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> OSStatus playbackCallback(<span class="keyword">void</span> *inRefCon,</span><br><span class="line">                                 AudioUnitRenderActionFlags *ioActionFlags,</span><br><span class="line">                                 <span class="keyword">const</span> AudioTimeStamp *inTimeStamp,</span><br><span class="line">                                 <span class="built_in">UInt32</span> inBusNumber,</span><br><span class="line">                                 <span class="built_in">UInt32</span> inNumberFrames,</span><br><span class="line">                                 AudioBufferList *ioData) &#123;</span><br><span class="line">  OSStatus status = noErr;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Notes: ioData contains buffers (may be more than one!)</span></span><br><span class="line">  <span class="comment">// Fill them up as much as you can. Remember to set the size value in each buffer to match how</span></span><br><span class="line">  <span class="comment">// much data is in the buffer.</span></span><br><span class="line">  FSUnitRecorder *recorder = (__bridge FSUnitRecorder *) inRefCon;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">UInt32</span> bus1 = <span class="number">1</span>;</span><br><span class="line">  status = AudioUnitRender(recorder-&gt;audioUnit,</span><br><span class="line">                           ioActionFlags,</span><br><span class="line">                           inTimeStamp,</span><br><span class="line">                           bus1,</span><br><span class="line">                           inNumberFrames,</span><br><span class="line">                           ioData);</span><br><span class="line">  CheckError(status, <span class="string">&quot;Couldn&#x27;t render from RemoteIO unit&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> OSStatus inputCallBackFun(<span class="keyword">void</span> *inRefCon,</span><br><span class="line">                    AudioUnitRenderActionFlags *ioActionFlags,</span><br><span class="line">                    <span class="keyword">const</span> AudioTimeStamp *inTimeStamp,</span><br><span class="line">                    <span class="built_in">UInt32</span> inBusNumber,</span><br><span class="line">                    <span class="built_in">UInt32</span> inNumberFrames,</span><br><span class="line">                    AudioBufferList * __<span class="keyword">nullable</span> ioData)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    FSUnitRecorder *recorder = (__bridge FSUnitRecorder *)(inRefCon);</span><br><span class="line">    </span><br><span class="line">    AudioBufferList bufferList;</span><br><span class="line">    bufferList.mNumberBuffers = <span class="number">1</span>;</span><br><span class="line">    bufferList.mBuffers[<span class="number">0</span>].mData = <span class="literal">NULL</span>;</span><br><span class="line">    bufferList.mBuffers[<span class="number">0</span>].mDataByteSize = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    AudioUnitRender(recorder-&gt;audioUnit,</span><br><span class="line">                    ioActionFlags,</span><br><span class="line">                    inTimeStamp,</span><br><span class="line">                    <span class="number">1</span>,</span><br><span class="line">                    inNumberFrames,</span><br><span class="line">                    &amp;bufferList);</span><br><span class="line">    <span class="keyword">if</span> (recorder.bufferListBlock) &#123;</span><br><span class="line">        recorder.bufferListBlock(&amp;bufferList);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> noErr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>使用</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (FSUnitRecorder *)recorder &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_recorder) &#123;</span><br><span class="line">        _recorder = [[FSUnitRecorder alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _recorder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@weakify(<span class="keyword">self</span>);</span><br><span class="line"><span class="keyword">self</span>.recorder.bufferListBlock = ^(AudioBufferList * _Nonnull bufferList) &#123;</span><br><span class="line">    @strongify(<span class="keyword">self</span>);</span><br><span class="line">    AudioBuffer buffer = bufferList-&gt;mBuffers[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithBytes:buffer.mData length:buffer.mDataByteSize];</span><br><span class="line">  <span class="comment">// 处理数据</span></span><br><span class="line">    [<span class="keyword">self</span> processSampleData:data];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="2-双声道录音"><a href="#2-双声道录音" class="headerlink" title="2.双声道录音"></a>2.双声道录音</h1><p><strong>说明：</strong><br>公司新业务要接入蓝牙耳机，支持蓝牙耳机，左右耳机分别进行语音识别等功能。该业务牵扯到实时双通道录音，分别提取左右buffer，类似的业务需求市场上也是有的，比如AirPods，百度的一款蓝牙耳机（小度APP“流浪地球模式”，具体可以买一个个试用下）。<br>废话不多说了，直接看代码就行。</p>
<p><strong>ZDUnitRecorder.h</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^kAudioUnitRecorderOnputBlock)(AudioBufferList *bufferList);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZDUnitRecorder</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="keyword">double</span> sampleRate;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> isRecording;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) kAudioUnitRecorderOnputBlock bufferListBlock;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)start;</span><br><span class="line">- (<span class="keyword">void</span>)stop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure>

<p><strong>ZDUnitRecorder.m</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;ZDUnitRecorder.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ZDUnitRecorder</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">    AudioUnit audioUnit;</span><br><span class="line">    <span class="built_in">BOOL</span> audioComponentInitialized;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) AudioStreamBasicDescription inputStreamDesc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ZDUnitRecorder</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">            [<span class="keyword">self</span> defaultSetting];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)defaultSetting &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *sampleRates = @[@<span class="number">16000</span>, @<span class="number">11025</span>, @<span class="number">22050</span>, @<span class="number">44100</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSNumber</span> *sampleRate <span class="keyword">in</span> sampleRates) &#123;</span><br><span class="line">        OSStatus status = [<span class="keyword">self</span> prepareRecord:sampleRate.doubleValue];</span><br><span class="line">        <span class="keyword">if</span> (status == noErr) &#123;</span><br><span class="line">            <span class="keyword">self</span>.sampleRate = [sampleRate doubleValue];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (OSStatus)prepareRecord:(<span class="keyword">double</span>)sampleRate &#123;</span><br><span class="line">    OSStatus status = noErr;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSError</span> *error;</span><br><span class="line">    <span class="built_in">AVAudioSessionCategoryOptions</span> options = <span class="built_in">AVAudioSessionCategoryOptionMixWithOthers</span></span><br><span class="line">    | <span class="built_in">AVAudioSessionCategoryOptionAllowBluetooth</span></span><br><span class="line">    | <span class="built_in">AVAudioSessionCategoryOptionDefaultToSpeaker</span></span><br><span class="line">    | <span class="built_in">AVAudioSessionCategoryOptionAllowAirPlay</span></span><br><span class="line">    | <span class="built_in">AVAudioSessionCategoryOptionAllowBluetoothA2DP</span>;</span><br><span class="line">    </span><br><span class="line">    [[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategoryPlayAndRecord</span></span><br><span class="line">                                     withOptions:options</span><br><span class="line">                                           error:&amp;error];</span><br><span class="line">    [[<span class="built_in">AVAudioSession</span> sharedInstance] setActive:<span class="literal">YES</span> error:&amp;error];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> IGNORE</span></span><br><span class="line">    <span class="built_in">NSInteger</span> inputChannels = session.inputNumberOfChannels;</span><br><span class="line">    <span class="keyword">if</span> (!inputChannels) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;ERROR: NO AUDIO INPUT DEVICE&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!audioComponentInitialized) &#123;</span><br><span class="line">        audioComponentInitialized = <span class="literal">YES</span>;</span><br><span class="line">        <span class="comment">// 描述音频组件</span></span><br><span class="line">        AudioComponentDescription audioComponentDescription;</span><br><span class="line">        audioComponentDescription.componentType = kAudioUnitType_Output;</span><br><span class="line">        audioComponentDescription.componentSubType = kAudioUnitSubType_RemoteIO;</span><br><span class="line">        audioComponentDescription.componentManufacturer = kAudioUnitManufacturer_Apple;</span><br><span class="line">        audioComponentDescription.componentFlags = <span class="number">0</span>;</span><br><span class="line">        audioComponentDescription.componentFlagsMask = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找音频单元</span></span><br><span class="line">        AudioComponent remoteIOComponent = AudioComponentFindNext(<span class="literal">NULL</span>, &amp;audioComponentDescription);</span><br><span class="line">        <span class="comment">// 创建音频单元实例</span></span><br><span class="line">        status = AudioComponentInstanceNew(remoteIOComponent, &amp;(<span class="keyword">self</span>-&gt;audioUnit));</span><br><span class="line">        <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t get RemoteIO unit instance&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">UInt32</span> oneFlag = <span class="number">1</span>;</span><br><span class="line">      AudioUnitElement bus0 = <span class="number">0</span>;</span><br><span class="line">      AudioUnitElement bus1 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((<span class="literal">NO</span>)) &#123;</span><br><span class="line">        <span class="comment">// Configure the RemoteIO unit for playback</span></span><br><span class="line">        status = AudioUnitSetProperty (<span class="keyword">self</span>-&gt;audioUnit,</span><br><span class="line">                                       kAudioOutputUnitProperty_EnableIO,</span><br><span class="line">                                       kAudioUnitScope_Output,</span><br><span class="line">                                       bus0,</span><br><span class="line">                                       &amp;oneFlag,</span><br><span class="line">                                       <span class="keyword">sizeof</span>(oneFlag));</span><br><span class="line">        <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t enable RemoteIO output&quot;</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Configure the RemoteIO unit for input</span></span><br><span class="line">      status = AudioUnitSetProperty(<span class="keyword">self</span>-&gt;audioUnit,</span><br><span class="line">                                    kAudioOutputUnitProperty_EnableIO,</span><br><span class="line">                                    kAudioUnitScope_Input,</span><br><span class="line">                                    bus1,</span><br><span class="line">                                    &amp;oneFlag,</span><br><span class="line">                                    <span class="keyword">sizeof</span>(oneFlag));</span><br><span class="line">      <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t enable RemoteIO input&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 音频流基础描述</span></span><br><span class="line">    AudioStreamBasicDescription asbd = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    asbd.mSampleRate = sampleRate;<span class="comment">//采样率</span></span><br><span class="line">    asbd.mFormatID = kAudioFormatLinearPCM;<span class="comment">//原始数据为PCM格式</span></span><br><span class="line">    asbd.mFormatFlags = kAudioFormatFlagIsSignedInteger | kAudioFormatFlagIsNonInterleaved;</span><br><span class="line">    asbd.mChannelsPerFrame = <span class="number">2</span>;<span class="comment">//每帧的声道数量</span></span><br><span class="line">    asbd.mFramesPerPacket = <span class="number">1</span>;<span class="comment">//每个数据包多少帧</span></span><br><span class="line">    asbd.mBitsPerChannel = <span class="number">16</span>;<span class="comment">//16位</span></span><br><span class="line">    asbd.mBytesPerFrame = asbd.mChannelsPerFrame * asbd.mBitsPerChannel / <span class="number">8</span>;<span class="comment">//每帧多少字节 bytes -&gt; bit / 8</span></span><br><span class="line">    asbd.mBytesPerPacket = asbd.mFramesPerPacket * asbd.mBytesPerFrame;<span class="comment">//每个包多少字节</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Set format for output (bus 0) on the RemoteIO&#x27;s input scope</span></span><br><span class="line">      status = AudioUnitSetProperty(<span class="keyword">self</span>-&gt;audioUnit,</span><br><span class="line">                                    kAudioUnitProperty_StreamFormat,</span><br><span class="line">                                    kAudioUnitScope_Input,</span><br><span class="line">                                    bus0,</span><br><span class="line">                                    &amp;asbd,</span><br><span class="line">                                    <span class="keyword">sizeof</span>(asbd));</span><br><span class="line">      <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t set the ASBD for RemoteIO on input scope/bus 0&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Set format for mic input (bus 1) on RemoteIO&#x27;s output scope</span></span><br><span class="line">      status = AudioUnitSetProperty(<span class="keyword">self</span>-&gt;audioUnit,</span><br><span class="line">                                    kAudioUnitProperty_StreamFormat,</span><br><span class="line">                                    kAudioUnitScope_Output,</span><br><span class="line">                                    bus1,</span><br><span class="line">                                    &amp;asbd,</span><br><span class="line">                                    <span class="keyword">sizeof</span>(asbd));</span><br><span class="line">      <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t set the ASBD for RemoteIO on output scope/bus 1&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Set the recording callback</span></span><br><span class="line">      AURenderCallbackStruct callbackStruct;</span><br><span class="line">      callbackStruct.inputProc = inputCallBackFun;</span><br><span class="line">      callbackStruct.inputProcRefCon = (__bridge <span class="keyword">void</span> *) <span class="keyword">self</span>;</span><br><span class="line">      status = AudioUnitSetProperty(<span class="keyword">self</span>-&gt;audioUnit,</span><br><span class="line">                                    kAudioOutputUnitProperty_SetInputCallback,</span><br><span class="line">                                    kAudioUnitScope_Global,</span><br><span class="line">                                    bus1,</span><br><span class="line">                                    &amp;callbackStruct,</span><br><span class="line">                                    <span class="keyword">sizeof</span> (callbackStruct));</span><br><span class="line">      <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t set RemoteIO&#x27;s render callback on bus 0&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((<span class="literal">NO</span>)) &#123;</span><br><span class="line">        <span class="comment">// Set the playback callback</span></span><br><span class="line">        AURenderCallbackStruct callbackStruct;</span><br><span class="line">        callbackStruct.inputProc = playbackCallback;</span><br><span class="line">        callbackStruct.inputProcRefCon = (__bridge <span class="keyword">void</span> *) <span class="keyword">self</span>;</span><br><span class="line">        status = AudioUnitSetProperty(<span class="keyword">self</span>-&gt;audioUnit,</span><br><span class="line">                                      kAudioUnitProperty_SetRenderCallback,</span><br><span class="line">                                      kAudioUnitScope_Global,</span><br><span class="line">                                      bus0,</span><br><span class="line">                                      &amp;callbackStruct,</span><br><span class="line">                                      <span class="keyword">sizeof</span> (callbackStruct));</span><br><span class="line">        <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t set RemoteIO&#x27;s render callback on bus 0&quot;</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Initialize the RemoteIO unit</span></span><br><span class="line">      status = AudioUnitInitialize(<span class="keyword">self</span>-&gt;audioUnit);</span><br><span class="line">      <span class="keyword">if</span> (CheckError(status, <span class="string">&quot;Couldn&#x27;t initialize the RemoteIO unit&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)start &#123;</span><br><span class="line">    [<span class="keyword">self</span> deleteAudioFile];</span><br><span class="line">    CheckError(AudioOutputUnitStart(audioUnit), <span class="string">&quot;AudioOutputUnitStop failed&quot;</span>);</span><br><span class="line">    _isRecording = <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)stop &#123;</span><br><span class="line">    CheckError(AudioOutputUnitStop(audioUnit),</span><br><span class="line">    <span class="string">&quot;AudioOutputUnitStop failed&quot;</span>);</span><br><span class="line">    _isRecording = <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)deleteAudioFile &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *pcmPath = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>).firstObject stringByAppendingPathComponent:<span class="string">@&quot;record.mp3&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> ([[<span class="built_in">NSFileManager</span> defaultManager] fileExistsAtPath:pcmPath]) &#123;</span><br><span class="line">        [[<span class="built_in">NSFileManager</span> defaultManager] removeItemAtPath:pcmPath error:<span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">    CheckError(AudioComponentInstanceDispose(audioUnit),</span><br><span class="line">               <span class="string">&quot;AudioComponentInstanceDispose failed&quot;</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;UnitRecorder销毁&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> OSStatus CheckError(OSStatus error, <span class="keyword">const</span> <span class="keyword">char</span> *operation) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error == noErr) &#123;</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">char</span> errorString[<span class="number">20</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">// See if it appears to be a 4-char-code</span></span><br><span class="line">  *(<span class="built_in">UInt32</span> *)(errorString + <span class="number">1</span>) = <span class="built_in">CFSwapInt32HostToBig</span>(error);</span><br><span class="line">  <span class="keyword">if</span> (isprint(errorString[<span class="number">1</span>]) &amp;&amp; isprint(errorString[<span class="number">2</span>]) &amp;&amp;</span><br><span class="line">      isprint(errorString[<span class="number">3</span>]) &amp;&amp; isprint(errorString[<span class="number">4</span>])) &#123;</span><br><span class="line">    errorString[<span class="number">0</span>] = errorString[<span class="number">5</span>] = <span class="string">&#x27;\&#x27;&#x27;</span>;</span><br><span class="line">    errorString[<span class="number">6</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// No, format it as an integer</span></span><br><span class="line">    sprintf(errorString, <span class="string">&quot;%d&quot;</span>, (<span class="keyword">int</span>)error);</span><br><span class="line">  &#125;</span><br><span class="line">  fprintf(stderr, <span class="string">&quot;Error: %s (%s)\n&quot;</span>, operation, errorString);</span><br><span class="line">  <span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> OSStatus playbackCallback(<span class="keyword">void</span> *inRefCon,</span><br><span class="line">                                 AudioUnitRenderActionFlags *ioActionFlags,</span><br><span class="line">                                 <span class="keyword">const</span> AudioTimeStamp *inTimeStamp,</span><br><span class="line">                                 <span class="built_in">UInt32</span> inBusNumber,</span><br><span class="line">                                 <span class="built_in">UInt32</span> inNumberFrames,</span><br><span class="line">                                 AudioBufferList *ioData) &#123;</span><br><span class="line">  OSStatus status = noErr;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Notes: ioData contains buffers (may be more than one!)</span></span><br><span class="line">  <span class="comment">// Fill them up as much as you can. Remember to set the size value in each buffer to match how</span></span><br><span class="line">  <span class="comment">// much data is in the buffer.</span></span><br><span class="line">  ZDUnitRecorder *recorder = (__bridge ZDUnitRecorder *) inRefCon;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">UInt32</span> bus1 = <span class="number">1</span>;</span><br><span class="line">  status = AudioUnitRender(recorder-&gt;audioUnit,</span><br><span class="line">                           ioActionFlags,</span><br><span class="line">                           inTimeStamp,</span><br><span class="line">                           bus1,</span><br><span class="line">                           inNumberFrames,</span><br><span class="line">                           ioData);</span><br><span class="line">  CheckError(status, <span class="string">&quot;Couldn&#x27;t render from RemoteIO unit&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> OSStatus inputCallBackFun(<span class="keyword">void</span> *inRefCon,</span><br><span class="line">                    AudioUnitRenderActionFlags *ioActionFlags,</span><br><span class="line">                    <span class="keyword">const</span> AudioTimeStamp *inTimeStamp,</span><br><span class="line">                    <span class="built_in">UInt32</span> inBusNumber,</span><br><span class="line">                    <span class="built_in">UInt32</span> inNumberFrames,</span><br><span class="line">                    AudioBufferList * __<span class="keyword">nullable</span> ioData)</span><br><span class="line">&#123;</span><br><span class="line">    ZDUnitRecorder *recorder = (__bridge ZDUnitRecorder *)(inRefCon);</span><br><span class="line">    </span><br><span class="line">    AudioBuffer buffer;</span><br><span class="line">    buffer.mData = <span class="literal">NULL</span>;</span><br><span class="line">    buffer.mDataByteSize = <span class="number">0</span>;</span><br><span class="line">    buffer.mNumberChannels = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    AudioBuffer buffer2;</span><br><span class="line">    buffer2.mData = <span class="literal">NULL</span>;</span><br><span class="line">    buffer2.mDataByteSize = <span class="number">0</span>;</span><br><span class="line">    buffer2.mNumberChannels = <span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">    AudioBufferList bufferList;</span><br><span class="line">    bufferList.mNumberBuffers = <span class="number">2</span>;</span><br><span class="line">    bufferList.mBuffers[<span class="number">0</span>] = buffer;</span><br><span class="line">    bufferList.mBuffers[<span class="number">1</span>] = buffer2;</span><br><span class="line">    </span><br><span class="line">    AudioUnitRender(recorder-&gt;audioUnit,</span><br><span class="line">                    ioActionFlags,</span><br><span class="line">                    inTimeStamp,</span><br><span class="line">                    inBusNumber,</span><br><span class="line">                    inNumberFrames,</span><br><span class="line">                    &amp;bufferList);</span><br><span class="line">    <span class="keyword">if</span> (recorder.bufferListBlock) &#123;</span><br><span class="line">        recorder.bufferListBlock(&amp;bufferList);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> noErr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如何使用？</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) ZDUnitRecorder *recorder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.recorder.isRecording) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.recorder stop];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">self</span>.recorder start];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#prama mark - Lazy Load</span></span><br><span class="line">- (ZDUnitRecorder *)recorder &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!_recorder) &#123;</span><br><span class="line">        _recorder = [[ZDUnitRecorder alloc] init];</span><br><span class="line">        _recorder.bufferListBlock = ^(AudioBufferList * _Nonnull bufferList) &#123;</span><br><span class="line">            AudioBuffer left = bufferList-&gt;mBuffers[<span class="number">0</span>];<span class="comment">// 左耳机buffer</span></span><br><span class="line">            AudioBuffer right = bufferList-&gt;mBuffers[<span class="number">1</span>];<span class="comment">// 右耳机buffer</span></span><br><span class="line">            <span class="built_in">NSData</span> *leftData = [<span class="built_in">NSData</span> dataWithBytes:left.mData length:left.mDataByteSize];</span><br><span class="line">            <span class="built_in">NSData</span> *rightData = [<span class="built_in">NSData</span> dataWithBytes:right.mData length:right.mDataByteSize];</span><br><span class="line">            <span class="comment">// 保存到沙盒/直接播报看业务需求决定</span></span><br><span class="line">            <span class="comment">// 音频文件转MP3/AAC格式，网上很多资料不再继续叙述了。</span></span><br><span class="line">            [<span class="keyword">self</span> handleAudioData:leftData rightData:rightData];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _recorder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>//<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>//<br><strong>Best Regard!</strong><br><strong>生命不止，奋斗不息</strong></p>
<p>//<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>//</p>
]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>iOS</tag>
        <tag>AudioUnit</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS开发-NSButton</title>
    <url>/2020/10/19/macOS%E5%BC%80%E5%8F%91-NSButton/</url>
    <content><![CDATA[<h1 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h1><p><strong>按钮</strong>，主要用户通过<code>NSControl</code>控制点击、高亮等事件，同<code>iOS</code>的<code>UIButton</code></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSButton</span> : <span class="title">NSControl</span> &lt;<span class="title">NSUserInterfaceValidations</span>, <span class="title">NSAccessibilityButton</span>, <span class="title">NSUserInterfaceCompression</span>&gt;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*	NSButton 定义于 AppKit 框架；</span></span><br><span class="line"><span class="comment">*	NSButton 继承 NSControl</span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure>

<h1 id="二-源码"><a href="#二-源码" class="headerlink" title="二.源码"></a>二.源码</h1><h2 id="1-创建NSButton"><a href="#1-创建NSButton" class="headerlink" title="1.创建NSButton"></a>1.创建<code>NSButton</code></h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建带有标题和图像的标准按钮。在从左到右的本地化中，图像显示在标题的左侧。在从右到左的本地化中，它显示在右侧。</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)buttonWithTitle:(<span class="built_in">NSString</span> *)title image:(<span class="built_in">NSImage</span> *)image target:(<span class="keyword">nullable</span> <span class="keyword">id</span>)target action:(<span class="keyword">nullable</span> SEL)action API_AVAILABLE(macos(<span class="number">10.12</span>));</span><br><span class="line"><span class="comment">// 创建带有标题的标准按钮。</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)buttonWithTitle:(<span class="built_in">NSString</span> *)title target:(<span class="keyword">nullable</span> <span class="keyword">id</span>)target action:(<span class="keyword">nullable</span> SEL)action API_AVAILABLE(macos(<span class="number">10.12</span>));</span><br><span class="line"><span class="comment">// 使用提供的图像创建标准按钮。设置图像的accessibilityDescription属性以确保此控件的可访问性。</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)buttonWithImage:(<span class="built_in">NSImage</span> *)image target:(<span class="keyword">nullable</span> <span class="keyword">id</span>)target action:(<span class="keyword">nullable</span> SEL)action API_AVAILABLE(macos(<span class="number">10.12</span>));</span><br><span class="line"><span class="comment">// 使用提供的标题创建标准复选框。</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)checkboxWithTitle:(<span class="built_in">NSString</span> *)title target:(<span class="keyword">nullable</span> <span class="keyword">id</span>)target action:(<span class="keyword">nullable</span> SEL)action API_AVAILABLE(macos(<span class="number">10.12</span>));</span><br><span class="line"><span class="comment">// 使用提供的标题创建标准单选按钮。s</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)radioButtonWithTitle:(<span class="built_in">NSsString</span> *)title target:(<span class="keyword">nullable</span> <span class="keyword">id</span>)target action:(<span class="keyword">nullable</span> SEL)action API_AVAILABLE(macos(<span class="number">10.12</span>));</span><br></pre></td></tr></table></figure>

<h2 id="2-按钮基础配置"><a href="#2-按钮基础配置" class="headerlink" title="2.按钮基础配置"></a>2.按钮基础配置</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">NSButtonType</span>) &#123;</span><br><span class="line">    <span class="built_in">NSButtonTypeMomentaryLight</span>    = <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">NSButtonTypePushOnPushOff</span>     = <span class="number">1</span>,</span><br><span class="line">    <span class="built_in">NSButtonTypeToggle</span>            = <span class="number">2</span>,</span><br><span class="line">    <span class="built_in">NSButtonTypeSwitch</span>            = <span class="number">3</span>,<span class="comment">// 勾选框，不支持带图片，适合做多选</span></span><br><span class="line">    <span class="built_in">NSButtonTypeRadio</span>             = <span class="number">4</span>,<span class="comment">// 勾选框，不支持带图片，适合做单选。</span></span><br><span class="line">    <span class="built_in">NSButtonTypeMomentaryChange</span>   = <span class="number">5</span>,<span class="comment">// 文字会闪烁</span></span><br><span class="line">    <span class="built_in">NSButtonTypeOnOff</span>             = <span class="number">6</span>,</span><br><span class="line">    <span class="built_in">NSButtonTypeMomentaryPushIn</span>   = <span class="number">7</span>,</span><br><span class="line">    <span class="built_in">NSButtonTypeAccelerator</span> API_AVAILABLE(macos(<span class="number">10.10</span><span class="number">.3</span>)) = <span class="number">8</span>,</span><br><span class="line">    <span class="built_in">NSButtonTypeMultiLevelAccelerator</span> API_AVAILABLE(macos(<span class="number">10.10</span><span class="number">.3</span>)) = <span class="number">9</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 设置按钮类型，如上NSButtonType枚举</span></span><br><span class="line">- (<span class="keyword">void</span>)setButtonType:(<span class="built_in">NSButtonType</span>)type;</span><br><span class="line"><span class="comment">// 显示文本</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *title;</span><br><span class="line"><span class="comment">// 富文本</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSAttributedString</span> *attributedTitle;</span><br><span class="line"><span class="comment">// 按钮打开状态时的标题，部分类型不显示备用标题</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *alternateTitle;</span><br><span class="line"><span class="comment">// 富文本按钮打开时的标题</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSAttributedString</span> *attributedAlternateTitle;</span><br><span class="line"><span class="comment">// 按钮点击时的播放声音，默认为nil</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSSound</span> *sound;</span><br><span class="line"><span class="comment">// 拖动时发送长按或长时间悬停时的操作。默认为否。</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isSpringLoaded) <span class="built_in">BOOL</span> springLoaded API_AVAILABLE(macos(<span class="number">10.10</span><span class="number">.3</span>));</span><br><span class="line"><span class="comment">// 配置NSMultiLevelAcceleratorButton的最大允许级别，允许的值范围为[1,5]。默认为2。</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSInteger</span> maxAcceleratorLevel API_AVAILABLE(macos(<span class="number">10.10</span><span class="number">.3</span>));</span><br><span class="line"><span class="comment">// 为“continuous”为“YES”时发送的重复操作消息设置初始延迟和重复间隔（以秒为单位）。</span></span><br><span class="line">- (<span class="keyword">void</span>)setPeriodicDelay:(<span class="keyword">float</span>)delay interval:(<span class="keyword">float</span>)interval;</span><br><span class="line"><span class="comment">/*! 获取在“continuous”为YES时发送的重复操作消息的初始延迟和重复间隔（以秒为单位）。此方法的两个参数都不能为NULL。*/</span></span><br><span class="line">- (<span class="keyword">void</span>)getPeriodicDelay:(<span class="keyword">float</span> *)delay interval:(<span class="keyword">float</span> *)interval;</span><br></pre></td></tr></table></figure>

<h2 id="3-配置按钮图片"><a href="#3-配置按钮图片" class="headerlink" title="3.配置按钮图片"></a>3.配置按钮图片</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">NSBezelStyle</span>) &#123;</span><br><span class="line">    <span class="built_in">NSBezelStyleRounded</span>           = <span class="number">1</span>,</span><br><span class="line">    <span class="built_in">NSBezelStyleRegularSquare</span>     = <span class="number">2</span>,</span><br><span class="line">    <span class="built_in">NSBezelStyleDisclosure</span>        = <span class="number">5</span>,</span><br><span class="line">    <span class="built_in">NSBezelStyleShadowlessSquare</span>  = <span class="number">6</span>,</span><br><span class="line">    <span class="built_in">NSBezelStyleCircular</span>          = <span class="number">7</span>,</span><br><span class="line">    <span class="built_in">NSBezelStyleTexturedSquare</span>    = <span class="number">8</span>,</span><br><span class="line">    <span class="built_in">NSBezelStyleHelpButton</span>        = <span class="number">9</span>,</span><br><span class="line">    <span class="built_in">NSBezelStyleSmallSquare</span>       = <span class="number">10</span>,</span><br><span class="line">    <span class="built_in">NSBezelStyleTexturedRounded</span>   = <span class="number">11</span>,</span><br><span class="line">    <span class="built_in">NSBezelStyleRoundRect</span>         = <span class="number">12</span>,</span><br><span class="line">    <span class="built_in">NSBezelStyleRecessed</span>          = <span class="number">13</span>,</span><br><span class="line">    <span class="built_in">NSBezelStyleRoundedDisclosure</span> = <span class="number">14</span>,</span><br><span class="line">    <span class="built_in">NSBezelStyleInline</span> API_AVAILABLE(macos(<span class="number">10.7</span>)) = <span class="number">15</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*! 按钮系统边框样式 */</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSBezelStyle</span> bezelStyle;</span><br><span class="line"><span class="comment">/*! 是否绘制边框，bordered为NO时，bezelStyle设置无效 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isBordered) <span class="built_in">BOOL</span> bordered;</span><br><span class="line"><span class="comment">/*! 按钮是否透明 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">getter</span>=isTransparent) <span class="built_in">BOOL</span> transparent;</span><br><span class="line"><span class="comment">/*! 按钮是否仅在指针位于按钮上方时才显示其边框。 */</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> showsBorderOnlyWhileMouseInside;</span><br><span class="line"><span class="comment">/*! 按钮上的图片、设置nil时不显示图片 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSImage</span> *image;</span><br><span class="line"><span class="comment">/*! 按钮处于打开状态上的替代图片，部分类型不支持 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSImage</span> *alternateImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">NSCellImagePosition</span>) &#123;</span><br><span class="line">    <span class="built_in">NSNoImage</span>       = <span class="number">0</span>,<span class="comment">// 没有图片</span></span><br><span class="line">    <span class="built_in">NSImageOnly</span>     = <span class="number">1</span>,<span class="comment">// 只显示图片</span></span><br><span class="line">    <span class="built_in">NSImageLeft</span>     = <span class="number">2</span>,<span class="comment">// 图片在左</span></span><br><span class="line">    <span class="built_in">NSImageRight</span>    = <span class="number">3</span>,<span class="comment">// 图片在右</span></span><br><span class="line">    <span class="built_in">NSImageBelow</span>    = <span class="number">4</span>,<span class="comment">// 图片在下</span></span><br><span class="line">    <span class="built_in">NSImageAbove</span>    = <span class="number">5</span>,<span class="comment">// 图片在上</span></span><br><span class="line">    <span class="built_in">NSImageOverlaps</span> = <span class="number">6</span>,<span class="comment">// 图片文字重叠</span></span><br><span class="line">    <span class="built_in">NSImageLeading</span>  API_AVAILABLE(macos(<span class="number">10.12</span>)) = <span class="number">7</span>,<span class="comment">// 前导</span></span><br><span class="line">    <span class="built_in">NSImageTrailing</span> API_AVAILABLE(macos(<span class="number">10.12</span>)) = <span class="number">8</span> <span class="comment">// 尾随</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*! 图片相对于标题的位置，NSCellImagePosition类型如是上枚举 */</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSCellImagePosition</span> imagePosition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">NSImageScaling</span>) &#123;</span><br><span class="line">    <span class="built_in">NSImageScaleProportionallyDown</span> = <span class="number">0</span>, <span class="comment">// 如果图像对于目的地太大，则将其缩小。保持纵横比。</span></span><br><span class="line">    <span class="built_in">NSImageScaleAxesIndependently</span>,      <span class="comment">// 缩放每个维度以完全适合目的地。不保留纵横比。</span></span><br><span class="line">    <span class="built_in">NSImageScaleNone</span>,                   <span class="comment">// 不缩放.</span></span><br><span class="line">    <span class="built_in">NSImageScaleProportionallyUpOrDown</span>, <span class="comment">// 将图像缩放到最大可能的尺寸，同时（1）停留在目标区域内（2）保持纵横比</span></span><br><span class="line">    <span class="built_in">NSScaleProportionally</span> API_DEPRECATED(<span class="string">&quot;Use NSImageScaleProportionallyDown instead&quot;</span>, macos(<span class="number">10.0</span>,<span class="number">10.10</span>)) = <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">NSScaleToFit</span> API_DEPRECATED(<span class="string">&quot;Use NSImageScaleAxesIndependently instead&quot;</span>, macos(<span class="number">10.0</span>,<span class="number">10.10</span>)),</span><br><span class="line">    <span class="built_in">NSScaleNone</span> API_DEPRECATED(<span class="string">&quot;Use NSImageScaleNone instead&quot;</span>, macos(<span class="number">10.0</span>,<span class="number">10.10</span>))</span><br><span class="line">&#125; API_AVAILABLE(macos(<span class="number">10.5</span>));</span><br><span class="line"><span class="comment">/*! 缩放 */</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSImageScaling</span> imageScaling API_AVAILABLE(macos(<span class="number">10.5</span>));s</span><br><span class="line"><span class="comment">/*! 一个布尔值，用于确定按钮的图像和标题在按钮边框中的位置。如果为false，则根据按钮挡板边缘的imagePosition属性定位图像，并且标题位于剩余空间内。如果为true，则基于imagePosition属性将按钮的图像直接定位到标题的旁边，并且图像和标题作为单个单元定位在按钮挡板中。 */</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> imageHugsTitle API_AVAILABLE(macos(<span class="number">10.12</span>));</span><br><span class="line"><span class="comment">/*! 将自定义颜色应用于按钮的边框（在支持它的外观中）。零值表示未修改的按钮外观。默认值为零。 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSColor</span> *bezelColor API_AVAILABLE(macos(<span class="number">10.12</span><span class="number">.2</span>));</span><br><span class="line"><span class="comment">/*! 将淡色应用于模板图像和文本内容，并结合其他适合主题的效果。仅适用于无边界按钮。零值表示没有颜色修改的标准效果集。默认值为零。非模板图像和属性化字符串值不受contentTintColor的影响。 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">copy</span>) <span class="built_in">NSColor</span> *contentTintColor API_AVAILABLE(macos(<span class="number">10.14</span>));</span><br></pre></td></tr></table></figure>

<h2 id="4-按钮状态"><a href="#4-按钮状态" class="headerlink" title="4.按钮状态"></a>4.按钮状态</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NSInteger</span> <span class="built_in">NSControlStateValue</span> <span class="built_in">NS_TYPED_EXTENSIBLE_ENUM</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSControlStateValue</span> <span class="built_in">NSControlStateValueMixed</span> = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSControlStateValue</span> <span class="built_in">NSControlStateValueOff</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSControlStateValue</span> <span class="built_in">NSControlStateValueOn</span> = <span class="number">1</span>;	</span><br><span class="line"><span class="comment">/*! 按钮的状态。按钮支持关闭和打开状态，以及根据“allowsMixedState”属性的值附加的混合状态。 */</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSControlStateValue</span> state;</span><br><span class="line"><span class="comment">/*! 指示按钮是否允许混合状态的布尔值。如果否，按钮有两种状态（开和关），如果是，按钮有三种状态（开、关和混合）。混合状态通常与复选框和单选按钮一起使用，以指示部分启用的值。 */</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> allowsMixedState;</span><br><span class="line"><span class="comment">/*! 将按钮设置为下一个符合条件的状态。如果按钮允许混合状态，则按以下顺序循环状态：打开、关闭、混合、打开等。如果按钮不允许混合状态，则在关闭和打开之间切换。 */</span></span><br><span class="line">- (<span class="keyword">void</span>)setNextState;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*! 突出显示或取消突出显示按钮。高亮显示使按钮显示为“按下”，这可能包括显示照明挡板，或显示替代图像或标题，具体取决于按钮的类型。*/</span></span><br><span class="line">- (<span class="keyword">void</span>)highlight:(<span class="built_in">BOOL</span>)flag;</span><br></pre></td></tr></table></figure>

<h2 id="5-键盘事件"><a href="#5-键盘事件" class="headerlink" title="5.键盘事件"></a>5.键盘事件</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*! 此属性包含按钮的键等效项，如果未定义等效项，则包含空字符串。按钮没有默认的等价键。设置与返回字符相等的键将使其充当其窗口的默认按钮。 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) <span class="built_in">NSString</span> *keyEquivalent;</span><br><span class="line"><span class="comment">/*! 一个位掩码，指定应用于按钮的等效键的修改键。掩码位由NSEventModifierFlags选项集定义。按钮键等效修改器掩码中唯一相关的掩码位是NSEventModifierFlagControl、NSEventModifierFlagOption和NSEventModifierFlagCommand。 */</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">NSEventModifierFlags</span> keyEquivalentModifierMask;</span><br><span class="line"><span class="comment">/*! 如果事件参数与按钮的等效键匹配，则按钮将短暂高亮显示并执行其操作，然后返回YES。否则，返回NO。 */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)performKeyEquivalent:(<span class="built_in">NSEvent</span> *)key;</span><br></pre></td></tr></table></figure>

<h1 id="三-macOS-和-iOS-的不同点"><a href="#三-macOS-和-iOS-的不同点" class="headerlink" title="三.macOS 和 iOS 的不同点"></a>三.<code>macOS</code> 和 <code>iOS</code> 的不同点</h1><h2 id="1-添加点击事件"><a href="#1-添加点击事件" class="headerlink" title="1.添加点击事件"></a>1.添加点击事件</h2><p><strong>iOS</strong>:</p>
<p> <code>[button addTarget: action: forControlEvents:];</code> </p>
<p><strong>Mac</strong>:  </p>
<p>1.需要同时设置 <code>[button setTarget: targetObject:];</code> <code>[button setAction: @selector(buttonClick:)];</code></p>
<p>2.初始化的时候添加点击事件 </p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)addButton &#123;</span><br><span class="line">  <span class="built_in">NSButton</span> *button = [<span class="built_in">NSButton</span> buttonWithTitle:<span class="string">@&quot;使劲戳&quot;</span> target:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(buttonClick:)];</span><br><span class="line">  button.frame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">40</span>);</span><br><span class="line">	[<span class="keyword">self</span>.view addSubView:button];</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)buttonClick:(<span class="built_in">NSButton</span> *)sender &#123;</span><br><span class="line">  <span class="comment">// 处理点击事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-修改文字颜色"><a href="#2-修改文字颜色" class="headerlink" title="2.修改文字颜色"></a>2.修改文字颜色</h2><p>macOS不能像iOS一样直接设置文字颜色 <code>[button setTitleColor: forState:]</code></p>
<p>macOS的设置如下</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.无边框可以通过 contentTintColor 设置文字颜色</span></span><br><span class="line">button.bordered = <span class="literal">NO</span>;</span><br><span class="line">button.contentTintColor = <span class="built_in">NSColor</span>.redColor;</span><br><span class="line"><span class="comment">// 2.有边框</span></span><br><span class="line"><span class="built_in">NSMutableAttributedString</span> *attrTitle = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithAttributedString:[button attributedTitle]];</span><br><span class="line">[attrTitle addAttribute:<span class="built_in">NSForegroundColorAttributeName</span> value:<span class="built_in">NSColor</span>.redColor range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, attrTitle.length)];</span><br><span class="line">[attrTitle fixAttributesInRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, attrTitle.length)];</span><br><span class="line">[button setAttributedTitle:attrTitle];</span><br></pre></td></tr></table></figure>

<h2 id="3-修改背景色"><a href="#3-修改背景色" class="headerlink" title="3.修改背景色"></a>3.修改背景色</h2><p>macOS的按钮不能像iOS一样直接设置背景颜色<code>[self setBackgroundColor:]</code>，需要在layer层上设置</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">button.wantsLayer = <span class="literal">YES</span>;<span class="comment">// 不设置 wantsLayer 背景色设置无效</span></span><br><span class="line">button.layer.backgroundColor = <span class="built_in">NSColor</span>.blueColor.CGColor;</span><br></pre></td></tr></table></figure>

<h2 id="4-让按钮点击时不高亮"><a href="#4-让按钮点击时不高亮" class="headerlink" title="4.让按钮点击时不高亮"></a>4.让按钮点击时不高亮</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[(<span class="built_in">NSButtonCell</span> *)button.cell setHighlightsBy:<span class="built_in">NSNoCellMask</span>];</span><br></pre></td></tr></table></figure>

<h2 id="5-鼠标悬停在按钮上出现提示文字"><a href="#5-鼠标悬停在按钮上出现提示文字" class="headerlink" title="5.鼠标悬停在按钮上出现提示文字"></a>5.鼠标悬停在按钮上出现提示文字</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">button.toolTip = <span class="string">@&quot;瞅啥瞅，快戳啊&quot;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="6-修改按钮高度"><a href="#6-修改按钮高度" class="headerlink" title="6.修改按钮高度"></a>6.修改按钮高度</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[button setBezelStyle:<span class="built_in">NSBezelStyleRegularSquare</span>];</span><br></pre></td></tr></table></figure>

<h1 id="四-使用NSView创建Button"><a href="#四-使用NSView创建Button" class="headerlink" title="四. 使用NSView创建Button"></a>四. 使用NSView创建Button</h1><blockquote>
<p>参考：<a href="https://www.jianshu.com/p/7817de7df005">《macOS开发》自定义控件之NSButton</a></p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Cocoa/Cocoa.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</span><br><span class="line">    FSRectCornerTopLeft     = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">    FSRectCornerTopRight    = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">    FSRectCornerBottomLeft  = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">    FSRectCornerBottomRight = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">    FSRectCornerAllCorners  = ~<span class="number">0</span>UL</span><br><span class="line">&#125; FSRectCorner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</span><br><span class="line">    FSTextAlignmentLeft  = <span class="number">0</span>, <span class="comment">//左对齐</span></span><br><span class="line">    FSTextAlignmentCenter,    <span class="comment">//居中</span></span><br><span class="line">    FSTextAlignmentRight      <span class="comment">//右对齐</span></span><br><span class="line">    </span><br><span class="line">&#125;FSTextAlignment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</span><br><span class="line">    FSTextUnderLineStyleNone  = <span class="number">0</span>,     <span class="comment">//无下划线</span></span><br><span class="line">    FSTextUnderLineStyleSingle,        <span class="comment">//单下划线</span></span><br><span class="line">    FSTextUnderLineStyleDouble,        <span class="comment">//双下划线</span></span><br><span class="line">    FSTextUnderLineStyleDeleteSingle,  <span class="comment">//单删除线</span></span><br><span class="line">    FSTextUnderLineStyleDeleteDouble   <span class="comment">//双删除线</span></span><br><span class="line">    </span><br><span class="line">&#125;FSTextUnderLineStyle;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FSCustomBtn</span> : <span class="title">NSView</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> target;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>) SEL action;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 当鼠标移动到控件时，是否显示&quot;小手&quot;</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> isHandCursor;</span><br><span class="line"></span><br><span class="line"><span class="comment">///圆角</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> radius;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) FSRectCorner rectCorners;</span><br><span class="line"></span><br><span class="line"><span class="comment">///按钮文字</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *title;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *selectedTitle;</span><br><span class="line"></span><br><span class="line"><span class="comment">///按钮文字对齐方式</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) FSTextAlignment textAlignment;</span><br><span class="line"></span><br><span class="line"><span class="comment">///按钮文字下划线样式</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) FSTextUnderLineStyle textUnderLineStyle;</span><br><span class="line"></span><br><span class="line"><span class="comment">///按钮文字颜色</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSColor</span> *titleColor;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSColor</span> *selectedTitleColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">///按钮字体</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSFont</span> *font;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSFont</span> *selectedFont;</span><br><span class="line"></span><br><span class="line"><span class="comment">///当背景图片存在时，背景色无效</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSImage</span> *backgroundImage;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSImage</span> *selectedBackgroundImage;</span><br><span class="line"></span><br><span class="line"><span class="comment">///当背景图片不存在时，显示背景色</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSColor</span> *backgroundColor;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">nullable</span>, <span class="keyword">strong</span>) <span class="built_in">NSColor</span> *selectedBackgroundColor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;FSCustomBtn.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/message.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FSMsgSend(...)       ((void (*)(void *, SEL, id))objc_msgSend)(__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FSMsgTarget(target)  (__bridge void *)(target)</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FSCustomBtn</span> () </span>&#123;</span><br><span class="line">    <span class="built_in">NSTrackingArea</span> *_trackingArea;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) <span class="built_in">BOOL</span> mouseDown;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FSCustomBtn</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setMouseDown:(<span class="built_in">BOOL</span>)mouseDown &#123;</span><br><span class="line">    <span class="keyword">if</span> (_mouseDown == mouseDown) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    _mouseDown = mouseDown;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///圆角</span></span><br><span class="line">- (<span class="keyword">void</span>)setRectCorners:(FSRectCorner)rectCorners &#123;</span><br><span class="line">    <span class="keyword">if</span> (_rectCorners == rectCorners) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    _rectCorners = rectCorners;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///半径</span></span><br><span class="line">- (<span class="keyword">void</span>)setRadius:(<span class="built_in">CGFloat</span>)radius &#123;</span><br><span class="line">    <span class="keyword">if</span> (_radius == radius) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    _radius = radius;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///按钮文字</span></span><br><span class="line">- (<span class="keyword">void</span>)setTitle:(<span class="built_in">NSString</span> *)title &#123;</span><br><span class="line">    <span class="keyword">if</span> ([_title isEqualToString:title]) <span class="keyword">return</span>;</span><br><span class="line">    _title = title;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setSelectedTitle:(<span class="built_in">NSString</span> *)selectedTitle &#123;</span><br><span class="line">    <span class="keyword">if</span> ([_selectedTitle isEqualToString:selectedTitle]) <span class="keyword">return</span>;</span><br><span class="line">    _selectedTitle = selectedTitle;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///按钮文字对齐方式</span></span><br><span class="line">- (<span class="keyword">void</span>)setTextAlignment:(FSTextAlignment)textAlignment &#123;</span><br><span class="line">    <span class="keyword">if</span> (_textAlignment == textAlignment) <span class="keyword">return</span>;</span><br><span class="line">    _textAlignment = textAlignment;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///按钮文字下划线样式</span></span><br><span class="line">- (<span class="keyword">void</span>)setTextUnderLineStyle:(FSTextUnderLineStyle)textUnderLineStyle &#123;</span><br><span class="line">    <span class="keyword">if</span> (_textUnderLineStyle == textUnderLineStyle) <span class="keyword">return</span>;</span><br><span class="line">    _textUnderLineStyle = textUnderLineStyle;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///按钮文字颜色</span></span><br><span class="line">- (<span class="keyword">void</span>)setTitleColor:(<span class="built_in">NSColor</span> *)titleColor &#123;</span><br><span class="line">    <span class="keyword">if</span> (_titleColor == titleColor) <span class="keyword">return</span>;</span><br><span class="line">    _titleColor = titleColor;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setSelectedTitleColor:(<span class="built_in">NSColor</span> *)selectedTitleColor &#123;</span><br><span class="line">    <span class="keyword">if</span> (_selectedTitleColor == selectedTitleColor) <span class="keyword">return</span>;</span><br><span class="line">    _selectedTitleColor = selectedTitleColor;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///按钮字体</span></span><br><span class="line">- (<span class="keyword">void</span>)setFont:(<span class="built_in">NSFont</span> *)font &#123;</span><br><span class="line">    <span class="keyword">if</span> (_font == font) <span class="keyword">return</span>;</span><br><span class="line">    _font = font;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setSelectedFont:(<span class="built_in">NSFont</span> *)selectedFont &#123;</span><br><span class="line">    <span class="keyword">if</span> (_selectedFont == selectedFont) <span class="keyword">return</span>;</span><br><span class="line">    _selectedFont = selectedFont;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///当背景图片存在时，背景色无效</span></span><br><span class="line">- (<span class="keyword">void</span>)setBackgroundImage:(<span class="built_in">NSImage</span> *)backgroundImage &#123;</span><br><span class="line">    <span class="keyword">if</span> (_backgroundImage == backgroundImage) <span class="keyword">return</span>;</span><br><span class="line">    _backgroundImage = backgroundImage;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setSelectedBackgroundImage:(<span class="built_in">NSImage</span> *)selectedBackgroundImage &#123;</span><br><span class="line">    <span class="keyword">if</span> (_selectedBackgroundImage == selectedBackgroundImage) <span class="keyword">return</span>;</span><br><span class="line">    _selectedBackgroundImage = selectedBackgroundImage;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///当背景图片不存在时，显示背景色</span></span><br><span class="line">- (<span class="keyword">void</span>)setBackgroundColor:(<span class="built_in">NSColor</span> *)backgroundColor &#123;</span><br><span class="line">    <span class="keyword">if</span> (_backgroundColor == backgroundColor) <span class="keyword">return</span>;</span><br><span class="line">    _backgroundColor = backgroundColor;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setSelectedBackgroundColor:(<span class="built_in">NSColor</span> *)selectedBackgroundColor &#123;</span><br><span class="line">    <span class="keyword">if</span> (_selectedBackgroundColor == selectedBackgroundColor) <span class="keyword">return</span>;</span><br><span class="line">    _selectedBackgroundColor = selectedBackgroundColor;</span><br><span class="line">    [<span class="keyword">self</span> setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setNeedsDisplay &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.superview) &#123;</span><br><span class="line">        [<span class="keyword">self</span> setNeedsDisplay:<span class="literal">YES</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)updateTrackingAreas &#123;</span><br><span class="line">    <span class="keyword">if</span> (_trackingArea == <span class="literal">nil</span>) &#123;</span><br><span class="line">        _trackingArea = [[<span class="built_in">NSTrackingArea</span> alloc] initWithRect:<span class="keyword">self</span>.bounds</span><br><span class="line">                                                     options:<span class="built_in">NSTrackingMouseEnteredAndExited</span>|<span class="built_in">NSTrackingActiveInKeyWindow</span></span><br><span class="line">                                                       owner:<span class="keyword">self</span></span><br><span class="line">                                                    userInfo:<span class="literal">nil</span>];</span><br><span class="line">        [<span class="keyword">self</span> addTrackingArea:_trackingArea];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)mouseEntered:(<span class="built_in">NSEvent</span> *)theEvent&#123;</span><br><span class="line">    <span class="keyword">if</span> (_isHandCursor == <span class="literal">NO</span>) <span class="keyword">return</span>;</span><br><span class="line">    [[<span class="built_in">NSCursor</span> pointingHandCursor] set];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)mouseExited:(<span class="built_in">NSEvent</span> *)theEvent&#123;</span><br><span class="line">    <span class="keyword">if</span> (_isHandCursor == <span class="literal">NO</span>) <span class="keyword">return</span>;</span><br><span class="line">    [[<span class="built_in">NSCursor</span> arrowCursor] set];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)mouseDown:(<span class="built_in">NSEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSPoint</span> point = [<span class="keyword">self</span> convertPoint:[event locationInWindow] fromView:<span class="literal">nil</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CGRectContainsPoint</span>(<span class="keyword">self</span>.bounds, point)) &#123;</span><br><span class="line">        <span class="keyword">self</span>.mouseDown = <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)mouseUp:(<span class="built_in">NSEvent</span> *)event &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.mouseDown) &#123;</span><br><span class="line">        <span class="keyword">self</span>.mouseDown = <span class="literal">NO</span>;</span><br><span class="line">        [<span class="keyword">self</span> setNeedsDisplay:<span class="literal">YES</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSPoint</span> point = [<span class="keyword">self</span> convertPoint:[event locationInWindow] fromView:<span class="literal">nil</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">CGRectContainsPoint</span>(<span class="keyword">self</span>.bounds, point)) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">self</span>.target &amp;&amp; <span class="keyword">self</span>.action &amp;&amp; [<span class="keyword">self</span>.target respondsToSelector:<span class="keyword">self</span>.action]) &#123;</span><br><span class="line">                FSMsgSend(FSMsgTarget(<span class="keyword">self</span>.target), <span class="keyword">self</span>.action, <span class="keyword">self</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)drawRect:(<span class="built_in">NSRect</span>)dirtyRect &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *title      = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSFont</span>   *font       = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSColor</span>  *titleColor = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSColor</span>  *backgroundColor = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSImage</span>  *backgroundImage = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.mouseDown) &#123;</span><br><span class="line">        title = <span class="keyword">self</span>.selectedTitle;</span><br><span class="line">        font  = <span class="keyword">self</span>.selectedFont;</span><br><span class="line">        titleColor = <span class="keyword">self</span>.selectedTitleColor;</span><br><span class="line">        backgroundColor = <span class="keyword">self</span>.selectedBackgroundColor;</span><br><span class="line">        backgroundImage = <span class="keyword">self</span>.selectedBackgroundImage;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (title == <span class="literal">nil</span>) &#123;</span><br><span class="line">            title = <span class="keyword">self</span>.title;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (font == <span class="literal">nil</span>) &#123;</span><br><span class="line">            font  = <span class="keyword">self</span>.font;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (titleColor == <span class="literal">nil</span>) &#123;</span><br><span class="line">            titleColor = <span class="keyword">self</span>.titleColor;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (backgroundColor == <span class="literal">nil</span>) &#123;</span><br><span class="line">            backgroundColor = <span class="keyword">self</span>.backgroundColor;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (backgroundImage == <span class="literal">nil</span>) &#123;</span><br><span class="line">            backgroundImage = <span class="keyword">self</span>.backgroundImage;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        title = <span class="keyword">self</span>.title;</span><br><span class="line">        font  = <span class="keyword">self</span>.font;</span><br><span class="line">        titleColor = <span class="keyword">self</span>.titleColor;</span><br><span class="line">        backgroundColor = <span class="keyword">self</span>.backgroundColor;</span><br><span class="line">        backgroundImage = <span class="keyword">self</span>.backgroundImage;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (title == <span class="literal">nil</span>) &#123;</span><br><span class="line">        title = <span class="string">@&quot;按钮&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (font == <span class="literal">nil</span>) &#123;</span><br><span class="line">        font = [<span class="built_in">NSFont</span> systemFontOfSize:<span class="number">17</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (titleColor == <span class="literal">nil</span>) &#123;</span><br><span class="line">        titleColor = [<span class="built_in">NSColor</span> blackColor];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (backgroundImage) &#123;</span><br><span class="line">        backgroundColor = [<span class="built_in">NSColor</span> colorWithPatternImage:backgroundImage];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (backgroundColor == <span class="literal">nil</span>) &#123;</span><br><span class="line">            backgroundColor = [<span class="built_in">NSColor</span> clearColor];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_rectCorners) &#123;</span><br><span class="line">        <span class="built_in">NSBezierPath</span> *bezierPath;</span><br><span class="line">        <span class="keyword">if</span> (_rectCorners == FSRectCornerAllCorners) &#123;</span><br><span class="line">            bezierPath = [<span class="built_in">NSBezierPath</span> bezierPathWithRoundedRect:dirtyRect xRadius:_radius yRadius:_radius];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            bezierPath = [<span class="built_in">NSBezierPath</span> bezierPath];</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">CGFloat</span> topRightRadius = <span class="number">0.0</span>, topLeftRadius = <span class="number">0.0</span>, bottomLeftRadius = <span class="number">0.0</span>, bottomRightRadius = <span class="number">0.0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (_rectCorners &amp; FSRectCornerTopRight) &#123;</span><br><span class="line">                topRightRadius = _radius;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (_rectCorners &amp; FSRectCornerTopLeft) &#123;</span><br><span class="line">                topLeftRadius = _radius;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (_rectCorners &amp; FSRectCornerBottomLeft) &#123;</span><br><span class="line">                bottomLeftRadius = _radius;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (_rectCorners &amp; FSRectCornerBottomRight) &#123;</span><br><span class="line">                bottomRightRadius = _radius;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//右上</span></span><br><span class="line">            <span class="built_in">CGPoint</span> topRightPoint = <span class="built_in">CGPointMake</span>(dirtyRect.origin.x+dirtyRect.size.width, dirtyRect.origin.y+dirtyRect.size.height);</span><br><span class="line">            topRightPoint.x -= topRightRadius;</span><br><span class="line">            topRightPoint.y -= topRightRadius;</span><br><span class="line">            [bezierPath appendBezierPathWithArcWithCenter:topRightPoint radius:topRightRadius startAngle:<span class="number">0</span> endAngle:<span class="number">90</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//左上</span></span><br><span class="line">            <span class="built_in">CGPoint</span> topLeftPoint = <span class="built_in">CGPointMake</span>(dirtyRect.origin.x, dirtyRect.origin.y+dirtyRect.size.height);</span><br><span class="line">            topLeftPoint.x += topLeftRadius;</span><br><span class="line">            topLeftPoint.y -= topLeftRadius;</span><br><span class="line">            [bezierPath appendBezierPathWithArcWithCenter:topLeftPoint radius:topLeftRadius startAngle:<span class="number">90</span> endAngle:<span class="number">180</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//左下</span></span><br><span class="line">            <span class="built_in">CGPoint</span> bottomLeftPoint = dirtyRect.origin;</span><br><span class="line">            bottomLeftPoint.x += bottomLeftRadius;</span><br><span class="line">            bottomLeftPoint.y += bottomLeftRadius;</span><br><span class="line">            [bezierPath appendBezierPathWithArcWithCenter:bottomLeftPoint radius:bottomLeftRadius startAngle:<span class="number">180</span> endAngle:<span class="number">270</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//右下</span></span><br><span class="line">            <span class="built_in">CGPoint</span> bottomRightPoint = <span class="built_in">CGPointMake</span>(dirtyRect.origin.x+dirtyRect.size.width, dirtyRect.origin.y);</span><br><span class="line">            bottomRightPoint.x -= bottomRightRadius;</span><br><span class="line">            bottomRightPoint.y += bottomRightRadius;</span><br><span class="line">            [bezierPath appendBezierPathWithArcWithCenter:bottomRightPoint radius:bottomRightRadius startAngle:<span class="number">270</span> endAngle:<span class="number">360</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        [backgroundColor setFill];</span><br><span class="line">        [bezierPath fill];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        [backgroundColor setFill];</span><br><span class="line">        <span class="built_in">NSRectFill</span>(dirtyRect);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (title) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//绘制文字</span></span><br><span class="line">        <span class="built_in">NSMutableAttributedString</span> *attTitle = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:title];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSMutableParagraphStyle</span> *paragraphStyle = [[<span class="built_in">NSMutableParagraphStyle</span> alloc]init];</span><br><span class="line">        paragraphStyle.lineSpacing = <span class="number">1</span>;</span><br><span class="line">        paragraphStyle.lineBreakMode = <span class="built_in">NSLineBreakByWordWrapping</span>;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *attributes = @&#123;<span class="built_in">NSFontAttributeName</span>:font,</span><br><span class="line">                                     <span class="built_in">NSParagraphStyleAttributeName</span>:paragraphStyle,</span><br><span class="line">                                     <span class="built_in">NSForegroundColorAttributeName</span>:titleColor&#125;;</span><br><span class="line">        </span><br><span class="line">        [attTitle addAttributes:attributes range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, attTitle.length)];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.textUnderLineStyle == FSTextUnderLineStyleSingle) &#123;</span><br><span class="line">            <span class="built_in">NSUnderlineStyle</span> style = <span class="built_in">NSUnderlineStyleSingle</span>;</span><br><span class="line">            [attTitle addAttributes:@&#123;<span class="built_in">NSUnderlineStyleAttributeName</span>:@(style)&#125; range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, attTitle.length)];</span><br><span class="line">            [attTitle addAttributes:@&#123;<span class="built_in">NSUnderlineColorAttributeName</span>:titleColor&#125; range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, attTitle.length)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">self</span>.textUnderLineStyle == FSTextUnderLineStyleDouble) &#123;</span><br><span class="line">            <span class="built_in">NSUnderlineStyle</span> style = <span class="built_in">NSUnderlineStyleDouble</span>;</span><br><span class="line">            [attTitle addAttributes:@&#123;<span class="built_in">NSUnderlineStyleAttributeName</span>:@(style)&#125; range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, attTitle.length)];</span><br><span class="line">            [attTitle addAttributes:@&#123;<span class="built_in">NSUnderlineColorAttributeName</span>:titleColor&#125; range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, attTitle.length)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">self</span>.textUnderLineStyle == FSTextUnderLineStyleDeleteSingle) &#123;</span><br><span class="line">            [attTitle addAttributes:@&#123;<span class="built_in">NSStrikethroughStyleAttributeName</span>:@(<span class="built_in">NSUnderlinePatternSolid</span>|<span class="built_in">NSUnderlineStyleSingle</span>),</span><br><span class="line">                                      <span class="built_in">NSStrikethroughColorAttributeName</span>:titleColor&#125;</span><br><span class="line">                          range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, attTitle.length)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">self</span>.textUnderLineStyle == FSTextUnderLineStyleDeleteDouble) &#123;</span><br><span class="line">            [attTitle addAttributes:@&#123;<span class="built_in">NSStrikethroughStyleAttributeName</span>:@(<span class="built_in">NSUnderlinePatternSolid</span>|<span class="built_in">NSUnderlineStyleDouble</span>),</span><br><span class="line">                                      <span class="built_in">NSStrikethroughColorAttributeName</span>:titleColor&#125;</span><br><span class="line">                              range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, attTitle.length)];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">CGSize</span> titleSize = [attTitle.string boundingRectWithSize:<span class="built_in">CGSizeMake</span>(<span class="keyword">self</span>.bounds.size.width, <span class="built_in">CGFLOAT_MAX</span>) options:<span class="built_in">NSStringDrawingUsesLineFragmentOrigin</span> attributes:attributes context:<span class="literal">nil</span>].size;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">CGRect</span> titleRect;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.textAlignment == FSTextAlignmentLeft) &#123;</span><br><span class="line">            titleRect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>,</span><br><span class="line">                                   (<span class="keyword">self</span>.bounds.size.height-titleSize.height)/<span class="number">2.0</span>,</span><br><span class="line">                                   titleSize.width,</span><br><span class="line">                                   titleSize.height);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">self</span>.textAlignment == FSTextAlignmentCenter) &#123;</span><br><span class="line">            titleRect = <span class="built_in">CGRectMake</span>((<span class="keyword">self</span>.bounds.size.width-titleSize.width)/<span class="number">2.0</span>,</span><br><span class="line">                                   (<span class="keyword">self</span>.bounds.size.height-titleSize.height)/<span class="number">2.0</span>,</span><br><span class="line">                                   titleSize.width,</span><br><span class="line">                                   titleSize.height);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            titleRect = <span class="built_in">CGRectMake</span>((<span class="keyword">self</span>.bounds.size.width-titleSize.width),</span><br><span class="line">                                   (<span class="keyword">self</span>.bounds.size.height-titleSize.height)/<span class="number">2.0</span>,</span><br><span class="line">                                   titleSize.width,</span><br><span class="line">                                   titleSize.height);</span><br><span class="line">        &#125;</span><br><span class="line">        [attTitle drawInRect:titleRect];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeFromSuperview &#123;</span><br><span class="line">    <span class="keyword">if</span> (_trackingArea) &#123;</span><br><span class="line">        [<span class="keyword">self</span> removeTrackingArea:_trackingArea];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">super</span> removeFromSuperview];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    FSCustomBtn *btn = [[FSCustomBtn alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">60</span>)];</span><br><span class="line">    btn.isHandCursor = <span class="literal">YES</span>;</span><br><span class="line">    btn.target = <span class="keyword">self</span>;</span><br><span class="line">    btn.backgroundColor = <span class="built_in">NSColor</span>.whiteColor;</span><br><span class="line">    btn.selectedBackgroundColor = <span class="built_in">NSColor</span>.lightGrayColor;</span><br><span class="line">    btn.titleColor = <span class="built_in">NSColor</span>.redColor;</span><br><span class="line">    btn.selectedTitleColor = <span class="built_in">NSColor</span>.greenColor;</span><br><span class="line">    btn.textAlignment = FSTextAlignmentCenter;</span><br><span class="line">    btn.rectCorners = FSRectCornerTopLeft | FSRectCornerBottomRight;</span><br><span class="line">    btn.radius = <span class="number">20</span>;</span><br><span class="line">    [btn setAction:<span class="keyword">@selector</span>(btnClick:)];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:btn];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><a href="https://github.com/ForgetSou/FSToolBarDemo">FSToolbarDemo</a></p>
]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>macOS</tag>
        <tag>AppKit</tag>
      </tags>
  </entry>
  <entry>
    <title>日常开发小知识点收集</title>
    <url>/2020/11/12/%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h2 id="1-删除ToolBar下面的分割线"><a href="#1-删除ToolBar下面的分割线" class="headerlink" title="1.删除ToolBar下面的分割线"></a>1.删除ToolBar下面的分割线</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">toolbar.showsBaselineSeparator = <span class="literal">NO</span>;</span><br></pre></td></tr></table></figure>

<h2 id="2-修改TextField的蓝色或橙色边框"><a href="#2-修改TextField的蓝色或橙色边框" class="headerlink" title="2.修改TextField的蓝色或橙色边框"></a>2.修改TextField的蓝色或橙色边框</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">self</span>.textField.focusRingType = <span class="built_in">NSFocusRingTypeNone</span>;</span><br></pre></td></tr></table></figure>

<h2 id="3-打开已安装的其他软件"><a href="#3-打开已安装的其他软件" class="headerlink" title="3.打开已安装的其他软件"></a>3.打开已安装的其他软件</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="built_in">NSString</span> *appPath = <span class="string">@&quot;/Applications/Foxmail.app&quot;</span>;</span><br><span class="line">[[<span class="built_in">NSWorkspace</span> sharedWorkspace] openFile:appPath];</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">[[<span class="built_in">NSWorkspace</span> sharedWorkspace] launchApplication:<span class="string">@&quot;Foxmail&quot;</span>];</span><br></pre></td></tr></table></figure>

<h2 id="4-打开网页"><a href="#4-打开网页" class="headerlink" title="4.打开网页"></a>4.打开网页</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[[<span class="built_in">NSWorkspace</span> sharedWorkspace] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@&quot;https://www.baidu.com&quot;</span>]];</span><br></pre></td></tr></table></figure>

<h2 id="5-Color生成纯色图片（iOS）"><a href="#5-Color生成纯色图片（iOS）" class="headerlink" title="5.Color生成纯色图片（iOS）"></a>5.Color生成纯色图片（iOS）</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成纯色图片</span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)pureColorImageWithColor:(<span class="built_in">UIColor</span> *)color &#123;</span><br><span class="line">  <span class="built_in">CGSize</span> imageSize = <span class="built_in">CGSizeMake</span>(<span class="number">1.0</span>f, <span class="number">1.0</span>f);</span><br><span class="line">  <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(imageSize, <span class="literal">NO</span>, <span class="number">0.0</span>f);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">CGContextRef</span> theContext = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line">  <span class="built_in">CGContextSetFillColorWithColor</span>(theContext, color.CGColor);</span><br><span class="line">  <span class="built_in">CGContextFillRect</span>(theContext, <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>f, <span class="number">0.0</span>f, imageSize.width, imageSize.height));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">CGImageRef</span> theCGImage = <span class="built_in">CGBitmapContextCreateImage</span>(theContext);</span><br><span class="line">  <span class="built_in">UIImage</span> *theImage;</span><br><span class="line">  <span class="keyword">if</span> ([[<span class="built_in">UIImage</span> <span class="keyword">class</span>] respondsToSelector:<span class="keyword">@selector</span>(imageWithCGImage:scale:orientation:)]) &#123;</span><br><span class="line">      theImage = [<span class="built_in">UIImage</span> imageWithCGImage:theCGImage scale:[<span class="built_in">UIScreen</span> mainScreen].scale orientation:<span class="built_in">UIImageOrientationUp</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      theImage = [<span class="built_in">UIImage</span> imageWithCGImage:theCGImage];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">CGImageRelease</span>(theCGImage);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> theImage;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 生成纯色圆角图片</span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">UIImage</span> *)pureColorImageWithSize:(<span class="built_in">CGSize</span>)size</span><br><span class="line">      color:(<span class="built_in">UIColor</span> *)color</span><br><span class="line">  cornRadius:(<span class="built_in">CGFloat</span>)radius &#123;</span><br><span class="line">  <span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(size, <span class="literal">NO</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">CGContextRef</span> cxt = <span class="built_in">UIGraphicsGetCurrentContext</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">CGContextSetFillColorWithColor</span>(cxt, color.CGColor);</span><br><span class="line">  <span class="built_in">CGContextSetStrokeColorWithColor</span>(cxt, color.CGColor);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">CGContextMoveToPoint</span>(cxt, size.width, size.height-radius);</span><br><span class="line">  <span class="built_in">CGContextAddArcToPoint</span>(cxt, size.width, size.height, size.width-radius, size.height, radius);<span class="comment">//右下角</span></span><br><span class="line">  <span class="built_in">CGContextAddArcToPoint</span>(cxt, <span class="number">0</span>, size.height, <span class="number">0</span>, size.height-radius, radius);<span class="comment">//左下角</span></span><br><span class="line">  <span class="built_in">CGContextAddArcToPoint</span>(cxt, <span class="number">0</span>, <span class="number">0</span>, radius, <span class="number">0</span>, radius);<span class="comment">//左上角</span></span><br><span class="line">  <span class="built_in">CGContextAddArcToPoint</span>(cxt, size.width, <span class="number">0</span>, size.width, radius, radius);<span class="comment">//右上角</span></span><br><span class="line">  <span class="built_in">CGContextClosePath</span>(cxt);</span><br><span class="line">  <span class="built_in">CGContextDrawPath</span>(cxt, kCGPathFillStroke);</span><br><span class="line">  <span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">  <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">  <span class="keyword">return</span> image;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-时间格式转换"><a href="#6-时间格式转换" class="headerlink" title="6.时间格式转换"></a>6.时间格式转换</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 根据格式生成时间字符串</span></span><br><span class="line"><span class="comment">/// @param date 时间NSDate</span></span><br><span class="line"><span class="comment">/// @param formatStr 时间格式 eg:&quot;YYYY-MM-dd HH:mm:ss&quot;</span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSString</span> *)stringFromDate:(<span class="built_in">NSDate</span> *)date formatStr:(<span class="built_in">NSString</span> *)formatStr &#123;</span><br><span class="line">  <span class="built_in">NSDateFormatter</span> *formatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">  [formatter setDateFormat:formatStr];</span><br><span class="line">  <span class="keyword">return</span> [formatter stringFromDate:date];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/// 根据格式生成NSDate</span></span><br><span class="line">  <span class="comment">/// @param dateString 时间</span></span><br><span class="line">  <span class="comment">/// @param formatStr 时间格式 eg:&quot;YYYY-MM-dd HH:mm:ss&quot;</span></span><br><span class="line">+ (<span class="built_in">NSDate</span> *)dateFromString:(<span class="built_in">NSString</span> *)dateString formatStr:(<span class="built_in">NSString</span> *)formatStr &#123;</span><br><span class="line">  <span class="built_in">NSDateFormatter</span> *formatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">  [formatter setDateFormat:formatStr];</span><br><span class="line">  <span class="keyword">return</span> [formatter dateFromString:dateString];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/// 获取当前时间戳(秒)</span></span><br><span class="line">+ (<span class="built_in">NSNumber</span> *)getCurrentTimeStampSec &#123;</span><br><span class="line">  <span class="built_in">NSDate</span> *date = [<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">NSTimeInterval</span> timeInterval = [date timeIntervalSince1970];</span><br><span class="line">  <span class="built_in">NSNumber</span> *u = [<span class="built_in">NSNumber</span> numberWithInteger:timeInterval];</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/// 获取当前时间戳(毫秒)</span></span><br><span class="line">+ (<span class="built_in">NSNumber</span> *)getCurrentTimeStampMilliSec &#123;</span><br><span class="line">  <span class="built_in">NSDate</span> *date = [<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> timeInterval = [date timeIntervalSince1970] * <span class="number">1000</span>;</span><br><span class="line">  <span class="built_in">NSNumber</span> *u = [<span class="built_in">NSNumber</span> numberWithLongLong:timeInterval];</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-合法性"><a href="#7-合法性" class="headerlink" title="7.合法性"></a>7.合法性</h2><ul>
<li>手机号是否合法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)isValidMobile:(<span class="built_in">NSString</span> *)mobile &#123;</span><br><span class="line">    <span class="built_in">BOOL</span> isValid = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!kStringIsEmpty(mobile) &amp;&amp; mobile.length == <span class="number">11</span>) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *<span class="built_in">CM_NUM</span> = <span class="string">@&quot;^((13[0-9])|(14[5-9])|(15([0-3]|[5-9]))|(16[6-7])|(17[1-8])|(18[0-9])|(19[1|3])|(19[5|6])|(19[8|9]))\\d&#123;8&#125;$&quot;</span>;</span><br><span class="line">        <span class="built_in">NSPredicate</span> *pred = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;SELF MATCHES %@&quot;</span>, <span class="built_in">CM_NUM</span>];</span><br><span class="line">        <span class="built_in">BOOL</span> isMatch = [pred evaluateWithObject:mobile];</span><br><span class="line">        <span class="keyword">if</span> (isMatch) &#123;</span><br><span class="line">            isValid = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isValid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Url是否合法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)isValidUrl:(<span class="built_in">NSString</span> *)urlStr &#123;</span><br><span class="line">  <span class="built_in">NSString</span> *regex =<span class="string">@&quot;[a-zA-z]+://[^\\s]*&quot;</span>;</span><br><span class="line">  <span class="built_in">NSPredicate</span> *urlTest = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;SELF MATCHES %@&quot;</span>,regex];</span><br><span class="line">  <span class="keyword">return</span> [urlTest evaluateWithObject:urlStr];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>银行卡是否合法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)isValidCardNo:(<span class="built_in">NSString</span> *)cardNumber &#123;</span><br><span class="line">	<span class="keyword">int</span> oddSum = <span class="number">0</span>;    <span class="comment">// 奇数和</span></span><br><span class="line">	<span class="keyword">int</span> evenSum = <span class="number">0</span>;    <span class="comment">// 偶数和</span></span><br><span class="line">	<span class="keyword">int</span> allSum =<span class="number">0</span>;    <span class="comment">// 总和</span></span><br><span class="line">    <span class="comment">// 循环加和</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">NSInteger</span> i = <span class="number">1</span>; i &lt;= cardNumber.length; i++) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *theNumber = [cardNumber substringWithRange:<span class="built_in">NSMakeRange</span>(cardNumber.length-i,<span class="number">1</span>)];</span><br><span class="line">        <span class="keyword">int</span> lastNumber = [theNumber intValue];</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 偶数位</span></span><br><span class="line">            lastNumber *=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(lastNumber &gt;<span class="number">9</span>) &#123;</span><br><span class="line">                lastNumber -=<span class="number">9</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            evenSum += lastNumber;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 奇数位</span></span><br><span class="line">            oddSum += lastNumber;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    allSum = oddSum + evenSum;</span><br><span class="line">    <span class="comment">// 是否合法</span></span><br><span class="line">    <span class="keyword">if</span>(allSum%<span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>判断邮箱是否合法<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)isValidEmail:(<span class="built_in">NSString</span> *)email &#123;</span><br><span class="line">    <span class="keyword">if</span> ([CCUtility checkEmptyString:email]) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *emailRegex = <span class="string">@&quot;^(([a-zA-Z0-9_-]+)|([a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)))@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$&quot;</span>;</span><br><span class="line">    <span class="built_in">NSPredicate</span> *emailTest = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;SELF MATCHES %@&quot;</span>, emailRegex];</span><br><span class="line">    <span class="keyword">return</span> [emailTest evaluateWithObject:email];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)isValidUrl:(<span class="built_in">NSString</span> *)urlStr &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *regex =<span class="string">@&quot;[a-zA-z]+://[^\\s]*&quot;</span>;</span><br><span class="line">    <span class="built_in">NSPredicate</span> *urlTest = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@&quot;SELF MATCHES %@&quot;</span>,regex];</span><br><span class="line">    <span class="keyword">return</span> [urlTest evaluateWithObject:urlStr];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>判断身份证(中国大陆)身份证是否合法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)isValidIDCardNo:(<span class="built_in">NSString</span> *)value &#123;</span><br><span class="line">value = [value stringByTrimmingCharactersInSet:[<span class="built_in">NSCharacterSet</span> whitespaceAndNewlineCharacterSet]];</span><br><span class="line"><span class="built_in">NSInteger</span> length =<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    length = value.length;</span><br><span class="line">    <span class="comment">//不满足15位和18位，即身份证错误</span></span><br><span class="line">    <span class="keyword">if</span> (length !=<span class="number">15</span> &amp;&amp; length !=<span class="number">18</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省份代码</span></span><br><span class="line"><span class="built_in">NSArray</span> *areasArray = @[<span class="string">@&quot;11&quot;</span>,<span class="string">@&quot;12&quot;</span>, <span class="string">@&quot;13&quot;</span>,<span class="string">@&quot;14&quot;</span>, <span class="string">@&quot;15&quot;</span>,<span class="string">@&quot;21&quot;</span>, <span class="string">@&quot;22&quot;</span>,<span class="string">@&quot;23&quot;</span>, <span class="string">@&quot;31&quot;</span>,<span class="string">@&quot;32&quot;</span>, <span class="string">@&quot;33&quot;</span>,<span class="string">@&quot;34&quot;</span>, <span class="string">@&quot;35&quot;</span>,<span class="string">@&quot;36&quot;</span>, <span class="string">@&quot;37&quot;</span>,<span class="string">@&quot;41&quot;</span>, <span class="string">@&quot;42&quot;</span>,<span class="string">@&quot;43&quot;</span>, <span class="string">@&quot;44&quot;</span>,<span class="string">@&quot;45&quot;</span>, <span class="string">@&quot;46&quot;</span>,<span class="string">@&quot;50&quot;</span>, <span class="string">@&quot;51&quot;</span>,<span class="string">@&quot;52&quot;</span>, <span class="string">@&quot;53&quot;</span>,<span class="string">@&quot;54&quot;</span>, <span class="string">@&quot;61&quot;</span>,<span class="string">@&quot;62&quot;</span>, <span class="string">@&quot;63&quot;</span>,<span class="string">@&quot;64&quot;</span>, <span class="string">@&quot;65&quot;</span>,<span class="string">@&quot;71&quot;</span>, <span class="string">@&quot;81&quot;</span>,<span class="string">@&quot;82&quot;</span>, <span class="string">@&quot;91&quot;</span>];</span><br><span class="line"><span class="comment">// 检测省份身份行政区代码</span></span><br><span class="line"><span class="built_in">NSString</span> *valueStart2 = [value substringToIndex:<span class="number">2</span>];</span><br><span class="line"><span class="built_in">BOOL</span> areaFlag =<span class="literal">NO</span>; <span class="comment">//标识省份代码是否正确</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSString</span> *areaCode <span class="keyword">in</span> areasArray) &#123;</span><br><span class="line">    <span class="keyword">if</span> ([areaCode isEqualToString:valueStart2]) &#123;</span><br><span class="line">        areaFlag =<span class="literal">YES</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!areaFlag) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSRegularExpression</span> *regularExpression;</span><br><span class="line"><span class="built_in">NSUInteger</span> numberofMatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> year =<span class="number">0</span>;</span><br><span class="line"><span class="comment">//分为15位、18位身份证进行校验</span></span><br><span class="line"><span class="keyword">switch</span> (length) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">        <span class="comment">//获取年份对应的数字</span></span><br><span class="line">        year = [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">6</span>,<span class="number">2</span>)].intValue +<span class="number">1900</span>;</span><br><span class="line">    <span class="keyword">if</span> (year %<span class="number">4</span> ==<span class="number">0</span> || (year %<span class="number">100</span> ==<span class="number">0</span> &amp;&amp; year %<span class="number">4</span> ==<span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="comment">//创建正则表达式 NSRegularExpressionCaseInsensitive：不区分字母大小写的模式</span></span><br><span class="line">        regularExpression = [[<span class="built_in">NSRegularExpression</span> alloc]initWithPattern:<span class="string">@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;$&quot;</span> options:<span class="built_in">NSRegularExpressionCaseInsensitive</span> error:<span class="literal">nil</span>];<span class="comment">//测试出生日期的合法性</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        regularExpression = [[<span class="built_in">NSRegularExpression</span> alloc]initWithPattern:<span class="string">@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;$&quot;</span> options:<span class="built_in">NSRegularExpressionCaseInsensitive</span> error:<span class="literal">nil</span>];<span class="comment">//测试出生日期的合法性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用正则表达式匹配字符串 NSMatchingReportProgress:找到最长的匹配字符串后调用block回调</span></span><br><span class="line">    numberofMatch = [regularExpression numberOfMatchesInString:value options:<span class="built_in">NSMatchingReportProgress</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, value.length)];</span><br><span class="line">    <span class="keyword">if</span>(numberofMatch &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">    year = [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">6</span>,<span class="number">4</span>)].intValue;</span><br><span class="line">    <span class="keyword">if</span> (year %<span class="number">4</span> ==<span class="number">0</span> || (year %<span class="number">100</span> ==<span class="number">0</span> &amp;&amp; year %<span class="number">4</span> ==<span class="number">0</span>)) &#123;</span><br><span class="line">        regularExpression = [[<span class="built_in">NSRegularExpression</span> alloc]initWithPattern:<span class="string">@&quot;^((1[1-5])|(2[1-3])|(3[1-7])|(4[1-6])|(5[0-4])|(6[1-5])|71|(8[12])|91)\\d&#123;4&#125;(((19|20)\\d&#123;2&#125;(0[13-9]|1[012])(0[1-9]|[12]\\d|30))|((19|20)\\d&#123;2&#125;(0[13578]|1[02])31)|((19|20)\\d&#123;2&#125;02(0[1-9]|1\\d|2[0-8]))|((19|20)([13579][26]|[2468][048]|0[048])0229))\\d&#123;3&#125;(\\d|X|x)?$&quot;</span> options:<span class="built_in">NSRegularExpressionCaseInsensitive</span> error:<span class="literal">nil</span>];<span class="comment">//测试出生日期的合法性</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        regularExpression = [[<span class="built_in">NSRegularExpression</span> alloc]initWithPattern:<span class="string">@&quot;^((1[1-5])|(2[1-3])|(3[1-7])|(4[1-6])|(5[0-4])|(6[1-5])|71|(8[12])|91)\\d&#123;4&#125;(((19|20)\\d&#123;2&#125;(0[13-9]|1[012])(0[1-9]|[12]\\d|30))|((19|20)\\d&#123;2&#125;(0[13578]|1[02])31)|((19|20)\\d&#123;2&#125;02(0[1-9]|1\\d|2[0-8]))|((19|20)([13579][26]|[2468][048]|0[048])0229))\\d&#123;3&#125;(\\d|X|x)?$&quot;</span> options:<span class="built_in">NSRegularExpressionCaseInsensitive</span> error:<span class="literal">nil</span>];<span class="comment">//测试出生日期的合法性</span></span><br><span class="line">    &#125;</span><br><span class="line">    numberofMatch = [regularExpression numberOfMatchesInString:value options:<span class="built_in">NSMatchingReportProgress</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, value.length)];</span><br><span class="line">    <span class="keyword">if</span>(numberofMatch &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//1：校验码的计算方法 身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分别为：7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。将这17位数字和系数相乘的结果相加。</span></span><br><span class="line">        <span class="keyword">int</span> S = [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>,<span class="number">1</span>)].intValue*<span class="number">7</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">10</span>,<span class="number">1</span>)].intValue *<span class="number">7</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">1</span>,<span class="number">1</span>)].intValue*<span class="number">9</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">11</span>,<span class="number">1</span>)].intValue *<span class="number">9</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">2</span>,<span class="number">1</span>)].intValue*<span class="number">10</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">12</span>,<span class="number">1</span>)].intValue *<span class="number">10</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">3</span>,<span class="number">1</span>)].intValue*<span class="number">5</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">13</span>,<span class="number">1</span>)].intValue *<span class="number">5</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">4</span>,<span class="number">1</span>)].intValue*<span class="number">8</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">14</span>,<span class="number">1</span>)].intValue *<span class="number">8</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">5</span>,<span class="number">1</span>)].intValue*<span class="number">4</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">15</span>,<span class="number">1</span>)].intValue *<span class="number">4</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">6</span>,<span class="number">1</span>)].intValue*<span class="number">2</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">16</span>,<span class="number">1</span>)].intValue *<span class="number">2</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">7</span>,<span class="number">1</span>)].intValue *<span class="number">1</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">8</span>,<span class="number">1</span>)].intValue *<span class="number">6</span> + [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">9</span>,<span class="number">1</span>)].intValue *<span class="number">3</span>;</span><br><span class="line">        <span class="comment">//2：用加出来和除以11，看余数是多少？余数只可能有0－1－2－3－4－5－6－7－8－9－10这11个数字</span></span><br><span class="line">        <span class="keyword">int</span> Y = S %<span class="number">11</span>;</span><br><span class="line">        <span class="built_in">NSString</span> *M =<span class="string">@&quot;F&quot;</span>;</span><br><span class="line">        <span class="built_in">NSString</span> *JYM =<span class="string">@&quot;10X98765432&quot;</span>;</span><br><span class="line">        M = [JYM substringWithRange:<span class="built_in">NSMakeRange</span>(Y,<span class="number">1</span>)];<span class="comment">// 3：获取校验位</span></span><br><span class="line">        <span class="built_in">NSString</span> *lastStr = [value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">17</span>,<span class="number">1</span>)];</span><br><span class="line">        <span class="comment">//4：检测ID的校验位</span></span><br><span class="line">        <span class="keyword">if</span> ([lastStr isEqualToString:<span class="string">@&quot;x&quot;</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([M isEqualToString:<span class="string">@&quot;X&quot;</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ([M isEqualToString:[value substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">17</span>,<span class="number">1</span>)]]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="8-强弱引用"><a href="#8-强弱引用" class="headerlink" title="8.强弱引用"></a>8.强弱引用</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 推荐使用（摘自YYKit）</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Synthsize a weak or strong reference.</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> Example:</span></span><br><span class="line"><span class="comment"> @weakify(self)</span></span><br><span class="line"><span class="comment"> [self doSomething^&#123;</span></span><br><span class="line"><span class="comment"> @strongify(self)</span></span><br><span class="line"><span class="comment"> if (!self) return;</span></span><br><span class="line"><span class="comment"> ...</span></span><br><span class="line"><span class="comment"> &#125;];</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> weakify</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __has_feature(objc_arc)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> weakify(object) autoreleasepool&#123;&#125; __weak __typeof__(object) weak##_##object = object;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> weakify(object) autoreleasepool&#123;&#125; __block __typeof__(object) block##_##object = object;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __has_feature(objc_arc)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> weakify(object) try&#123;&#125; @finally&#123;&#125; &#123;&#125; __weak __typeof__(object) weak##_##object = object;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> weakify(object) try&#123;&#125; @finally&#123;&#125; &#123;&#125; __block __typeof__(object) block##_##object = object;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> strongify</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __has_feature(objc_arc)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> strongify(object) autoreleasepool&#123;&#125; __typeof__(object) object = weak##_##object;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> strongify(object) autoreleasepool&#123;&#125; __typeof__(object) object = block##_##object;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __has_feature(objc_arc)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> strongify(object) try&#123;&#125; @finally&#123;&#125; __typeof__(object) object = weak##_##object;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> strongify(object) try&#123;&#125; @finally&#123;&#125; __typeof__(object) object = block##_##object;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>



<h2 id="9-NSLog的宏定义"><a href="#9-NSLog的宏定义" class="headerlink" title="9.NSLog的宏定义"></a>9.NSLog的宏定义</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NSLog(format,...) printf(<span class="meta-string">&quot;\n[%s] %s [第%d行] %s\n&quot;</span>,__TIME__,__FUNCTION__,__LINE__,[[NSString stringWithFormat:format,## __VA_ARGS__] UTF8String]);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NSLog(format, ...)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>



<h2 id="10-判断是否为空"><a href="#10-判断是否为空" class="headerlink" title="10.判断是否为空"></a>10.判断是否为空</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kStringIsEmpty(string)              (string == NULL || [string isKindOfClass:[NSNull class]] || string == nil || [string length] &lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kArrayIsEmpty(array)                (array == nil || [array isKindOfClass:[NSNull class]] || array.count == 0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kDictionaryIsEmpty(dictionary)      (dictionary == nil || [dictionary isKindOfClass:[NSNull class]] || dictionary.allKeys.count == 0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kObjectIsEmpty(object)              (object == nil||[object isKindOfClass:[NSNull class]]||([object respondsToSelector:@selector(length)] &amp;&amp; [(NSData *)object length] == 0)|| ([object respondsToSelector:@selector(count)] &amp;&amp; [(NSArray *)object count] == 0))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="11-使用xib创建自定义View并在背景添加点击事件"><a href="#11-使用xib创建自定义View并在背景添加点击事件" class="headerlink" title="11.使用xib创建自定义View并在背景添加点击事件"></a>11.使用<code>xib</code>创建自定义View并在背景添加点击事件</h2><p><strong>说明：</strong><br><code>xib</code>创建的自定义视图，添加的背景点击动作不会触发点击事件，因此需要单独添加一个<code>xibView</code>，添加到自定义视图上，点击动作添加到<code>xibView</code>上就可以触发点击事件了，具体步骤如下：</p>
<ul>
<li>创建自定义<code>FSCommonView</code>、创建<code>FSCommonView.xib</code>、关联到自定义的<code>FSCommonView</code>。<br><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glbkbvf4xaj30740bcdgc.jpg" alt="关联自定义视图"></li>
<li>将xib添加到<code>FSCommonView</code>中<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FSCommonView</span> : <span class="title">UIView</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;FSCommonView.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FSCommonView</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIView</span> *xibView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.xibView = [<span class="keyword">self</span> loadViewFromNib];</span><br><span class="line">        [<span class="keyword">self</span> settingUI];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)coder &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithCoder:coder];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.xibView = [<span class="keyword">self</span> loadViewFromNib];</span><br><span class="line">        [<span class="keyword">self</span> settingUI];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIView</span> *)loadViewFromNib &#123;</span><br><span class="line">    <span class="built_in">UIView</span> *xibView = [[<span class="built_in">NSBundle</span> mainBundle] loadNibNamed:<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]) owner:<span class="keyword">self</span> options:<span class="literal">nil</span>].firstObject;</span><br><span class="line">    xibView.frame = <span class="keyword">self</span>.bounds;</span><br><span class="line">    [xibView addGestureRecognizer:[[<span class="built_in">UITapGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(xibBgViewClick)]];</span><br><span class="line">    [<span class="keyword">self</span> addSubview:xibView];</span><br><span class="line">    <span class="keyword">return</span> xibView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)settingUI &#123;</span><br><span class="line">  <span class="comment">// 设置背景色、圆角、边框、自定义子视图等。</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)xibBgViewClick &#123;</span><br><span class="line">  <span class="comment">// 背景点击事件</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="12-啄幕鸟"><a href="#12-啄幕鸟" class="headerlink" title="12.啄幕鸟"></a>12.啄幕鸟</h2></li>
</ul>
<blockquote>
<p>啄幕鸟，阿里开源项目，即手机屏幕上的啄木鸟，专抓App里的Bug。啄幕鸟集合了UI检查、对象查看、方法监听等多种开发工具，通过拾取UI控件、查看对象属性、监听方法调用、App内抓包等，不依赖电脑联调，直接获取运行时数据，快速定位Bug，提高开发效率。</p>
</blockquote>
<p><strong>功能简介</strong></p>
<blockquote>
<ol>
<li>UI检查：快速查看页面布局、UI控件间距、字体颜色、UI控件类名、对象属性/成员变量、图片URL等。</li>
<li>JSON抓包：便捷JSON抓包工具，通过监听系统json解析抓包。</li>
<li>方法监听：Bug听诊器，可监听App中任意OC方法的调用，输出调用参数、返回值等信息，可以通过屏幕日志输入监听、KVC取值等命令，支持后台配置命令。</li>
<li>po命令：执行类似LLDB的po命令，在App运行时执行po命令，调用任意方法。</li>
<li>系统信息：查看各种系统名称、版本、屏幕、UA等信息，支持外部添加信息。</li>
<li>SandBox：查看沙盒文件，导出文件等。</li>
<li>Bundle：查看、导出Bundle目录中的内容。</li>
<li>Crash：查看Crash日志，需先打开一次Crash插件以开启Crash监控。</li>
<li>Defaults：查看、新增、删除User Defaults。</li>
<li>清除数据：清除所有沙盒数据、User Default。</li>
<li>触点显示：显示手指触控。</li>
<li>UI对比：支持将设计图导入到App中进行对比，并可画线、标注需修改的地方，方便UI走查。</li>
<li>查看图片资源：查看、导出App中的资源图片。</li>
<li>CPU：查看CPU占用。</li>
<li>内存：查看内存占用。</li>
<li>FPS：查看App帧率。</li>
<li>网络流量：查看发送、接收网络流量。</li>
</ol>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pod</span> <span class="string">&#x27;YKWoodpecker&#x27;</span></span><br></pre></td></tr></table></figure>
<p>官方github地址：<a href="https://github.com/alibaba/youku-sdk-tool-woodpecker.git">YKWoodpecker</a></p>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1glbk60pl6aj30u01hc47q.jpg" alt="啄幕鸟"></p>
<p><strong>使用</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 显示啄幕鸟，启动默认打开UI检查插件</span></span><br><span class="line">[[YKWoodpeckerManager sharedInstance] show];</span><br></pre></td></tr></table></figure>
<h2 id="13-ViewController的生命周期、执行顺序"><a href="#13-ViewController的生命周期、执行顺序" class="headerlink" title="13.ViewController的生命周期、执行顺序"></a>13.ViewController的生命周期、执行顺序</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> initWithCoder：通过nib文件初始化时触发。</span><br><span class="line"><span class="number">2.</span> awakeFromNib：nib文件被加载的时候，会发生一个awakeFromNib的消息到nib文件中的每个对象。      </span><br><span class="line"><span class="number">3.</span> loadView：开始加载视图控制器自带的view。</span><br><span class="line"><span class="number">4.</span> viewDidLoad：视图控制器的view被加载完成。  </span><br><span class="line"><span class="number">5.</span> viewWillAppear：视图控制器的view将要显示在window上。</span><br><span class="line"><span class="number">6.</span> updateViewConstraints：视图控制器的view开始更新AutoLayout约束。</span><br><span class="line"><span class="number">7.</span> viewWillLayoutSubviews：视图控制器的view将要更新内容视图的位置。</span><br><span class="line"><span class="number">8.</span> viewDidLayoutSubviews：视图控制器的view已经更新视图的位置。</span><br><span class="line"><span class="number">9.</span> viewDidAppear：视图控制器的view已经展示到window上。 </span><br><span class="line"><span class="number">10.</span> viewWillDisappear：视图控制器的view将要从window上消失。</span><br><span class="line"><span class="number">11.</span> viewDidDisappear：视图控制器的view已经从window上消失。</span><br></pre></td></tr></table></figure>

<h2 id="14-去除Cocopods第三方库部分警告和MobileCoreServices-framework过期的问题"><a href="#14-去除Cocopods第三方库部分警告和MobileCoreServices-framework过期的问题" class="headerlink" title="14. 去除Cocopods第三方库部分警告和MobileCoreServices.framework过期的问题"></a>14. 去除<code>Cocopods</code>第三方库部分警告和<code>MobileCoreServices.framework</code>过期的问题</h2><p>在<code>Podfile</code>的末尾处添加如下代码，再 <code>pod install</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">post_install <span class="keyword">do</span> <span class="operator">|</span>pi<span class="operator">|</span></span><br><span class="line">    # 去除<span class="type">Pods版本警告</span></span><br><span class="line">    pi.pods_project.targets.each <span class="keyword">do</span> <span class="operator">|</span>t<span class="operator">|</span></span><br><span class="line">      t.build_configurations.each <span class="keyword">do</span> <span class="operator">|</span>config<span class="operator">|</span></span><br><span class="line">        config.build_settings[&#x27;<span class="type">IPHONEOS_DEPLOYMENT_TARGET</span>&#x27;] <span class="operator">=</span> &#x27;<span class="number">9.0</span>&#x27;</span><br><span class="line">      end</span><br><span class="line">    end</span><br><span class="line">    # 替换<span class="type">Pods引用的不再使用的静态库MobileCoreServices</span>.framework</span><br><span class="line">    framework <span class="operator">=</span> pi.pods_project.frameworks_group[<span class="string">&quot;iOS&quot;</span>][<span class="string">&quot;MobileCoreServices.framework&quot;</span>]</span><br><span class="line">    framework.referrers.each <span class="keyword">do</span> <span class="operator">|</span>ref<span class="operator">|</span></span><br><span class="line">        <span class="keyword">if</span> ref.isa <span class="operator">==</span> <span class="string">&quot;PBXBuildFile&quot;</span></span><br><span class="line">            ref.remove_from_project</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    framework.remove_from_project</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h2 id="15-解决NSTimer循环引用的问题"><a href="#15-解决NSTimer循环引用的问题" class="headerlink" title="15. 解决NSTimer循环引用的问题"></a>15. 解决<code>NSTimer</code>循环引用的问题</h2><p>解决方法如下：</p>
<ol>
<li><p>方式一</p>
<ul>
<li>timer改为弱引用</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSTimer</span> *timer;</span><br></pre></td></tr></table></figure>

<ul>
<li>在适当的时机销毁timer</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>) viewWillDisappear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillDisappear:animated];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.timer) &#123;</span><br><span class="line">        [<span class="keyword">self</span>.timer invalidate];</span><br><span class="line">        <span class="keyword">self</span>.timer = <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>如果控制器<code>push</code>到下个控制器，<code>viewDidDisappear</code>执行后，timer被销毁，下次进入APP的时候还要重新创建</em></p>
<ul>
<li>在<code>viewWillAppear</code>开启定时器</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">-(<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.timer) &#123;</span><br><span class="line">        <span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(showMsg) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式二</p>
<p>为<code>self</code>添加<code>proxy</code></p>
</li>
</ol>
<ol start="3">
<li>方式三</li>
</ol>
<h2 id="16-lldb（gdb）常用的控制台调试命令？"><a href="#16-lldb（gdb）常用的控制台调试命令？" class="headerlink" title="16. lldb（gdb）常用的控制台调试命令？"></a>16. lldb（gdb）常用的控制台调试命令？</h2><blockquote>
<ol>
<li>p 输出基本类型。是打印命令，需要指定类型。是print的简写<pre><code>p (int)[[[self view] subviews] count]</code></pre>
</li>
<li>po 打印对象，会调用对象description方法。是print-object的简写<pre><code>po [self view]</code></pre>
</li>
<li>expr 可以在调试时动态执行指定表达式，并将结果打印出来。常用于在调试过程中修改变量的值。</li>
<li>bt：打印调用堆栈，是thread backtrace的简写，加all可打印所有thread的堆栈</li>
<li>br l：是breakpoint list的简写</li>
</ol>
</blockquote>
<h2 id="17-iOS的沙盒目录结构"><a href="#17-iOS的沙盒目录结构" class="headerlink" title="17. iOS的沙盒目录结构"></a>17. iOS的沙盒目录结构</h2><blockquote>
<p>1). Application：存放程序源文件，上架前经过数字签名，上架后不可修改。<br>2). Documents：常用目录，iCloud备份目录，存放数据。（这里不能存缓存文件，否则上架不被通过）<br>3). Library：<br>     Caches：存放体积大又不需要备份的数据。(常用的缓存路径)<br>     Preference：设置目录，iCloud会备份设置信息。<br>4). tmp：存放临时文件，不会被备份，而且这个文件下的数据有可能随时被清除的可能。</p>
</blockquote>
<h2 id="18-安装包优化"><a href="#18-安装包优化" class="headerlink" title="18. 安装包优化"></a>18. 安装包优化</h2><h3 id="1-1-安装包的构成"><a href="#1-1-安装包的构成" class="headerlink" title="1.1 安装包的构成"></a>1.1 安装包的构成</h3><p>包含资源和可执行文件 Mach-o 两部分，其中资源包括 Assets.car 文件和其他资源</p>
<h4 id="1-1-1-Mach-o"><a href="#1-1-1-Mach-o" class="headerlink" title="1.1.1 Mach-o"></a>1.1.1 Mach-o</h4><p>Mach-o是iOS上的可执行文件，是由代码源文件经过编译和静态链接获取的。经过App Slicing之后的Mach-o文件往往只包含单个架构。</p>
<h4 id="1-1-2-Assets-car"><a href="#1-1-2-Assets-car" class="headerlink" title="1.1.2 Assets.car"></a>1.1.2 Assets.car</h4><p>Assets.car 是Asset catalog 的构建产物。Xcode中的actool负责构建Assets.car 。在构建Assets.car的过程中actool会按照一定的策略编码算法，对png图片进行编码。</p>
<h3 id="1-2-资源大小优化"><a href="#1-2-资源大小优化" class="headerlink" title="1.2 资源大小优化"></a>1.2 资源大小优化</h3><h4 id="1-2-1-使用合适的资源压缩配置"><a href="#1-2-1-使用合适的资源压缩配置" class="headerlink" title="1.2.1 使用合适的资源压缩配置"></a>1.2.1 使用合适的资源压缩配置</h4><h4 id="1-2-2-使用-RGB-with-palette-压缩图片"><a href="#1-2-2-使用-RGB-with-palette-压缩图片" class="headerlink" title="1.2.2 使用 RGB with palette 压缩图片"></a>1.2.2 使用 RGB with palette 压缩图片</h4><h2 id="19-UITableView键盘隐藏的问题"><a href="#19-UITableView键盘隐藏的问题" class="headerlink" title="19. UITableView键盘隐藏的问题"></a>19. UITableView键盘隐藏的问题</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UITableView</span> *tableView;</span><br><span class="line">- (<span class="built_in">UITableView</span> *)tableView &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_tableView) &#123;</span><br><span class="line">        _tableView = [[<span class="built_in">UITableView</span> alloc] init];</span><br><span class="line">      	<span class="comment">// 控制键盘隐藏</span></span><br><span class="line">        <span class="built_in">UITableViewController</span> *tvc = [[<span class="built_in">UITableViewController</span> alloc] initWithStyle:<span class="built_in">UITableViewStyleGrouped</span>];</span><br><span class="line">        [<span class="keyword">self</span> addChildViewController:tvc];</span><br><span class="line">        _tableView = tvc.tableView;</span><br><span class="line">      </span><br><span class="line">        _tableView.delegate = <span class="keyword">self</span>;</span><br><span class="line">        _tableView.dataSource = <span class="keyword">self</span>;</span><br><span class="line">      	<span class="comment">// 隐藏键盘</span></span><br><span class="line">        _tableView.separatorStyle = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _tableView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="20-数组去重"><a href="#20-数组去重" class="headerlink" title="20. 数组去重"></a>20. 数组去重</h2><ul>
<li><p>NSOrderedSet去重</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (NSArray *)removeDuplicateArr:(NSArray *)arr &#123;</span><br><span class="line">    NSOrderedSet *orderSet = [NSOrderedSet orderedSetWithArray:arr];</span><br><span class="line">    return orderSet.array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ValueForKeyPath去重</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSArray</span> *)removeDuplicateArr:(<span class="built_in">NSArray</span> *)arr &#123;</span><br><span class="line">    arr = [arr valueForKeyPath:<span class="string">@&quot;@distinctUnionOfObjects.self&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>其他</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSArray</span> *)removeDuplicateArr3:(<span class="built_in">NSArray</span> *)arr &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *mArr = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:arr.count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *str <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (![mArr containsObject:str]) &#123;</span><br><span class="line">            [mArr addObject:str];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span> *)removeDuplicateArr4:(<span class="built_in">NSArray</span> *)arr &#123;</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *mDict = [<span class="built_in">NSMutableDictionary</span> dictionaryWithCapacity:<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *str <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        [mDict setObject:str forKey:str];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mDict.allKeys;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span> *)removeDuplicateArr5:(<span class="built_in">NSArray</span> *)arr &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *mArr = [<span class="built_in">NSMutableArray</span> arrayWithArray:arr];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *str <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([mArr containsObject:str]) &#123;</span><br><span class="line">            [mArr removeObject:str];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="21-iOS-判断平面上一个点是否在不规则的封闭区域内"><a href="#21-iOS-判断平面上一个点是否在不规则的封闭区域内" class="headerlink" title="21. iOS 判断平面上一个点是否在不规则的封闭区域内"></a>21. iOS 判断平面上一个点是否在不规则的封闭区域内</h2><h3 id="1-在二维空间创建不规则封闭区域"><a href="#1-在二维空间创建不规则封闭区域" class="headerlink" title="1. 在二维空间创建不规则封闭区域"></a>1. 在二维空间创建不规则封闭区域</h3><h4 id="1-1-路径绘图"><a href="#1-1-路径绘图" class="headerlink" title="1.1 路径绘图"></a>1.1 路径绘图</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGMutablePathRef pathRef = CGPathCreateMutable();</span><br></pre></td></tr></table></figure>

<h4 id="1-2-路径连线"><a href="#1-2-路径连线" class="headerlink" title="1.2 路径连线"></a>1.2 路径连线</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGPathMoveToPoint(pathRef, NULL, 83.277656, -169.938307);</span><br><span class="line"></span><br><span class="line">CGPathAddLineToPoint(pathRef, NULL, 21.083895, -169.938307);</span><br><span class="line"></span><br><span class="line">CGPathAddLineToPoint(pathRef, NULL, 21.083895, -36.617291);</span><br><span class="line"></span><br><span class="line">CGPathAddLineToPoint(pathRef, NULL, 83.877837, -35.508388);</span><br><span class="line"></span><br><span class="line">CGPathAddLineToPoint(pathRef, NULL, 83.277656, -169.938307);</span><br></pre></td></tr></table></figure>

<h4 id="1-3-关闭绘图"><a href="#1-3-关闭绘图" class="headerlink" title="1.3 关闭绘图"></a>1.3 关闭绘图</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGPathCloseSubpath(pathRef);</span><br></pre></td></tr></table></figure>

<h3 id="2-判断任意点是否在此区域内"><a href="#2-判断任意点是否在此区域内" class="headerlink" title="2. 判断任意点是否在此区域内"></a>2. 判断任意点是否在此区域内</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGPoint point= CGPointMake(aircraftLocation.latitude, aircraftLocation.longitude);</span><br><span class="line"></span><br><span class="line">BOOL containsPoint = (CGPathContainsPoint(pathRef, NULL, point, NO));</span><br></pre></td></tr></table></figure>





</li>
</ul>
<hr>
<blockquote>
<p><strong>个人博客:</strong> 🏡 <a href="https://forgetsou.github.io/">ForgetSou</a></p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>OC</tag>
        <tag>日常收集</tag>
      </tags>
  </entry>
</search>
